From fb01e9cd8f01b989259408cb0b6c8c2d7a7f5c28 Mon Sep 17 00:00:00 2001
From: Benedikt Straub <benedikt-straub@web.de>
Date: Sat, 9 May 2020 17:37:42 +0200
Subject: [PATCH 1/3] Replace boost::bind with lambdas

---
 .../codecheck/rules/do_not_use_boost_bind.py  | 28 ++++++++++++++
 src/economy/economy.cc                        |  5 +--
 src/economy/test/test_routing.cc              |  4 +-
 .../categorized_item_selection_menu.h         |  4 +-
 src/editor/ui_menus/main_menu_load_map.cc     |  8 ++--
 .../ui_menus/main_menu_load_or_save_map.cc    | 13 +++----
 src/editor/ui_menus/main_menu_map_options.cc  | 16 ++++----
 src/editor/ui_menus/main_menu_new_map.cc      |  4 +-
 src/editor/ui_menus/main_menu_random_map.cc   | 38 +++++++------------
 src/editor/ui_menus/main_menu_save_map.cc     | 22 +++++------
 .../main_menu_save_map_make_directory.cc      | 14 +++----
 src/editor/ui_menus/player_menu.cc            | 16 +++-----
 .../tool_change_height_options_menu.cc        |  6 +--
 .../tool_change_resources_options_menu.cc     | 12 ++----
 .../tool_noise_height_options_menu.cc         |  9 ++---
 src/editor/ui_menus/toolsize_menu.cc          |  6 +--
 src/game_io/game_loader.cc                    |  2 +-
 src/logic/player.cc                           |  2 +-
 src/ui_basic/box.cc                           |  2 +-
 src/ui_basic/dropdown.cc                      |  8 ++--
 src/ui_basic/icongrid.cc                      |  2 +-
 src/ui_basic/listselect.cc                    |  2 +-
 src/ui_basic/messagebox.cc                    |  5 +--
 src/ui_basic/multilineeditbox.cc              |  2 +-
 src/ui_basic/multilinetextarea.cc             |  2 +-
 src/ui_basic/spinbox.cc                       | 12 ++----
 src/ui_basic/table.cc                         |  9 ++---
 src/ui_fsmenu/about.cc                        |  2 +-
 src/ui_fsmenu/campaign_select.cc              | 16 +++-----
 src/ui_fsmenu/helpwindow.cc                   |  2 +-
 src/ui_fsmenu/internet_lobby.cc               | 24 ++++--------
 src/ui_fsmenu/launch_game.cc                  | 10 ++---
 src/ui_fsmenu/launch_mpg.cc                   | 18 +++------
 src/ui_fsmenu/launch_spg.cc                   |  6 +--
 src/ui_fsmenu/loadgame.cc                     | 16 +++-----
 src/ui_fsmenu/main.cc                         | 32 ++++------------
 src/ui_fsmenu/mapselect.cc                    | 25 +++++-------
 src/ui_fsmenu/multiplayer.cc                  | 14 ++-----
 src/ui_fsmenu/netsetup_lan.cc                 | 21 ++++------
 src/ui_fsmenu/options.cc                      |  9 ++---
 src/ui_fsmenu/scenario_select.cc              | 14 +++----
 src/ui_fsmenu/singleplayer.cc                 | 16 ++------
 src/wui/actionconfirm.cc                      |  4 +-
 src/wui/attack_box.cc                         |  2 +-
 src/wui/building_statistics_menu.cc           | 32 ++++++----------
 src/wui/buildingwindow.cc                     | 22 ++++-------
 src/wui/constructionsitewindow.cc             | 12 ++----
 src/wui/debugconsole.cc                       |  6 +--
 src/wui/encyclopedia_window.cc                |  3 +-
 src/wui/fieldaction.cc                        | 19 ++++------
 src/wui/game_chat_menu.cc                     |  4 +-
 src/wui/game_chat_panel.cc                    |  4 +-
 src/wui/game_client_disconnected.cc           |  9 ++---
 src/wui/game_debug_ui.cc                      |  4 +-
 src/wui/game_main_menu_save_game.cc           | 17 ++++-----
 src/wui/game_message_menu.cc                  | 34 +++++++----------
 src/wui/game_objectives_menu.cc               |  5 ++-
 src/wui/game_summary.cc                       |  6 +--
 src/wui/general_statistics_menu.cc            |  6 +--
 src/wui/inputqueuedisplay.cc                  | 11 ++----
 src/wui/interactive_base.cc                   |  7 ++--
 src/wui/interactive_player.cc                 |  2 +-
 src/wui/load_or_save_game.cc                  |  4 +-
 src/wui/login_box.cc                          | 12 +++---
 src/wui/minimap.cc                            | 18 +++------
 src/wui/multiplayersetupgroup.cc              | 15 +++-----
 src/wui/playerdescrgroup.cc                   | 12 ++----
 src/wui/portdockwaresdisplay.cc               |  2 +-
 src/wui/productionsitewindow.cc               |  3 +-
 src/wui/seafaring_statistics_menu.cc          | 23 +++++------
 src/wui/shipwindow.cc                         | 29 +++++++-------
 src/wui/soldiercapacitycontrol.cc             |  6 +--
 src/wui/soldierlist.cc                        |  7 ++--
 src/wui/story_message_box.cc                  |  2 +-
 src/wui/warehousewindow.cc                    |  3 +-
 src/wui/watchwindow.cc                        |  8 ++--
 76 files changed, 342 insertions(+), 489 deletions(-)
 create mode 100644 cmake/codecheck/rules/do_not_use_boost_bind.py

diff --git a/cmake/codecheck/rules/do_not_use_boost_bind.py b/cmake/codecheck/rules/do_not_use_boost_bind.py
new file mode 100644
index 0000000000..cfa4a37994
--- /dev/null
+++ b/cmake/codecheck/rules/do_not_use_boost_bind.py
@@ -0,0 +1,28 @@
+#!/usr/bin/python
+
+strip_comments_and_strings = True
+
+
+def evaluate_matches(lines, fn):
+    errors = []
+
+    for lineno, line in enumerate(lines):
+        if line.count('boost::bind'):
+            errors.append(
+                (fn, lineno+1, "'boost::bind' is deprecated, use a lambda function instead."))
+        if line.count('boost::ref'):
+            errors.append(
+                (fn, lineno+1, "There is no reason to use 'boost::ref'."))
+
+    return errors
+# /end evaluate_matches
+
+
+forbidden = [
+    'table_->set_column_compare(0, boost::bind(&LoadOrSaveGame::compare_save_time, this, _1, _2));'
+    'table_->set_column_compare(0, boost::bind(&LoadOrSaveGame::compare_save_time, boost::ref(*this), _1, _2));'
+]
+
+allowed = [
+    'table_->set_column_compare(0, [this](uint32_t a, uint32_t b) { compare_save_time(a, b); });'
+]
diff --git a/src/economy/economy.cc b/src/economy/economy.cc
index 81848406ec..2dfe87b90a 100644
--- a/src/economy/economy.cc
+++ b/src/economy/economy.cc
@@ -80,7 +80,7 @@ Economy::Economy(Player& player, Serial init_serial, WareWorker wwtype)
 		target_quantities_[i] = tq;
 	}
 
-	router_.reset(new Router(boost::bind(&Economy::reset_all_pathfinding_cycles, this)));
+	router_.reset(new Router([this]() { reset_all_pathfinding_cycles();}));
 }
 
 Economy::~Economy() {
@@ -1013,8 +1013,7 @@ void Economy::handle_active_supplies(Game& game) {
 		} else {
 			wh = find_closest_warehouse(
 			   supply.get_position(game)->base_flag(), nullptr, 0,
-			   (!havenormal) ? WarehouseAcceptFn() : boost::bind(&accept_warehouse_if_policy, _1,
-			                                                     type_, ware, StockPolicy::kNormal));
+			   (!havenormal) ? WarehouseAcceptFn() : [this, ware](Warehouse& w) { return accept_warehouse_if_policy(w, type_, ware, StockPolicy::kNormal); });
 		}
 		if (!wh) {
 			log("Warning: Economy::handle_active_supplies "
diff --git a/src/economy/test/test_routing.cc b/src/economy/test/test_routing.cc
index e5599c6716..21a623111a 100644
--- a/src/economy/test/test_routing.cc
+++ b/src/economy/test/test_routing.cc
@@ -228,7 +228,7 @@ BOOST_AUTO_TEST_CASE(RoutingNode_InitializeMemberVariables) {
 }
 
 struct SimpleRouterFixture {
-	SimpleRouterFixture() : r(boost::bind(&SimpleRouterFixture::reset, this)) {
+	SimpleRouterFixture() : r([this]() { reset();}) {
 		d0 = new TestingRoutingNode();
 		d1 = new TestingRoutingNode(1, Coords(15, 0));
 		vec.push_back(d0);
@@ -381,7 +381,7 @@ BOOST_FIXTURE_TEST_CASE(router_findroute_connectedNodes_exceptSuccess, SimpleRou
 struct ComplexRouterFixture {
 	using Nodes = std::vector<RoutingNode*>;
 
-	ComplexRouterFixture() : r(boost::bind(&ComplexRouterFixture::reset, this)) {
+	ComplexRouterFixture() : r([this]() { reset();}) {
 		d0 = new TestingRoutingNode();
 		nodes.push_back(d0);
 	}
diff --git a/src/editor/ui_menus/categorized_item_selection_menu.h b/src/editor/ui_menus/categorized_item_selection_menu.h
index a18091019e..f8452b2a7e 100644
--- a/src/editor/ui_menus/categorized_item_selection_menu.h
+++ b/src/editor/ui_menus/categorized_item_selection_menu.h
@@ -119,7 +119,7 @@ CategorizedItemSelectionMenu<DescriptionType, ToolType>::CategorizedItemSelectio
 
 			UI::Checkbox* cb = create_checkbox(horizontal, descriptions_.get(i));
 			cb->set_state(tool_->is_enabled(i));
-			cb->changedto.connect(boost::bind(&CategorizedItemSelectionMenu::selected, this, i, _1));
+			cb->changedto.connect([this, i](bool b) { selected(i, b);});
 			checkboxes_[i] = cb;
 			horizontal->add(cb);
 			horizontal->add_space(kSpacing);
@@ -128,7 +128,7 @@ CategorizedItemSelectionMenu<DescriptionType, ToolType>::CategorizedItemSelectio
 		tab_panel_.add(category.name(), category.picture(), vertical, category.descname());
 	}
 	add(&current_selection_names_, UI::Box::Resizing::kFullSize);
-	tab_panel_.sigclicked.connect(boost::bind(&CategorizedItemSelectionMenu::update_label, this));
+	tab_panel_.sigclicked.connect([this]() { update_label();});
 	update_label();
 }
 
diff --git a/src/editor/ui_menus/main_menu_load_map.cc b/src/editor/ui_menus/main_menu_load_map.cc
index a6ff2644ca..6db411f069 100644
--- a/src/editor/ui_menus/main_menu_load_map.cc
+++ b/src/editor/ui_menus/main_menu_load_map.cc
@@ -33,11 +33,11 @@ MainMenuLoadMap::MainMenuLoadMap(EditorInteractive& parent, UI::UniqueWindow::Re
    : MainMenuLoadOrSaveMap(parent, registry, "load_map_menu", _("Load Map")) {
 	set_current_directory(curdir_);
 
-	table_.selected.connect(boost::bind(&MainMenuLoadMap::entry_selected, this));
-	table_.double_clicked.connect(boost::bind(&MainMenuLoadMap::clicked_ok, boost::ref(*this)));
+	table_.selected.connect([this](unsigned) { entry_selected();});
+	table_.double_clicked.connect([this](unsigned) { clicked_ok(); });
 
-	ok_.sigclicked.connect(boost::bind(&MainMenuLoadMap::clicked_ok, this));
-	cancel_.sigclicked.connect(boost::bind(&MainMenuLoadMap::die, this));
+	ok_.sigclicked.connect([this]() { clicked_ok();});
+	cancel_.sigclicked.connect([this]() { die();});
 }
 
 void MainMenuLoadMap::clicked_ok() {
diff --git a/src/editor/ui_menus/main_menu_load_or_save_map.cc b/src/editor/ui_menus/main_menu_load_or_save_map.cc
index 719da03fa8..5283b49653 100644
--- a/src/editor/ui_menus/main_menu_load_or_save_map.cc
+++ b/src/editor/ui_menus/main_menu_load_or_save_map.cc
@@ -91,10 +91,9 @@ MainMenuLoadOrSaveMap::MainMenuLoadOrSaveMap(EditorInteractive& parent,
 	show_mapnames_box_.add(cb_dont_localize_mapnames_, UI::Box::Resizing::kFullSize);
 	show_mapnames_box_.add_inf_space();
 
-	table_.set_column_compare(0, boost::bind(&MainMenuLoadOrSaveMap::compare_players, this, _1, _2));
-	table_.set_column_compare(
-	   1, boost::bind(&MainMenuLoadOrSaveMap::compare_mapnames, this, _1, _2));
-	table_.set_column_compare(2, boost::bind(&MainMenuLoadOrSaveMap::compare_size, this, _1, _2));
+	table_.set_column_compare(0, [this](uint32_t a, uint32_t b) { return compare_players(a, b);});
+	table_.set_column_compare(1, [this](uint32_t a, uint32_t b) { return compare_mapnames(a, b);});
+	table_.set_column_compare(2, [this](uint32_t a, uint32_t b) { return compare_size(a, b);});
 
 	table_and_details_box_.add(&table_, UI::Box::Resizing::kExpandBoth);
 	table_and_details_box_.add_space(0);
@@ -113,10 +112,8 @@ MainMenuLoadOrSaveMap::MainMenuLoadOrSaveMap(EditorInteractive& parent,
 	// We don't need the unlocalizing option if there is nothing to unlocalize.
 	// We know this after the list is filled.
 	cb_dont_localize_mapnames_->set_visible(has_translated_mapname_);
-	cb_dont_localize_mapnames_->changedto.connect(
-	   boost::bind(&MainMenuLoadOrSaveMap::fill_table, boost::ref(*this)));
-	show_mapnames_.sigclicked.connect(
-	   boost::bind(&MainMenuLoadOrSaveMap::toggle_mapnames, boost::ref(*this)));
+	cb_dont_localize_mapnames_->changedto.connect([this](bool) { fill_table(); });
+	show_mapnames_.sigclicked.connect([this]() { toggle_mapnames(); });
 
 	move_to_top();
 	layout();
diff --git a/src/editor/ui_menus/main_menu_map_options.cc b/src/editor/ui_menus/main_menu_map_options.cc
index 1096eb2dd1..8b6ffecec1 100644
--- a/src/editor/ui_menus/main_menu_map_options.cc
+++ b/src/editor/ui_menus/main_menu_map_options.cc
@@ -178,19 +178,19 @@ MainMenuMapOptions::MainMenuMapOptions(EditorInteractive& parent, Registry& regi
 	tabs_.add("map_teams", g_gr->images().get("images/wui/editor/tools/players.png"), &teams_box_,
 	          _("Teams"));
 
-	name_.changed.connect(boost::bind(&MainMenuMapOptions::changed, this));
-	author_.changed.connect(boost::bind(&MainMenuMapOptions::changed, this));
-	descr_->changed.connect(boost::bind(&MainMenuMapOptions::changed, this));
-	hint_->changed.connect(boost::bind(&MainMenuMapOptions::changed, this));
-	waterway_length_box_->changed.connect(boost::bind(&MainMenuMapOptions::changed, this));
+	name_.changed.connect([this]() { changed(); });
+	author_.changed.connect([this]() { changed(); });
+	descr_->changed.connect([this]() { changed(); });
+	hint_->changed.connect([this]() { changed(); });
+	waterway_length_box_->changed.connect([this]() { changed(); });
 	for (const auto& tag : tags_checkboxes_) {
-		tag.second->changed.connect(boost::bind(&MainMenuMapOptions::changed, this));
+		tag.second->changed.connect([this]() { changed(); });
 	}
 
 	balancing_dropdown_.selected.connect([this] { changed(); });
 
-	ok_.sigclicked.connect(boost::bind(&MainMenuMapOptions::clicked_ok, boost::ref(*this)));
-	cancel_.sigclicked.connect(boost::bind(&MainMenuMapOptions::clicked_cancel, boost::ref(*this)));
+	ok_.sigclicked.connect([this]() { clicked_ok(); });
+	cancel_.sigclicked.connect([this]() { clicked_cancel(); });
 
 	update();
 	ok_.set_enabled(true);
diff --git a/src/editor/ui_menus/main_menu_new_map.cc b/src/editor/ui_menus/main_menu_new_map.cc
index 7df23addc7..a47ef16329 100644
--- a/src/editor/ui_menus/main_menu_new_map.cc
+++ b/src/editor/ui_menus/main_menu_new_map.cc
@@ -75,8 +75,8 @@ MainMenuNewMap::MainMenuNewMap(EditorInteractive& parent, Registry& registry)
 	box_.add(&list_);
 	box_.add_space(2 * margin_);
 
-	cancel_button_.sigclicked.connect(boost::bind(&MainMenuNewMap::clicked_cancel, this));
-	ok_button_.sigclicked.connect(boost::bind(&MainMenuNewMap::clicked_create_map, this));
+	cancel_button_.sigclicked.connect([this]() { clicked_cancel();});
+	ok_button_.sigclicked.connect([this]() { clicked_create_map();});
 	if (UI::g_fh->fontset()->is_rtl()) {
 		button_box_.add(&ok_button_);
 		button_box_.add(&cancel_button_);
diff --git a/src/editor/ui_menus/main_menu_random_map.cc b/src/editor/ui_menus/main_menu_random_map.cc
index 64dfdec960..dbccaab45d 100644
--- a/src/editor/ui_menus/main_menu_random_map.cc
+++ b/src/editor/ui_menus/main_menu_random_map.cc
@@ -212,8 +212,7 @@ MainMenuNewRandomMap::MainMenuNewRandomMap(EditorInteractive& parent,
 	box_.add_space(margin_);
 	box_height += margin_;
 
-	players_.changed.connect(
-	   boost::bind(&MainMenuNewRandomMap::button_clicked, this, ButtonId::kPlayers));
+	players_.changed.connect([this]() { button_clicked(ButtonId::kPlayers);});
 
 	// ---------- Worlds ----------
 
@@ -222,8 +221,7 @@ MainMenuNewRandomMap::MainMenuNewRandomMap(EditorInteractive& parent,
 		world_box_.add_space(resources_label_.get_w() - world_label_.get_w() - margin_);
 	}
 
-	world_.sigclicked.connect(
-	   boost::bind(&MainMenuNewRandomMap::button_clicked, this, ButtonId::kWorld));
+	world_.sigclicked.connect([this]() { button_clicked(ButtonId::kWorld);});
 	world_box_.add(&world_);
 	box_.add(&world_box_);
 	box_height += margin_ + world_box_.get_h();
@@ -237,8 +235,7 @@ MainMenuNewRandomMap::MainMenuNewRandomMap(EditorInteractive& parent,
 		resources_box_.add_space(world_label_.get_w() - resources_label_.get_w() - margin_);
 	}
 
-	resources_.sigclicked.connect(
-	   boost::bind(&MainMenuNewRandomMap::button_clicked, this, ButtonId::kResources));
+	resources_.sigclicked.connect([this]() { button_clicked(ButtonId::kResources);});
 	resources_box_.add(&resources_);
 	box_.add(&resources_box_);
 	box_height += margin_ + resources_box_.get_h();
@@ -246,30 +243,24 @@ MainMenuNewRandomMap::MainMenuNewRandomMap(EditorInteractive& parent,
 	box_height += margin_;
 
 	// ---------- Water -----------
-	water_.get_buttons()[0]->sigclicked.connect(
-	   boost::bind(&MainMenuNewRandomMap::button_clicked, this, ButtonId::kWater));
-	water_.get_buttons()[1]->sigclicked.connect(
-	   boost::bind(&MainMenuNewRandomMap::button_clicked, this, ButtonId::kWater));
+	water_.get_buttons()[0]->sigclicked.connect([this]() { button_clicked(ButtonId::kWater);});
+	water_.get_buttons()[1]->sigclicked.connect([this]() { button_clicked(ButtonId::kWater);});
 
 	box_.add(&water_);
 	box_height += margin_ + water_.get_h();
 
 	// ---------- Land -----------
 
-	land_.get_buttons()[0]->sigclicked.connect(
-	   boost::bind(&MainMenuNewRandomMap::button_clicked, this, ButtonId::kLand));
-	land_.get_buttons()[1]->sigclicked.connect(
-	   boost::bind(&MainMenuNewRandomMap::button_clicked, this, ButtonId::kLand));
+	land_.get_buttons()[0]->sigclicked.connect([this]() { button_clicked(ButtonId::kLand);});
+	land_.get_buttons()[1]->sigclicked.connect([this]() { button_clicked(ButtonId::kLand);});
 
 	box_.add(&land_);
 	box_height += margin_ + land_.get_h();
 
 	// ---------- Wasteland -----------
 
-	wasteland_.get_buttons()[0]->sigclicked.connect(
-	   boost::bind(&MainMenuNewRandomMap::button_clicked, this, ButtonId::kWasteland));
-	wasteland_.get_buttons()[1]->sigclicked.connect(
-	   boost::bind(&MainMenuNewRandomMap::button_clicked, this, ButtonId::kWasteland));
+	wasteland_.get_buttons()[0]->sigclicked.connect([this]() { button_clicked(ButtonId::kWasteland);});
+	wasteland_.get_buttons()[1]->sigclicked.connect([this]() { button_clicked(ButtonId::kWasteland);});
 
 	box_.add(&wasteland_);
 	box_height += margin_ + wasteland_.get_h();
@@ -298,14 +289,13 @@ MainMenuNewRandomMap::MainMenuNewRandomMap(EditorInteractive& parent,
 	box_.add_space(margin_);
 	box_height += margin_;
 
-	island_mode_.changed.connect(
-	   boost::bind(&MainMenuNewRandomMap::button_clicked, this, ButtonId::kIslandMode));
+	island_mode_.changed.connect([this]() { button_clicked(ButtonId::kIslandMode);});
 
 	// ---------- Random map number edit ----------
 
 	map_number_box_.add(&map_number_label_);
 
-	map_number_edit_.changed.connect(boost::bind(&MainMenuNewRandomMap::nr_edit_box_changed, this));
+	map_number_edit_.changed.connect([this]() { nr_edit_box_changed();});
 	RNG rng;
 	rng.seed(clock());
 	rng.rand();
@@ -323,7 +313,7 @@ MainMenuNewRandomMap::MainMenuNewRandomMap(EditorInteractive& parent,
 	map_id_box_.add(&map_id_label_);
 
 	map_id_edit_.set_text("abcd-efgh-ijkl-mnop");
-	map_id_edit_.changed.connect(boost::bind(&MainMenuNewRandomMap::id_edit_box_changed, this));
+	map_id_edit_.changed.connect([this]() { id_edit_box_changed();});
 	map_id_box_.add(&map_id_edit_);
 	box_.add(&map_id_box_);
 	box_height += margin_ + map_id_edit_.get_h();
@@ -331,8 +321,8 @@ MainMenuNewRandomMap::MainMenuNewRandomMap(EditorInteractive& parent,
 	box_height += margin_;
 
 	// ---------- "Generate Map" button ----------
-	cancel_button_.sigclicked.connect(boost::bind(&MainMenuNewRandomMap::clicked_cancel, this));
-	ok_button_.sigclicked.connect(boost::bind(&MainMenuNewRandomMap::clicked_create_map, this));
+	cancel_button_.sigclicked.connect([this]() { clicked_cancel();});
+	ok_button_.sigclicked.connect([this]() { clicked_create_map();});
 	if (UI::g_fh->fontset()->is_rtl()) {
 		button_box_.add(&ok_button_);
 		button_box_.add(&cancel_button_);
diff --git a/src/editor/ui_menus/main_menu_save_map.cc b/src/editor/ui_menus/main_menu_save_map.cc
index d6f205dd2e..f50b900197 100644
--- a/src/editor/ui_menus/main_menu_save_map.cc
+++ b/src/editor/ui_menus/main_menu_save_map.cc
@@ -76,27 +76,25 @@ MainMenuSaveMap::MainMenuSaveMap(EditorInteractive& parent,
 	table_footer_box_.add_space(0);
 	table_footer_box_.add(&make_directory_);
 
-	table_.selected.connect(boost::bind(&MainMenuSaveMap::clicked_item, boost::ref(*this)));
-	table_.double_clicked.connect(
-	   boost::bind(&MainMenuSaveMap::double_clicked_item, boost::ref(*this)));
-	table_.cancel.connect(boost::bind(&MainMenuSaveMap::die, this));
+	table_.selected.connect([this](unsigned) { clicked_item(); });
+	table_.double_clicked.connect([this](unsigned) { double_clicked_item(); });
+	table_.cancel.connect([this]() { die();});
 	table_.set_can_focus(true);
 
 	editbox_.set_text(parent.egbase().map().get_name());
 
-	editbox_.changed.connect(boost::bind(&MainMenuSaveMap::edit_box_changed, this));
+	editbox_.changed.connect([this]() { edit_box_changed();});
 	edit_box_changed();
-	editbox_.ok.connect(boost::bind(&MainMenuSaveMap::clicked_ok, boost::ref(*this)));
-	editbox_.cancel.connect(boost::bind(
-	   &MainMenuSaveMap::reset_editbox_or_die, boost::ref(*this), parent.egbase().map().get_name()));
+	editbox_.ok.connect([this]() { clicked_ok(); });
+	editbox_.cancel.connect([this, &parent]() { reset_editbox_or_die(parent.egbase().map().get_name());});
 
-	ok_.sigclicked.connect(boost::bind(&MainMenuSaveMap::clicked_ok, boost::ref(*this)));
-	cancel_.sigclicked.connect(boost::bind(&MainMenuSaveMap::die, boost::ref(*this)));
+	ok_.sigclicked.connect([this]() { clicked_ok(); });
+	cancel_.sigclicked.connect([this]() { die(); });
 
 	make_directory_.sigclicked.connect(
-	   boost::bind(&MainMenuSaveMap::clicked_make_directory, boost::ref(*this)));
+	   [this]() { clicked_make_directory(); });
 	edit_options_.sigclicked.connect(
-	   boost::bind(&MainMenuSaveMap::clicked_edit_options, boost::ref(*this)));
+	   [this]() { clicked_edit_options(); });
 
 	// We always want the current map's data here
 	const Widelands::Map& map = parent.egbase().map();
diff --git a/src/editor/ui_menus/main_menu_save_map_make_directory.cc b/src/editor/ui_menus/main_menu_save_map_make_directory.cc
index 07c8eb5245..50dc774ab6 100644
--- a/src/editor/ui_menus/main_menu_save_map_make_directory.cc
+++ b/src/editor/ui_menus/main_menu_save_map_make_directory.cc
@@ -66,16 +66,12 @@ MainMenuSaveMapMakeDirectory::MainMenuSaveMapMakeDirectory(UI::Panel* const pare
 	vbox_.set_size(get_inner_w() - 2 * padding_, get_inner_h() - 3 * padding_ - buth_);
 
 	edit_.set_text(dirname_);
-	edit_.changed.connect(boost::bind(&MainMenuSaveMapMakeDirectory::edit_changed, this));
-	edit_.ok.connect(boost::bind(&MainMenuSaveMapMakeDirectory::clicked_ok, this));
-	edit_.cancel.connect(
-	   boost::bind(&MainMenuSaveMapMakeDirectory::end_modal<UI::Panel::Returncodes>,
-	               boost::ref(*this), UI::Panel::Returncodes::kBack));
-	ok_button_.sigclicked.connect(boost::bind(&MainMenuSaveMapMakeDirectory::clicked_ok, this));
+	edit_.changed.connect([this]() { edit_changed();});
+	edit_.ok.connect([this]() { clicked_ok();});
+	edit_.cancel.connect([this]() { end_modal<UI::Panel::Returncodes>(UI::Panel::Returncodes::kBack);});
+	ok_button_.sigclicked.connect([this]() { clicked_ok();});
 	ok_button_.set_enabled(!dirname_.empty());
-	cancel_button_.sigclicked.connect(
-	   boost::bind(&MainMenuSaveMapMakeDirectory::end_modal<UI::Panel::Returncodes>,
-	               boost::ref(*this), UI::Panel::Returncodes::kBack));
+	cancel_button_.sigclicked.connect([this]() { end_modal<UI::Panel::Returncodes>(UI::Panel::Returncodes::kBack);});
 	center_to_parent();
 }
 
diff --git a/src/editor/ui_menus/player_menu.cc b/src/editor/ui_menus/player_menu.cc
index 7ef5338acb..de4b33c4a1 100644
--- a/src/editor/ui_menus/player_menu.cc
+++ b/src/editor/ui_menus/player_menu.cc
@@ -81,9 +81,8 @@ public:
 		box_.add(&button_box_, UI::Box::Resizing::kFullSize);
 		box_.add_space(kMargin);
 
-		ok_.sigclicked.connect(boost::bind(&EditorPlayerMenuWarningBox::ok, boost::ref(*this)));
-		cancel_.sigclicked.connect(
-		   boost::bind(&EditorPlayerMenuWarningBox::cancel, boost::ref(*this)));
+		ok_.sigclicked.connect([this]() { ok(); });
+		cancel_.sigclicked.connect([this]() { cancel();});
 	}
 
 	void ok() {
@@ -156,8 +155,7 @@ EditorPlayerMenu::EditorPlayerMenu(EditorInteractive& parent,
 
 		no_of_players_.add(boost::lexical_cast<std::string>(static_cast<unsigned int>(p)), p, nullptr,
 		                   p == nr_players);
-		no_of_players_.selected.connect(
-		   boost::bind(&EditorPlayerMenu::no_of_players_clicked, boost::ref(*this)));
+		no_of_players_.selected.connect([this]() { no_of_players_clicked();});
 
 		UI::Box* row = new UI::Box(&box_, 0, 0, UI::Box::Horizontal);
 
@@ -166,7 +164,7 @@ EditorPlayerMenu::EditorPlayerMenu(EditorInteractive& parent,
 		if (map_has_player) {
 			plr_name->set_text(map.get_scenario_player_name(p));
 		}
-		plr_name->changed.connect(boost::bind(&EditorPlayerMenu::name_changed, this, p - 1));
+		plr_name->changed.connect([this, p]() { name_changed(p - 1);});
 
 		// Tribe
 		UI::Dropdown<std::string>* plr_tribe = new UI::Dropdown<std::string>(
@@ -188,8 +186,7 @@ EditorPlayerMenu::EditorPlayerMenu(EditorInteractive& parent,
 		   (p <= map.get_nrplayers() && Widelands::tribe_exists(map.get_scenario_player_tribe(p))) ?
 		      map.get_scenario_player_tribe(p) :
 		      "");
-		plr_tribe->selected.connect(
-		   boost::bind(&EditorPlayerMenu::player_tribe_clicked, boost::ref(*this), p - 1));
+		plr_tribe->selected.connect([this, p]() { player_tribe_clicked(p - 1);});
 
 		// Starting position
 		const Image* player_image =
@@ -201,8 +198,7 @@ EditorPlayerMenu::EditorPlayerMenu(EditorInteractive& parent,
 		   /** TRANSLATORS: Button tooltip in the editor for using a player's starting position tool
 		    */
 		   player_image, _("Set this player’s starting position"));
-		plr_position->sigclicked.connect(
-		   boost::bind(&EditorPlayerMenu::set_starting_pos_clicked, boost::ref(*this), p));
+		plr_position->sigclicked.connect([this, p]() { set_starting_pos_clicked(p);});
 
 		// Add the elements to the row
 		row->add(plr_name, UI::Box::Resizing::kFillSpace);
diff --git a/src/editor/ui_menus/tool_change_height_options_menu.cc b/src/editor/ui_menus/tool_change_height_options_menu.cc
index 13428ff054..4f9e87e2dd 100644
--- a/src/editor/ui_menus/tool_change_height_options_menu.cc
+++ b/src/editor/ui_menus/tool_change_height_options_menu.cc
@@ -63,10 +63,8 @@ EditorToolChangeHeightOptionsMenu::EditorToolChangeHeightOptionsMenu(
 	   /** TRANSLATORS: Editor set height access key. **/
 	   _("Ctrl + Click on the map to set terrain height"));
 
-	change_by_.changed.connect(
-	   boost::bind(&EditorToolChangeHeightOptionsMenu::update_change_by, boost::ref(*this)));
-	set_to_.changed.connect(
-	   boost::bind(&EditorToolChangeHeightOptionsMenu::update_set_to, boost::ref(*this)));
+	change_by_.changed.connect([this]() { update_change_by();});
+	set_to_.changed.connect([this]() { update_set_to();});
 
 	box_.add(&change_by_);
 	box_.add(&set_to_);
diff --git a/src/editor/ui_menus/tool_change_resources_options_menu.cc b/src/editor/ui_menus/tool_change_resources_options_menu.cc
index ca27429a17..f43a33b9e2 100644
--- a/src/editor/ui_menus/tool_change_resources_options_menu.cc
+++ b/src/editor/ui_menus/tool_change_resources_options_menu.cc
@@ -78,10 +78,8 @@ EditorToolChangeResourcesOptionsMenu::EditorToolChangeResourcesOptionsMenu(
 	   _("Ctrl + Click on the map to set the amount of the selected resource. This will replace "
 	     "already set resources."));
 
-	change_by_.changed.connect(
-	   boost::bind(&EditorToolChangeResourcesOptionsMenu::update_change_by, boost::ref(*this)));
-	set_to_.changed.connect(
-	   boost::bind(&EditorToolChangeResourcesOptionsMenu::update_set_to, boost::ref(*this)));
+	change_by_.changed.connect([this]() { update_change_by();});
+	set_to_.changed.connect([this]() { update_set_to();});
 
 	box_.add(&change_by_);
 	box_.add(&set_to_);
@@ -105,10 +103,8 @@ EditorToolChangeResourcesOptionsMenu::EditorToolChangeResourcesOptionsMenu(
 
 	radiogroup_.set_state(increase_tool_.get_cur_res());
 
-	radiogroup_.changed.connect(
-	   boost::bind(&EditorToolChangeResourcesOptionsMenu::change_resource, this));
-	radiogroup_.clicked.connect(
-	   boost::bind(&EditorToolChangeResourcesOptionsMenu::change_resource, this));
+	radiogroup_.changed.connect([this]() { change_resource();});
+	radiogroup_.clicked.connect([this]() { change_resource();});
 
 	// Add label
 	cur_selection_.set_fixed_width(box_.get_inner_w());
diff --git a/src/editor/ui_menus/tool_noise_height_options_menu.cc b/src/editor/ui_menus/tool_noise_height_options_menu.cc
index 6860cf88fa..35684312ba 100644
--- a/src/editor/ui_menus/tool_noise_height_options_menu.cc
+++ b/src/editor/ui_menus/tool_noise_height_options_menu.cc
@@ -81,12 +81,9 @@ EditorToolNoiseHeightOptionsMenu::EditorToolNoiseHeightOptionsMenu(
 	   /** TRANSLATORS: Editor set height access key. **/
 	   _("Ctrl + Click on the map to set terrain height"));
 
-	lower_.changed.connect(
-	   boost::bind(&EditorToolNoiseHeightOptionsMenu::update_lower, boost::ref(*this)));
-	upper_.changed.connect(
-	   boost::bind(&EditorToolNoiseHeightOptionsMenu::update_upper, boost::ref(*this)));
-	set_to_.changed.connect(
-	   boost::bind(&EditorToolNoiseHeightOptionsMenu::update_set_to, boost::ref(*this)));
+	lower_.changed.connect([this]() { update_lower(); });
+	upper_.changed.connect([this]() { update_upper(); });
+	set_to_.changed.connect([this]() { update_set_to(); });
 
 	UI::Textarea* label =
 	   new UI::Textarea(&box_, 0, 0, 0, 0, _("Random height"), UI::Align::kCenter);
diff --git a/src/editor/ui_menus/toolsize_menu.cc b/src/editor/ui_menus/toolsize_menu.cc
index 7d2ff2f950..16664a9ac1 100644
--- a/src/editor/ui_menus/toolsize_menu.cc
+++ b/src/editor/ui_menus/toolsize_menu.cc
@@ -52,10 +52,8 @@ EditorToolsizeMenu::EditorToolsizeMenu(EditorInteractive& parent,
                UI::ButtonStyle::kWuiSecondary,
                g_gr->images().get("images/ui_basic/scrollbar_down.png")),
      value_(0) {
-	increase_.sigclicked.connect(
-	   boost::bind(&EditorToolsizeMenu::increase_radius, boost::ref(*this)));
-	decrease_.sigclicked.connect(
-	   boost::bind(&EditorToolsizeMenu::decrease_radius, boost::ref(*this)));
+	increase_.sigclicked.connect([this]() { increase_radius();});
+	decrease_.sigclicked.connect([this]() { decrease_radius();});
 
 	increase_.set_repeating(true);
 	decrease_.set_repeating(true);
diff --git a/src/game_io/game_loader.cc b/src/game_io/game_loader.cc
index d61ec3abe5..035f032567 100644
--- a/src/game_io/game_loader.cc
+++ b/src/game_io/game_loader.cc
@@ -149,7 +149,7 @@ int32_t GameLoader::load_game(bool const multiplayer) {
 			// Renew MapObject connections
 			if (message->serial() > 0) {
 				MapObject* mo = game_.objects().get_object(message->serial());
-				mo->removed.connect(boost::bind(&Player::message_object_removed, player, message_id));
+				mo->removed.connect([player, message_id](unsigned) { player->message_object_removed(message_id);});
 			}
 		}
 	}
diff --git a/src/logic/player.cc b/src/logic/player.cc
index fd75d8c1f4..11877cee35 100644
--- a/src/logic/player.cc
+++ b/src/logic/player.cc
@@ -350,7 +350,7 @@ MessageId Player::add_message(Game& game, std::unique_ptr<Message> new_message,
 	// MapObject connection
 	if (message->serial() > 0) {
 		MapObject* mo = egbase().objects().get_object(message->serial());
-		mo->removed.connect(boost::bind(&Player::message_object_removed, this, id));
+		mo->removed.connect([this, id](unsigned) { message_object_removed(id);});
 	}
 
 	// Sound & popup
diff --git a/src/ui_basic/box.cc b/src/ui_basic/box.cc
index fca94b4ba6..b83d3073dc 100644
--- a/src/ui_basic/box.cc
+++ b/src/ui_basic/box.cc
@@ -198,7 +198,7 @@ void Box::layout() {
 			// TODO(GunChleoc): Implement styling if we ever use the scrollbar function.
 			scrollbar_.reset(new Scrollbar(
 			   this, sb_x, sb_y, sb_w, sb_h, UI::PanelStyle::kFsMenu, orientation_ == Horizontal));
-			scrollbar_->moved.connect(boost::bind(&Box::scrollbar_moved, this, _1));
+			scrollbar_->moved.connect([this](int32_t a) { scrollbar_moved(a);});
 		} else {
 			scrollbar_->set_pos(Vector2i(sb_x, sb_y));
 			scrollbar_->set_size(sb_w, sb_h);
diff --git a/src/ui_basic/dropdown.cc b/src/ui_basic/dropdown.cc
index 0923139ff9..e085893c59 100644
--- a/src/ui_basic/dropdown.cc
+++ b/src/ui_basic/dropdown.cc
@@ -132,15 +132,15 @@ BaseDropdown::BaseDropdown(UI::Panel* parent,
 
 	list_->set_visible(false);
 	button_box_.add(&display_button_, UI::Box::Resizing::kExpandBoth);
-	display_button_.sigclicked.connect(boost::bind(&BaseDropdown::toggle_list, this));
+	display_button_.sigclicked.connect([this]() { toggle_list();});
 	if (push_button_ != nullptr) {
 		display_button_.set_perm_pressed(true);
 		button_box_.add(push_button_, UI::Box::Resizing::kFullSize);
-		push_button_->sigclicked.connect(boost::bind(&BaseDropdown::toggle_list, this));
+		push_button_->sigclicked.connect([this]() { toggle_list();});
 	}
 	button_box_.set_size(w, get_h());
-	list_->clicked.connect(boost::bind(&BaseDropdown::set_value, this));
-	list_->clicked.connect(boost::bind(&BaseDropdown::toggle_list, this));
+	list_->clicked.connect([this]() { set_value();});
+	list_->clicked.connect([this]() { toggle_list();});
 	set_can_focus(true);
 	set_value();
 
diff --git a/src/ui_basic/icongrid.cc b/src/ui_basic/icongrid.cc
index 1538668aa5..703d1c5ab3 100644
--- a/src/ui_basic/icongrid.cc
+++ b/src/ui_basic/icongrid.cc
@@ -98,7 +98,7 @@ int32_t IconGrid::add(const std::string& name,
 
 	UI::Button* btn =
 	   new IconGridButton(*this, name, x, y, cell_width_, cell_height_, pic, idx, tooltip_text);
-	btn->sigclicked.connect(boost::bind(&IconGrid::clicked_button, this, idx));
+	btn->sigclicked.connect([this, idx]() { clicked_button(idx);});
 
 	return idx;
 }
diff --git a/src/ui_basic/listselect.cc b/src/ui_basic/listselect.cc
index d8115cdbb8..c82f92fa80 100644
--- a/src/ui_basic/listselect.cc
+++ b/src/ui_basic/listselect.cc
@@ -89,7 +89,7 @@ BaseListselect::BaseListselect(Panel* const parent,
      notify_on_delete_(nullptr) {
 	set_thinks(false);
 
-	scrollbar_.moved.connect(boost::bind(&BaseListselect::set_scrollpos, this, _1));
+	scrollbar_.moved.connect([this](int32_t a) { set_scrollpos(a); });
 
 	if (selection_mode_ == ListselectLayout::kShowCheck) {
 		check_pic_ = g_gr->images().get("images/ui_basic/list_selected.png");
diff --git a/src/ui_basic/messagebox.cc b/src/ui_basic/messagebox.cc
index 520716dfce..26a1e106cd 100644
--- a/src/ui_basic/messagebox.cc
+++ b/src/ui_basic/messagebox.cc
@@ -91,14 +91,13 @@ WLMessageBox::WLMessageBox(Panel* const parent,
 	                               (width - button_w) / 2 :
 	                               UI::g_fh->fontset()->is_rtl() ? left_button_x : right_button_x,
 	                            button_y, button_w, 0, UI::ButtonStyle::kWuiPrimary, _("OK")));
-	ok_button_->sigclicked.connect(boost::bind(&WLMessageBox::clicked_ok, boost::ref(*this)));
+	ok_button_->sigclicked.connect([this]() { clicked_ok();});
 
 	if (type_ == MBoxType::kOkCancel) {
 		cancel_button_.reset(
 		   new Button(this, "cancel", UI::g_fh->fontset()->is_rtl() ? right_button_x : left_button_x,
 		              button_y, button_w, 0, UI::ButtonStyle::kWuiSecondary, _("Cancel")));
-		cancel_button_->sigclicked.connect(
-		   boost::bind(&WLMessageBox::clicked_back, boost::ref(*this)));
+		cancel_button_->sigclicked.connect([this]() { clicked_back();});
 	}
 
 	set_inner_size(width, button_y + ok_button_->get_h() + margin);
diff --git a/src/ui_basic/multilineeditbox.cc b/src/ui_basic/multilineeditbox.cc
index db40f9a8ef..e3e63868b2 100644
--- a/src/ui_basic/multilineeditbox.cc
+++ b/src/ui_basic/multilineeditbox.cc
@@ -102,7 +102,7 @@ MultilineEditbox::Data::Data(MultilineEditbox& o, const UI::TextPanelStyleInfo&
      ww_valid(false),
      ww(style.font().size(), style.font().color(), o.get_w()),
      owner(o) {
-	scrollbar.moved.connect(boost::bind(&MultilineEditbox::scrollpos_changed, &o, _1));
+	scrollbar.moved.connect([&o](int32_t a) { o.scrollpos_changed(a);});
 
 	scrollbar.set_pagesize(owner.get_h() - 2 * lineheight);
 	scrollbar.set_singlestepsize(lineheight);
diff --git a/src/ui_basic/multilinetextarea.cc b/src/ui_basic/multilinetextarea.cc
index f2eb5a7d07..996604b8e6 100644
--- a/src/ui_basic/multilinetextarea.cc
+++ b/src/ui_basic/multilinetextarea.cc
@@ -50,7 +50,7 @@ MultilineTextarea::MultilineTextarea(Panel* const parent,
      scrollbar_(this, get_w() - Scrollbar::kSize, 0, Scrollbar::kSize, h, style, false) {
 	set_thinks(false);
 
-	scrollbar_.moved.connect(boost::bind(&MultilineTextarea::scrollpos_changed, this, _1));
+	scrollbar_.moved.connect([this](int32_t a) { scrollpos_changed(a);});
 
 	scrollbar_.set_singlestepsize(text_height(*style_, font_scale_));
 	scrollbar_.set_steps(1);
diff --git a/src/ui_basic/spinbox.cc b/src/ui_basic/spinbox.cc
index 5349509d9b..8a6c225537 100644
--- a/src/ui_basic/spinbox.cc
+++ b/src/ui_basic/spinbox.cc
@@ -132,10 +132,8 @@ SpinBox::SpinBox(Panel* const parent,
 		              g_gr->images().get("images/ui_basic/scrollbar_right_fast.png"),
 		              _("Increase the value by 10"));
 
-		sbi_->button_ten_plus->sigclicked.connect(
-		   boost::bind(&SpinBox::change_value, boost::ref(*this), big_step_size));
-		sbi_->button_ten_minus->sigclicked.connect(
-		   boost::bind(&SpinBox::change_value, boost::ref(*this), -1 * big_step_size));
+		sbi_->button_ten_plus->sigclicked.connect([this, big_step_size]() { change_value(big_step_size); });
+		sbi_->button_ten_minus->sigclicked.connect([this, big_step_size]() { change_value(-big_step_size); });
 		sbi_->button_ten_plus->set_repeating(true);
 		sbi_->button_ten_minus->set_repeating(true);
 		buttons_.push_back(sbi_->button_ten_minus);
@@ -152,10 +150,8 @@ SpinBox::SpinBox(Panel* const parent,
 		box_->add(sbi_->button_plus);
 	}
 
-	sbi_->button_plus->sigclicked.connect(
-	   boost::bind(&SpinBox::change_value, boost::ref(*this), step_size));
-	sbi_->button_minus->sigclicked.connect(
-	   boost::bind(&SpinBox::change_value, boost::ref(*this), -1 * step_size));
+	sbi_->button_plus->sigclicked.connect([this, step_size]() { change_value(step_size); });
+	sbi_->button_minus->sigclicked.connect([this, step_size]() { change_value(-step_size); });
 	sbi_->button_plus->set_repeating(true);
 	sbi_->button_minus->set_repeating(true);
 	buttons_.push_back(sbi_->button_minus);
diff --git a/src/ui_basic/table.cc b/src/ui_basic/table.cc
index 2ae5fce79f..151ed542ae 100644
--- a/src/ui_basic/table.cc
+++ b/src/ui_basic/table.cc
@@ -74,7 +74,7 @@ Table<void*>::Table(Panel* const parent,
 	scrollbar_filler_button_->set_visible(false);
 	scrollbar_ = new Scrollbar(this, get_w() - Scrollbar::kSize, headerheight_, Scrollbar::kSize,
 	                           get_h() - headerheight_, style);
-	scrollbar_->moved.connect(boost::bind(&Table::set_scrollpos, this, _1));
+	scrollbar_->moved.connect([this](int32_t a) { set_scrollpos(a); } );
 	scrollbar_->set_steps(1);
 	scrollbar_->set_singlestepsize(lineheight_);
 	scrollbar_->set_pagesize(get_h() - lineheight_);
@@ -121,11 +121,10 @@ void Table<void*>::add_column(uint32_t const width,
 		// The title text can be empty.
 		c.btn = new Button(this, title, complete_width, 0, width, headerheight_, button_style_, title,
 		                   tooltip_string);
-		c.btn->sigclicked.connect(
-		   boost::bind(&Table::header_button_clicked, boost::ref(*this), columns_.size()));
+		c.btn->sigclicked.connect([this]() { header_button_clicked(columns_.size()); } );
 		c.width = width;
 		c.alignment = alignment;
-		c.compare = boost::bind(&Table<void*>::default_compare_string, this, columns_.size(), _1, _2);
+		c.compare = [this](uint32_t a, uint32_t b) { return default_compare_string(columns_.size(), a, b); };
 		columns_.push_back(c);
 		if (column_type == TableColumnType::kFlexible) {
 			assert(flexible_column_ == std::numeric_limits<size_t>::max());
@@ -707,7 +706,7 @@ void Table<void*>::sort(const uint32_t lower_bound, uint32_t upper_bound) {
 	}
 
 	std::stable_sort(
-	   indices.begin(), indices.end(), boost::bind(&Table<void*>::sort_helper, this, _1, _2));
+	   indices.begin(), indices.end(), [this](uint32_t a, uint32_t b) { return sort_helper(a, b); });
 
 	uint32_t newselection = selection_;
 	std::set<uint32_t> new_multiselect;
diff --git a/src/ui_fsmenu/about.cc b/src/ui_fsmenu/about.cc
index 5f3bc73e52..a1a0afdc88 100644
--- a/src/ui_fsmenu/about.cc
+++ b/src/ui_fsmenu/about.cc
@@ -37,7 +37,7 @@ FullscreenMenuAbout::FullscreenMenuAbout()
 	tabs_.add_tab("txts/LICENSE.lua");
 	tabs_.add_tab("txts/AUTHORS.lua");
 	tabs_.add_tab("txts/TRANSLATORS.lua");
-	close_.sigclicked.connect(boost::bind(&FullscreenMenuAbout::clicked_back, this));
+	close_.sigclicked.connect([this]() { clicked_back();});
 	layout();
 }
 
diff --git a/src/ui_fsmenu/campaign_select.cc b/src/ui_fsmenu/campaign_select.cc
index 7ae7d80a3c..4648539a3c 100644
--- a/src/ui_fsmenu/campaign_select.cc
+++ b/src/ui_fsmenu/campaign_select.cc
@@ -48,13 +48,10 @@ FullscreenMenuCampaignSelect::FullscreenMenuCampaignSelect(Campaigns* campvis)
 	back_.set_tooltip(_("Return to the main menu"));
 	ok_.set_tooltip(_("Play this campaign"));
 
-	ok_.sigclicked.connect(
-	   boost::bind(&FullscreenMenuCampaignSelect::clicked_ok, boost::ref(*this)));
-	back_.sigclicked.connect(
-	   boost::bind(&FullscreenMenuCampaignSelect::clicked_back, boost::ref(*this)));
-	table_.selected.connect(boost::bind(&FullscreenMenuCampaignSelect::entry_selected, this));
-	table_.double_clicked.connect(
-	   boost::bind(&FullscreenMenuCampaignSelect::clicked_ok, boost::ref(*this)));
+	ok_.sigclicked.connect([this]() { clicked_ok(); });
+	back_.sigclicked.connect([this]() { clicked_back(); });
+	table_.selected.connect([this](unsigned) { entry_selected();});
+	table_.double_clicked.connect([this](unsigned) { clicked_ok(); });
 
 	/** TRANSLATORS: Campaign difficulty table header */
 	table_.add_column(45, _("Diff."), _("Difficulty"));
@@ -62,14 +59,13 @@ FullscreenMenuCampaignSelect::FullscreenMenuCampaignSelect(Campaigns* campvis)
 	table_.add_column(
 	   0, _("Campaign Name"), _("Campaign Name"), UI::Align::kLeft, UI::TableColumnType::kFlexible);
 	table_.set_column_compare(
-	   0, boost::bind(&FullscreenMenuCampaignSelect::compare_difficulty, this, _1, _2));
+	   0, [this](uint32_t a, uint32_t b) { return compare_difficulty(a, b);});
 	table_.set_sort_column(0);
 	table_.focus();
 	fill_table();
 	layout();
 
-	table_.cancel.connect(
-	   boost::bind(&FullscreenMenuCampaignSelect::clicked_back, boost::ref(*this)));
+	table_.cancel.connect([this]() { clicked_back(); });
 }
 
 void FullscreenMenuCampaignSelect::layout() {
diff --git a/src/ui_fsmenu/helpwindow.cc b/src/ui_fsmenu/helpwindow.cc
index b72b23562b..7da854c3eb 100644
--- a/src/ui_fsmenu/helpwindow.cc
+++ b/src/ui_fsmenu/helpwindow.cc
@@ -49,7 +49,7 @@ FullscreenHelpWindow::FullscreenHelpWindow(Panel* const parent,
 	Button* btn =
 	   new Button(this, "ok", width / 3, 0, width / 3, 0, UI::ButtonStyle::kWuiPrimary, _("OK"));
 
-	btn->sigclicked.connect(boost::bind(&FullscreenHelpWindow::clicked_ok, boost::ref(*this)));
+	btn->sigclicked.connect([this]() { clicked_ok(); });
 	btn->set_pos(Vector2i(btn->get_x(), height - margin - btn->get_h()));
 
 	std::string helptext;
diff --git a/src/ui_fsmenu/internet_lobby.cc b/src/ui_fsmenu/internet_lobby.cc
index 24c59c2eea..36dac4eb9b 100644
--- a/src/ui_fsmenu/internet_lobby.cc
+++ b/src/ui_fsmenu/internet_lobby.cc
@@ -118,12 +118,9 @@ FullscreenMenuInternetLobby::FullscreenMenuInternetLobby(char const* const nick,
      password_(pwd),
      is_registered_(registered) {
 
-	joingame_.sigclicked.connect(
-	   boost::bind(&FullscreenMenuInternetLobby::clicked_joingame, boost::ref(*this)));
-	hostgame_.sigclicked.connect(
-	   boost::bind(&FullscreenMenuInternetLobby::clicked_hostgame, boost::ref(*this)));
-	back_.sigclicked.connect(
-	   boost::bind(&FullscreenMenuInternetLobby::clicked_back, boost::ref(*this)));
+	joingame_.sigclicked.connect([this]() { clicked_joingame();});
+	hostgame_.sigclicked.connect([this]() { clicked_hostgame();});
+	back_.sigclicked.connect([this]() { clicked_back();});
 
 	// Set the texts and style of UI elements
 	title.set_font_scale(scale_factor());
@@ -135,8 +132,7 @@ FullscreenMenuInternetLobby::FullscreenMenuInternetLobby(char const* const nick,
 	std::string server = get_config_string("servername", "");
 	edit_servername_.set_font_scale(scale_factor());
 	edit_servername_.set_text(server);
-	edit_servername_.changed.connect(
-	   boost::bind(&FullscreenMenuInternetLobby::change_servername, this));
+	edit_servername_.changed.connect([this]() { change_servername();});
 
 	// Prepare the lists
 	const std::string t_tip =
@@ -155,14 +151,10 @@ FullscreenMenuInternetLobby::FullscreenMenuInternetLobby(char const* const nick,
 	clientsonline_list_.add_column((lisw_ - 22) * 2 / 8, _("Version"));
 	clientsonline_list_.add_column(
 	   (lisw_ - 22) * 3 / 8, _("Game"), "", UI::Align::kLeft, UI::TableColumnType::kFlexible);
-	clientsonline_list_.set_column_compare(
-	   0, boost::bind(&FullscreenMenuInternetLobby::compare_clienttype, this, _1, _2));
-	clientsonline_list_.double_clicked.connect(
-	   boost::bind(&FullscreenMenuInternetLobby::client_doubleclicked, this, _1));
-	opengames_list_.selected.connect(
-	   boost::bind(&FullscreenMenuInternetLobby::server_selected, this));
-	opengames_list_.double_clicked.connect(
-	   boost::bind(&FullscreenMenuInternetLobby::server_doubleclicked, this));
+	clientsonline_list_.set_column_compare(0, [this](uint32_t a, uint32_t b) { return compare_clienttype(a, b); });
+	clientsonline_list_.double_clicked.connect([this](uint32_t a) { return client_doubleclicked(a);});
+	opengames_list_.selected.connect([this](uint32_t) { server_selected();});
+	opengames_list_.double_clicked.connect([this](uint32_t) { server_doubleclicked();});
 
 	// try to connect to the metaserver
 	if (!InternetGaming::ref().error() && !InternetGaming::ref().logged_in()) {
diff --git a/src/ui_fsmenu/launch_game.cc b/src/ui_fsmenu/launch_game.cc
index b9d84b6be8..a95b9b480b 100644
--- a/src/ui_fsmenu/launch_game.cc
+++ b/src/ui_fsmenu/launch_game.cc
@@ -70,12 +70,10 @@ FullscreenMenuLaunchGame::FullscreenMenuLaunchGame(GameSettingsProvider* const s
      ctrl_(ctrl),
      peaceful_mode_forbidden_(false),
      nr_players_(0) {
-	win_condition_dropdown_.selected.connect(
-	   boost::bind(&FullscreenMenuLaunchGame::win_condition_selected, this));
-	peaceful_.changed.connect(boost::bind(&FullscreenMenuLaunchGame::toggle_peaceful, this));
-	back_.sigclicked.connect(
-	   boost::bind(&FullscreenMenuLaunchGame::clicked_back, boost::ref(*this)));
-	ok_.sigclicked.connect(boost::bind(&FullscreenMenuLaunchGame::clicked_ok, boost::ref(*this)));
+	win_condition_dropdown_.selected.connect([this]() { win_condition_selected(); });
+	peaceful_.changed.connect([this]() { toggle_peaceful(); });
+	back_.sigclicked.connect([this]() { clicked_back(); });
+	ok_.sigclicked.connect([this]() { clicked_ok(); });
 
 	lua_ = new LuaInterface();
 
diff --git a/src/ui_fsmenu/launch_mpg.cc b/src/ui_fsmenu/launch_mpg.cc
index d1973b6c0c..85ba1fb029 100644
--- a/src/ui_fsmenu/launch_mpg.cc
+++ b/src/ui_fsmenu/launch_mpg.cc
@@ -59,24 +59,18 @@ struct MapOrSaveSelectionWindow : public UI::Window {
 		UI::Button* btn =
 		   new UI::Button(this, "map", space, y, butw, buth, UI::ButtonStyle::kFsMenuSecondary,
 		                  _("Map"), _("Select a map"));
-		btn->sigclicked.connect(boost::bind(&MapOrSaveSelectionWindow::pressedButton,
-		                                    boost::ref(*this),
-		                                    FullscreenMenuBase::MenuTarget::kNormalGame));
+		btn->sigclicked.connect([this]() { pressedButton(FullscreenMenuBase::MenuTarget::kNormalGame);});
 
 		btn = new UI::Button(this, "saved_game", space, y + buth + space, butw, buth,
 		                     UI::ButtonStyle::kFsMenuSecondary,
 		                     /** Translators: This is a button to select a savegame */
 		                     _("Saved Game"), _("Select a saved game"));
-		btn->sigclicked.connect(boost::bind(&MapOrSaveSelectionWindow::pressedButton,
-		                                    boost::ref(*this),
-		                                    FullscreenMenuBase::MenuTarget::kScenarioGame));
+		btn->sigclicked.connect([this]() { pressedButton(FullscreenMenuBase::MenuTarget::kScenarioGame);});
 
 		btn =
 		   new UI::Button(this, "cancel", space + butw / 4, y + 3 * buth + 2 * space, butw / 2, buth,
 		                  UI::ButtonStyle::kFsMenuSecondary, _("Cancel"), _("Cancel selection"));
-		btn->sigclicked.connect(boost::bind(&MapOrSaveSelectionWindow::pressedButton,
-		                                    boost::ref(*this),
-		                                    FullscreenMenuBase::MenuTarget::kBack));
+		btn->sigclicked.connect([this]() { pressedButton(FullscreenMenuBase::MenuTarget::kBack);});
 	}
 
 	void think() override {
@@ -176,10 +170,8 @@ FullscreenMenuLaunchMPG::FullscreenMenuLaunchMPG(GameSettingsProvider* const set
 	ok_.set_pos(Vector2i(right_column_x_, get_h() * 218 / 240));
 
 	title_.set_text(_("Multiplayer Game Setup"));
-	change_map_or_save_.sigclicked.connect(
-	   boost::bind(&FullscreenMenuLaunchMPG::change_map_or_save, boost::ref(*this)));
-	help_button_.sigclicked.connect(
-	   boost::bind(&FullscreenMenuLaunchMPG::help_clicked, boost::ref(*this)));
+	change_map_or_save_.sigclicked.connect([this]() { change_map_or_save();});
+	help_button_.sigclicked.connect([this]() { help_clicked();});
 
 	clients_.set_font_scale(scale_factor());
 	players_.set_font_scale(scale_factor());
diff --git a/src/ui_fsmenu/launch_spg.cc b/src/ui_fsmenu/launch_spg.cc
index 09791c1548..2fe4307a5f 100644
--- a/src/ui_fsmenu/launch_spg.cc
+++ b/src/ui_fsmenu/launch_spg.cc
@@ -114,8 +114,7 @@ FullscreenMenuLaunchSPG::FullscreenMenuLaunchSPG(GameSettingsProvider* const set
 	win_condition_dropdown_.set_size(select_map_.get_w(), win_condition_dropdown_.get_h());
 
 	title_.set_text(_("Launch Game"));
-	select_map_.sigclicked.connect(
-	   boost::bind(&FullscreenMenuLaunchSPG::select_map, boost::ref(*this)));
+	select_map_.sigclicked.connect([this]() { select_map();});
 
 	// We want to redesign this screen, so we won't bother defining a font size in the style manager.
 	const int small_scale_factor = scale_factor() * 4 / 5;
@@ -134,8 +133,7 @@ FullscreenMenuLaunchSPG::FullscreenMenuLaunchSPG(GameSettingsProvider* const set
 		   new UI::Button(this, "switch_to_position", get_w() / 100, y += buth_, get_h() * 17 / 500,
 		                  get_h() * 17 / 500, UI::ButtonStyle::kFsMenuSecondary, player_image,
 		                  _("Switch to position"));
-		pos_[i]->sigclicked.connect(
-		   boost::bind(&FullscreenMenuLaunchSPG::switch_to_position, boost::ref(*this), i));
+		pos_[i]->sigclicked.connect([this, i]() { switch_to_position(i);});
 		players_[i] = new PlayerDescriptionGroup(
 		   this, get_w() / 25, y, get_w() * 16 / 25, get_h() * 17 / 500 * 2, settings, i);
 		y += buth_ / 1.17;
diff --git a/src/ui_fsmenu/loadgame.cc b/src/ui_fsmenu/loadgame.cc
index 8a2ff563d4..a0e38b645e 100644
--- a/src/ui_fsmenu/loadgame.cc
+++ b/src/ui_fsmenu/loadgame.cc
@@ -91,16 +91,13 @@ FullscreenMenuLoadGame::FullscreenMenuLoadGame(Widelands::Game& g,
 		ok_.set_tooltip(_("Load this game"));
 	}
 
-	back_.sigclicked.connect(boost::bind(&FullscreenMenuLoadGame::clicked_back, boost::ref(*this)));
-	ok_.sigclicked.connect(boost::bind(&FullscreenMenuLoadGame::clicked_ok, boost::ref(*this)));
-	load_or_save_.table().selected.connect(
-	   boost::bind(&FullscreenMenuLoadGame::entry_selected, this));
-	load_or_save_.table().double_clicked.connect(
-	   boost::bind(&FullscreenMenuLoadGame::clicked_ok, boost::ref(*this)));
+	back_.sigclicked.connect([this]() { clicked_back();});
+	ok_.sigclicked.connect([this]() { clicked_ok();});
+	load_or_save_.table().selected.connect([this](unsigned) { entry_selected();});
+	load_or_save_.table().double_clicked.connect([this](unsigned) { clicked_ok();});
 
 	if (is_replay_) {
-		show_filenames_->changed.connect(
-		   boost::bind(&FullscreenMenuLoadGame::toggle_filenames, boost::ref(*this)));
+		show_filenames_->changed.connect([this]() { toggle_filenames();});
 		show_filenames_->set_state(get_config_bool("display_replay_filenames", true));
 	}
 
@@ -109,8 +106,7 @@ FullscreenMenuLoadGame::FullscreenMenuLoadGame(Widelands::Game& g,
 		load_or_save_.table().select(0);
 	}
 
-	load_or_save_.table().cancel.connect(
-	   boost::bind(&FullscreenMenuLoadGame::clicked_back, boost::ref(*this)));
+	load_or_save_.table().cancel.connect([this]() { clicked_back();});
 }
 
 void FullscreenMenuLoadGame::layout() {
diff --git a/src/ui_fsmenu/main.cc b/src/ui_fsmenu/main.cc
index 7ba68af138..8e9ac1a7bb 100644
--- a/src/ui_fsmenu/main.cc
+++ b/src/ui_fsmenu/main.cc
@@ -72,30 +72,14 @@ FullscreenMenuMain::FullscreenMenuMain()
                 kWidelandsCopyrightStart % kWidelandsCopyrightEnd)
                   .str()),
      gpl(this, 0, 0, 0, 0, _("Licensed under the GNU General Public License V2.0")) {
-	playtutorial.sigclicked.connect(
-	   boost::bind(&FullscreenMenuMain::end_modal<FullscreenMenuBase::MenuTarget>, boost::ref(*this),
-	               FullscreenMenuBase::MenuTarget::kTutorial));
-	singleplayer.sigclicked.connect(
-	   boost::bind(&FullscreenMenuMain::end_modal<FullscreenMenuBase::MenuTarget>, boost::ref(*this),
-	               FullscreenMenuBase::MenuTarget::kSinglePlayer));
-	multiplayer.sigclicked.connect(
-	   boost::bind(&FullscreenMenuMain::end_modal<FullscreenMenuBase::MenuTarget>, boost::ref(*this),
-	               FullscreenMenuBase::MenuTarget::kMultiplayer));
-	replay.sigclicked.connect(
-	   boost::bind(&FullscreenMenuMain::end_modal<FullscreenMenuBase::MenuTarget>, boost::ref(*this),
-	               FullscreenMenuBase::MenuTarget::kReplay));
-	editor.sigclicked.connect(
-	   boost::bind(&FullscreenMenuMain::end_modal<FullscreenMenuBase::MenuTarget>, boost::ref(*this),
-	               FullscreenMenuBase::MenuTarget::kEditor));
-	options.sigclicked.connect(
-	   boost::bind(&FullscreenMenuMain::end_modal<FullscreenMenuBase::MenuTarget>, boost::ref(*this),
-	               FullscreenMenuBase::MenuTarget::kOptions));
-	about.sigclicked.connect(
-	   boost::bind(&FullscreenMenuMain::end_modal<FullscreenMenuBase::MenuTarget>, boost::ref(*this),
-	               FullscreenMenuBase::MenuTarget::kAbout));
-	exit.sigclicked.connect(
-	   boost::bind(&FullscreenMenuMain::end_modal<FullscreenMenuBase::MenuTarget>, boost::ref(*this),
-	               FullscreenMenuBase::MenuTarget::kExit));
+	playtutorial.sigclicked.connect([this]() { end_modal<FullscreenMenuBase::MenuTarget>(FullscreenMenuBase::MenuTarget::kTutorial);});
+	singleplayer.sigclicked.connect([this]() { end_modal<FullscreenMenuBase::MenuTarget>(FullscreenMenuBase::MenuTarget::kSinglePlayer);});
+	multiplayer.sigclicked.connect([this]() { end_modal<FullscreenMenuBase::MenuTarget>(FullscreenMenuBase::MenuTarget::kMultiplayer);});
+	replay.sigclicked.connect([this]() { end_modal<FullscreenMenuBase::MenuTarget>(FullscreenMenuBase::MenuTarget::kReplay);});
+	editor.sigclicked.connect([this]() { end_modal<FullscreenMenuBase::MenuTarget>(FullscreenMenuBase::MenuTarget::kEditor);});
+	options.sigclicked.connect([this]() { end_modal<FullscreenMenuBase::MenuTarget>(FullscreenMenuBase::MenuTarget::kOptions);});
+	about.sigclicked.connect([this]() { end_modal<FullscreenMenuBase::MenuTarget>(FullscreenMenuBase::MenuTarget::kAbout);});
+	exit.sigclicked.connect([this]() { end_modal<FullscreenMenuBase::MenuTarget>(FullscreenMenuBase::MenuTarget::kExit);});
 
 	vbox_.add(&playtutorial, UI::Box::Resizing::kFullSize);
 	vbox_.add(&singleplayer, UI::Box::Resizing::kFullSize);
diff --git a/src/ui_fsmenu/mapselect.cc b/src/ui_fsmenu/mapselect.cc
index 44b5be09e0..62b691133f 100644
--- a/src/ui_fsmenu/mapselect.cc
+++ b/src/ui_fsmenu/mapselect.cc
@@ -74,16 +74,13 @@ FullscreenMenuMapSelect::FullscreenMenuMapSelect(GameSettingsProvider* const set
 		back_.set_tooltip(_("Return to the single player menu"));
 	}
 
-	back_.sigclicked.connect(boost::bind(&FullscreenMenuMapSelect::clicked_back, boost::ref(*this)));
-	ok_.sigclicked.connect(boost::bind(&FullscreenMenuMapSelect::clicked_ok, boost::ref(*this)));
-	table_.selected.connect(boost::bind(&FullscreenMenuMapSelect::entry_selected, this));
-	table_.double_clicked.connect(
-	   boost::bind(&FullscreenMenuMapSelect::clicked_ok, boost::ref(*this)));
-	table_.set_column_compare(
-	   0, boost::bind(&FullscreenMenuMapSelect::compare_players, this, _1, _2));
-	table_.set_column_compare(
-	   1, boost::bind(&FullscreenMenuMapSelect::compare_mapnames, this, _1, _2));
-	table_.set_column_compare(2, boost::bind(&FullscreenMenuMapSelect::compare_size, this, _1, _2));
+	back_.sigclicked.connect([this]() { clicked_back(); });
+	ok_.sigclicked.connect([this]() { clicked_ok(); });
+	table_.selected.connect([this](uint32_t) { entry_selected();});
+	table_.double_clicked.connect([this](uint32_t) { clicked_ok(); });
+	table_.set_column_compare(0, [this](uint32_t a, uint32_t b) { return compare_players(a, b);});
+	table_.set_column_compare(1, [this](uint32_t a, uint32_t b) { return compare_mapnames(a, b);});
+	table_.set_column_compare(2, [this](uint32_t a, uint32_t b) { return compare_size(a, b); });
 
 	UI::Box* hbox = new UI::Box(&checkboxes_, 0, 0, UI::Box::Horizontal, checkbox_space_, get_w());
 
@@ -157,12 +154,10 @@ FullscreenMenuMapSelect::FullscreenMenuMapSelect(GameSettingsProvider* const set
 	// We know this after the list is filled.
 	cb_dont_localize_mapnames_->set_visible(has_translated_mapname_);
 
-	cb_dont_localize_mapnames_->changedto.connect(
-	   boost::bind(&FullscreenMenuMapSelect::fill_table, boost::ref(*this)));
+	cb_dont_localize_mapnames_->changedto.connect([this](unsigned) { fill_table(); });
 
 	for (size_t i = 0; i < tags_checkboxes_.size(); ++i) {
-		tags_checkboxes_.at(i)->changedto.connect(
-		   boost::bind(&FullscreenMenuMapSelect::tagbox_changed, this, i, _1));
+		tags_checkboxes_.at(i)->changedto.connect([this, i](bool b) { tagbox_changed(i, b); });
 	}
 
 	balancing_tags_dropdown_->selected.connect([this] { fill_table(); });
@@ -380,7 +375,7 @@ void FullscreenMenuMapSelect::fill_table() {
 		table_.select(0);
 	}
 	set_has_selection();
-	table_.cancel.connect(boost::bind(&FullscreenMenuMapSelect::clicked_back, boost::ref(*this)));
+	table_.cancel.connect([this]() { clicked_back();});
 
 	if (unspecified_balancing_found != unspecified_balancing_found_) {
 		unspecified_balancing_found_ = unspecified_balancing_found;
diff --git a/src/ui_fsmenu/multiplayer.cc b/src/ui_fsmenu/multiplayer.cc
index 5767680b70..b649017517 100644
--- a/src/ui_fsmenu/multiplayer.cc
+++ b/src/ui_fsmenu/multiplayer.cc
@@ -48,19 +48,13 @@ FullscreenMenuMultiPlayer::FullscreenMenuMultiPlayer()
      showloginbox(
         &vbox_, "lan", 0, 0, butw_, buth_, UI::ButtonStyle::kFsMenuMenu, _("Online Game Settings")),
      back(&vbox_, "back", 0, 0, butw_, buth_, UI::ButtonStyle::kFsMenuMenu, _("Back")) {
-	metaserver.sigclicked.connect(
-	   boost::bind(&FullscreenMenuMultiPlayer::internet_login, boost::ref(*this)));
+	metaserver.sigclicked.connect([this]() { internet_login();});
 
-	lan.sigclicked.connect(
-	   boost::bind(&FullscreenMenuMultiPlayer::end_modal<FullscreenMenuBase::MenuTarget>,
-	               boost::ref(*this), FullscreenMenuBase::MenuTarget::kLan));
+	lan.sigclicked.connect([this]() { end_modal<FullscreenMenuBase::MenuTarget>(FullscreenMenuBase::MenuTarget::kLan);});
 
-	showloginbox.sigclicked.connect(
-	   boost::bind(&FullscreenMenuMultiPlayer::show_internet_login, boost::ref(*this)));
+	showloginbox.sigclicked.connect([this]() { show_internet_login();});
 
-	back.sigclicked.connect(
-	   boost::bind(&FullscreenMenuMultiPlayer::end_modal<FullscreenMenuBase::MenuTarget>,
-	               boost::ref(*this), FullscreenMenuBase::MenuTarget::kBack));
+	back.sigclicked.connect([this]() { end_modal<FullscreenMenuBase::MenuTarget>(FullscreenMenuBase::MenuTarget::kBack);});
 
 	title.set_font_scale(scale_factor());
 
diff --git a/src/ui_fsmenu/netsetup_lan.cc b/src/ui_fsmenu/netsetup_lan.cc
index 5132a9fd4c..c29016d68d 100644
--- a/src/ui_fsmenu/netsetup_lan.cc
+++ b/src/ui_fsmenu/netsetup_lan.cc
@@ -106,27 +106,22 @@ FullscreenMenuNetSetupLAN::FullscreenMenuNetSetupLAN()
 	host_box_.add_space(padding_);
 	host_box_.add(&loadlasthost_);
 
-	joingame_.sigclicked.connect(
-	   boost::bind(&FullscreenMenuNetSetupLAN::clicked_joingame, boost::ref(*this)));
-	hostgame_.sigclicked.connect(
-	   boost::bind(&FullscreenMenuNetSetupLAN::clicked_hostgame, boost::ref(*this)));
-	back_.sigclicked.connect(
-	   boost::bind(&FullscreenMenuNetSetupLAN::clicked_back, boost::ref(*this)));
-	loadlasthost_.sigclicked.connect(
-	   boost::bind(&FullscreenMenuNetSetupLAN::clicked_lasthost, boost::ref(*this)));
+	joingame_.sigclicked.connect([this]() { clicked_joingame(); });
+	hostgame_.sigclicked.connect([this]() { clicked_hostgame(); });
+	back_.sigclicked.connect([this]() { clicked_back(); });
+	loadlasthost_.sigclicked.connect([this]() { clicked_lasthost(); });
 
 	playername_.set_font_scale(scale_factor());
 	hostname_.set_font_scale(scale_factor());
 
-	hostname_.changed.connect(boost::bind(&FullscreenMenuNetSetupLAN::change_hostname, this));
+	hostname_.changed.connect([this]() { change_hostname();});
 	playername_.set_text(get_config_string("nickname", (_("nobody"))));
-	playername_.changed.connect(boost::bind(&FullscreenMenuNetSetupLAN::change_playername, this));
+	playername_.changed.connect([this]() { change_playername();});
 	table_.add_column(190, _("Host"));
 	table_.add_column(0, _("Map"), "", UI::Align::kLeft, UI::TableColumnType::kFlexible);
 	table_.add_column(90, _("State"));
-	table_.selected.connect(boost::bind(&FullscreenMenuNetSetupLAN::game_selected, this, _1));
-	table_.double_clicked.connect(
-	   boost::bind(&FullscreenMenuNetSetupLAN::game_doubleclicked, this, _1));
+	table_.selected.connect([this](int32_t i) { game_selected(i);});
+	table_.double_clicked.connect([this](int32_t i) { game_doubleclicked(i);});
 	discovery_.set_callback(discovery_callback, this);
 
 	joingame_.set_enabled(false);
diff --git a/src/ui_fsmenu/options.cc b/src/ui_fsmenu/options.cc
index 49b6ba4c4e..85b8462bec 100644
--- a/src/ui_fsmenu/options.cc
+++ b/src/ui_fsmenu/options.cc
@@ -278,11 +278,10 @@ FullscreenMenuOptions::FullscreenMenuOptions(OptionsCtrl::OptionsStruct opt)
 	box_game_.add(&game_clock_);
 
 	// Bind actions
-	language_dropdown_.selected.connect(
-	   boost::bind(&FullscreenMenuOptions::update_language_stats, this, false));
-	cancel_.sigclicked.connect(boost::bind(&FullscreenMenuOptions::clicked_cancel, this));
-	apply_.sigclicked.connect(boost::bind(&FullscreenMenuOptions::clicked_apply, this));
-	ok_.sigclicked.connect(boost::bind(&FullscreenMenuOptions::clicked_ok, this));
+	language_dropdown_.selected.connect([this]() { update_language_stats(false);});
+	cancel_.sigclicked.connect([this]() { clicked_cancel();});
+	apply_.sigclicked.connect([this]() { clicked_apply();});
+	ok_.sigclicked.connect([this]() { clicked_ok();});
 
 	/** TRANSLATORS: Options: Save game automatically every: */
 	sb_autosave_.add_replacement(0, _("Off"));
diff --git a/src/ui_fsmenu/scenario_select.cc b/src/ui_fsmenu/scenario_select.cc
index e8b456c83e..fb87746a5b 100644
--- a/src/ui_fsmenu/scenario_select.cc
+++ b/src/ui_fsmenu/scenario_select.cc
@@ -109,13 +109,10 @@ FullscreenMenuScenarioSelect::FullscreenMenuScenarioSelect(CampaignData* camp)
 	                                 _("Return to campaign selection"));
 	ok_.set_tooltip(is_tutorial_ ? _("Play this tutorial") : _("Play this scenario"));
 
-	ok_.sigclicked.connect(
-	   boost::bind(&FullscreenMenuScenarioSelect::clicked_ok, boost::ref(*this)));
-	back_.sigclicked.connect(
-	   boost::bind(&FullscreenMenuScenarioSelect::clicked_back, boost::ref(*this)));
-	table_.selected.connect(boost::bind(&FullscreenMenuScenarioSelect::entry_selected, this));
-	table_.double_clicked.connect(
-	   boost::bind(&FullscreenMenuScenarioSelect::clicked_ok, boost::ref(*this)));
+	ok_.sigclicked.connect([this]() { clicked_ok();});
+	back_.sigclicked.connect([this]() { clicked_back();});
+	table_.selected.connect([this](unsigned) { entry_selected();});
+	table_.double_clicked.connect([this](unsigned) { clicked_ok();});
 
 	if (is_tutorial_) {
 		scenario_difficulty_.set_visible(false);
@@ -149,8 +146,7 @@ FullscreenMenuScenarioSelect::FullscreenMenuScenarioSelect(CampaignData* camp)
 	fill_table();
 	layout();
 
-	table_.cancel.connect(
-	   boost::bind(&FullscreenMenuScenarioSelect::clicked_back, boost::ref(*this)));
+	table_.cancel.connect([this]() { clicked_back();});
 }
 
 void FullscreenMenuScenarioSelect::layout() {
diff --git a/src/ui_fsmenu/singleplayer.cc b/src/ui_fsmenu/singleplayer.cc
index 1722a9ad2d..35302a8779 100644
--- a/src/ui_fsmenu/singleplayer.cc
+++ b/src/ui_fsmenu/singleplayer.cc
@@ -41,18 +41,10 @@ FullscreenMenuSinglePlayer::FullscreenMenuSinglePlayer()
      load_game(
         &vbox_, "load_game", 0, 0, butw_, buth_, UI::ButtonStyle::kFsMenuMenu, _("Load Game")),
      back(&vbox_, "back", 0, 0, butw_, buth_, UI::ButtonStyle::kFsMenuMenu, _("Back")) {
-	new_game.sigclicked.connect(
-	   boost::bind(&FullscreenMenuSinglePlayer::end_modal<FullscreenMenuBase::MenuTarget>,
-	               boost::ref(*this), FullscreenMenuBase::MenuTarget::kNewGame));
-	campaign.sigclicked.connect(
-	   boost::bind(&FullscreenMenuSinglePlayer::end_modal<FullscreenMenuBase::MenuTarget>,
-	               boost::ref(*this), FullscreenMenuBase::MenuTarget::kCampaign));
-	load_game.sigclicked.connect(
-	   boost::bind(&FullscreenMenuSinglePlayer::end_modal<FullscreenMenuBase::MenuTarget>,
-	               boost::ref(*this), FullscreenMenuBase::MenuTarget::kLoadGame));
-	back.sigclicked.connect(
-	   boost::bind(&FullscreenMenuSinglePlayer::end_modal<FullscreenMenuBase::MenuTarget>,
-	               boost::ref(*this), FullscreenMenuBase::MenuTarget::kBack));
+	new_game.sigclicked.connect([this]() { end_modal<FullscreenMenuBase::MenuTarget>(FullscreenMenuBase::MenuTarget::kNewGame); });
+	campaign.sigclicked.connect([this]() { end_modal<FullscreenMenuBase::MenuTarget>(FullscreenMenuBase::MenuTarget::kCampaign); });
+	load_game.sigclicked.connect([this]() { end_modal<FullscreenMenuBase::MenuTarget>(FullscreenMenuBase::MenuTarget::kLoadGame); });
+	back.sigclicked.connect([this]() { end_modal<FullscreenMenuBase::MenuTarget>(FullscreenMenuBase::MenuTarget::kBack); });
 
 	title.set_font_scale(scale_factor());
 
diff --git a/src/wui/actionconfirm.cc b/src/wui/actionconfirm.cc
index bdc5e0783f..dfc49d195e 100644
--- a/src/wui/actionconfirm.cc
+++ b/src/wui/actionconfirm.cc
@@ -144,12 +144,12 @@ ActionConfirm::ActionConfirm(InteractivePlayer& parent,
 
 	UI::Button* okbtn = new UI::Button(button_box, "ok", 0, 0, 80, 34, UI::ButtonStyle::kWuiMenu,
 	                                   g_gr->images().get("images/wui/menu_okay.png"));
-	okbtn->sigclicked.connect(boost::bind(&ActionConfirm::ok, this));
+	okbtn->sigclicked.connect([this]() { ok();});
 
 	UI::Button* cancelbtn =
 	   new UI::Button(button_box, "abort", 0, 0, 80, 34, UI::ButtonStyle::kWuiMenu,
 	                  g_gr->images().get("images/wui/menu_abort.png"));
-	cancelbtn->sigclicked.connect(boost::bind(&ActionConfirm::die, this));
+	cancelbtn->sigclicked.connect([this]() { die();});
 
 	button_box->add(
 	   UI::g_fh->fontset()->is_rtl() ? okbtn : cancelbtn, UI::Box::Resizing::kFillSpace);
diff --git a/src/wui/attack_box.cc b/src/wui/attack_box.cc
index 01e34a1ec9..63718a07bc 100644
--- a/src/wui/attack_box.cc
+++ b/src/wui/attack_box.cc
@@ -90,7 +90,7 @@ std::unique_ptr<UI::Button> AttackBox::add_button(UI::Box& parent,
                                                   const std::string& tooltip_text) {
 	std::unique_ptr<UI::Button> button(new UI::Button(
 	   &parent, text, 8, 8, 34, 34, UI::ButtonStyle::kWuiPrimary, text, tooltip_text));
-	button->sigclicked.connect(boost::bind(fn, boost::ref(*this)));
+	button->sigclicked.connect([this, fn]() { (this->*fn)();});
 	parent.add(button.get());
 	return button;
 }
diff --git a/src/wui/building_statistics_menu.cc b/src/wui/building_statistics_menu.cc
index fbd2e5c4b9..f8ed9ecaf5 100644
--- a/src/wui/building_statistics_menu.cc
+++ b/src/wui/building_statistics_menu.cc
@@ -164,25 +164,16 @@ BuildingStatisticsMenu::BuildingStatisticsMenu(InteractivePlayer& parent,
 	   3 * kButtonRowHeight, kButtonHeight, kButtonHeight, UI::ButtonStyle::kWuiMenu,
 	   g_gr->images().get("images/ui_basic/scrollbar_right.png"), _("Show next building"));
 
-	navigation_buttons_[NavigationButton::PrevOwned]->sigclicked.connect(boost::bind(
-	   &BuildingStatisticsMenu::jump_building, boost::ref(*this), JumpTarget::kOwned, true));
-	navigation_buttons_[NavigationButton::NextOwned]->sigclicked.connect(boost::bind(
-	   &BuildingStatisticsMenu::jump_building, boost::ref(*this), JumpTarget::kOwned, false));
-	navigation_buttons_[NavigationButton::PrevConstruction]->sigclicked.connect(boost::bind(
-	   &BuildingStatisticsMenu::jump_building, boost::ref(*this), JumpTarget::kConstruction, true));
-	navigation_buttons_[NavigationButton::NextConstruction]->sigclicked.connect(boost::bind(
-	   &BuildingStatisticsMenu::jump_building, boost::ref(*this), JumpTarget::kConstruction, false));
-	navigation_buttons_[NavigationButton::PrevUnproductive]->sigclicked.connect(boost::bind(
-	   &BuildingStatisticsMenu::jump_building, boost::ref(*this), JumpTarget::kUnproductive, true));
-	navigation_buttons_[NavigationButton::NextUnproductive]->sigclicked.connect(boost::bind(
-	   &BuildingStatisticsMenu::jump_building, boost::ref(*this), JumpTarget::kUnproductive, false));
-
-	unproductive_percent_.changed.connect(
-	   boost::bind(&BuildingStatisticsMenu::low_production_changed, boost::ref(*this)));
-	unproductive_percent_.ok.connect(
-	   boost::bind(&BuildingStatisticsMenu::low_production_reset_focus, boost::ref(*this)));
-	unproductive_percent_.cancel.connect(
-	   boost::bind(&BuildingStatisticsMenu::low_production_reset_focus, boost::ref(*this)));
+	navigation_buttons_[NavigationButton::PrevOwned]->sigclicked.connect([this]() { jump_building(JumpTarget::kOwned, true);});
+	navigation_buttons_[NavigationButton::NextOwned]->sigclicked.connect([this]() { jump_building(JumpTarget::kOwned, false);});
+	navigation_buttons_[NavigationButton::PrevConstruction]->sigclicked.connect([this]() { jump_building(JumpTarget::kConstruction, true);});
+	navigation_buttons_[NavigationButton::NextConstruction]->sigclicked.connect([this]() { jump_building(JumpTarget::kConstruction, false);});
+	navigation_buttons_[NavigationButton::PrevUnproductive]->sigclicked.connect([this]() { jump_building(JumpTarget::kUnproductive, true);});
+	navigation_buttons_[NavigationButton::NextUnproductive]->sigclicked.connect([this]() { jump_building(JumpTarget::kUnproductive, false);});
+
+	unproductive_percent_.changed.connect([this]() { low_production_changed(); });
+	unproductive_percent_.ok.connect([this]() { low_production_reset_focus(); });
+	unproductive_percent_.cancel.connect([this]() { low_production_reset_focus(); });
 
 	init();
 }
@@ -416,8 +407,7 @@ void BuildingStatisticsMenu::add_button(DescriptionIndex id,
 
 	row->add(button_box);
 
-	building_buttons_[id]->sigclicked.connect(
-	   boost::bind(&BuildingStatisticsMenu::set_current_building_type, boost::ref(*this), id));
+	building_buttons_[id]->sigclicked.connect([this, id]() { set_current_building_type(id);});
 }
 
 void BuildingStatisticsMenu::jump_building(JumpTarget target, bool reverse) {
diff --git a/src/wui/buildingwindow.cc b/src/wui/buildingwindow.cc
index a5628f55e7..62ab687fff 100644
--- a/src/wui/buildingwindow.cc
+++ b/src/wui/buildingwindow.cc
@@ -204,8 +204,7 @@ void BuildingWindow::create_capsbuttons(UI::Box* capsbuttons, Widelands::Buildin
 				   capsbuttons, "start_or_cancel_expedition", 0, 0, 34, 34, UI::ButtonStyle::kWuiMenu,
 				   g_gr->images().get("images/wui/buildings/start_expedition.png"));
 				update_expedition_button(!pd->expedition_started());
-				expeditionbtn_->sigclicked.connect(
-				   boost::bind(&BuildingWindow::act_start_or_cancel_expedition, boost::ref(*this)));
+				expeditionbtn_->sigclicked.connect([this]() { act_start_or_cancel_expedition();});
 				capsbuttons->add(expeditionbtn_);
 
 				expedition_canceled_subscriber_ =
@@ -230,8 +229,7 @@ void BuildingWindow::create_capsbuttons(UI::Box* capsbuttons, Widelands::Buildin
 				      _("Continue") :
 				      /** TRANSLATORS: Stop/Continue toggle button for production sites. */
 				      _("Stop"));
-				stopbtn->sigclicked.connect(
-				   boost::bind(&BuildingWindow::act_start_stop, boost::ref(*this)));
+				stopbtn->sigclicked.connect([this]() { act_start_stop();});
 				capsbuttons->add(stopbtn);
 
 				// Add a fixed width separator rather than infinite space so the
@@ -276,8 +274,7 @@ void BuildingWindow::create_capsbuttons(UI::Box* capsbuttons, Widelands::Buildin
 			UI::Button* destroybtn =
 			   new UI::Button(capsbuttons, "destroy", 0, 0, 34, 34, UI::ButtonStyle::kWuiMenu,
 			                  g_gr->images().get(pic_bulldoze), _("Destroy"));
-			destroybtn->sigclicked.connect(
-			   boost::bind(&BuildingWindow::act_bulldoze, boost::ref(*this)));
+			destroybtn->sigclicked.connect([this]() { act_bulldoze(); });
 			capsbuttons->add(destroybtn);
 
 			requires_destruction_separator = true;
@@ -302,8 +299,7 @@ void BuildingWindow::create_capsbuttons(UI::Box* capsbuttons, Widelands::Buildin
 				                        .header_font()
 				                        .as_font_tag(_("Returns:")) +
 				                     "<br>" + waremap_to_richtext(owner.tribe(), wares));
-				dismantlebtn->sigclicked.connect(
-				   boost::bind(&BuildingWindow::act_dismantle, boost::ref(*this)));
+				dismantlebtn->sigclicked.connect([this]() { act_dismantle(); });
 				capsbuttons->add(dismantlebtn);
 				requires_destruction_separator = true;
 			}
@@ -329,8 +325,7 @@ void BuildingWindow::create_capsbuttons(UI::Box* capsbuttons, Widelands::Buildin
 			toggle_workarea_ =
 			   new UI::Button(capsbuttons, "workarea", 0, 0, 34, 34, UI::ButtonStyle::kWuiMenu,
 			                  g_gr->images().get("images/wui/buildings/toggle_workarea.png"));
-			toggle_workarea_->sigclicked.connect(
-			   boost::bind(&BuildingWindow::toggle_workarea, boost::ref(*this)));
+			toggle_workarea_->sigclicked.connect([this]() { toggle_workarea(); });
 
 			capsbuttons->add(toggle_workarea_);
 			configure_workarea_button();
@@ -341,14 +336,14 @@ void BuildingWindow::create_capsbuttons(UI::Box* capsbuttons, Widelands::Buildin
 			UI::Button* debugbtn =
 			   new UI::Button(capsbuttons, "debug", 0, 0, 34, 34, UI::ButtonStyle::kWuiMenu,
 			                  g_gr->images().get(pic_debug), _("Show Debug Window"));
-			debugbtn->sigclicked.connect(boost::bind(&BuildingWindow::act_debug, boost::ref(*this)));
+			debugbtn->sigclicked.connect([this]() { act_debug(); });
 			capsbuttons->add(debugbtn);
 		}
 
 		UI::Button* gotobtn =
 		   new UI::Button(capsbuttons, "goto", 0, 0, 34, 34, UI::ButtonStyle::kWuiMenu,
 		                  g_gr->images().get("images/wui/menus/goto.png"), _("Center view on this"));
-		gotobtn->sigclicked.connect(boost::bind(&BuildingWindow::clicked_goto, boost::ref(*this)));
+		gotobtn->sigclicked.connect([this]() { clicked_goto(); });
 		capsbuttons->add(gotobtn);
 
 		if (!requires_destruction_separator) {
@@ -375,8 +370,7 @@ void BuildingWindow::create_capsbuttons(UI::Box* capsbuttons, Widelands::Buildin
 			}
 		};
 
-		helpbtn->sigclicked.connect(
-		   boost::bind(&UI::UniqueWindow::Registry::toggle, boost::ref(registry)));
+		helpbtn->sigclicked.connect([&registry]() { registry.toggle(); });
 		capsbuttons->add(helpbtn);
 	}
 }
diff --git a/src/wui/constructionsitewindow.cc b/src/wui/constructionsitewindow.cc
index 12400d7589..8199b43dee 100644
--- a/src/wui/constructionsitewindow.cc
+++ b/src/wui/constructionsitewindow.cc
@@ -307,14 +307,10 @@ void ConstructionSiteWindow::init(bool avoid_fastclick, bool workarea_preview_wa
 				   &buttonsbox, "stock_policy_remove", 0, 0, 34, 34, UI::ButtonStyle::kWuiMenu,
 				   g_gr->images().get(pic_stock_policy_button_remove),
 				   _("Remove selected wares from here"));
-				sp_remove.sigclicked.connect(boost::bind(
-				   &ConstructionSiteWindow::change_policy, this, ww, Widelands::StockPolicy::kRemove));
-				sp_dont.sigclicked.connect(boost::bind(&ConstructionSiteWindow::change_policy, this, ww,
-				                                       Widelands::StockPolicy::kDontStock));
-				sp_prefer.sigclicked.connect(boost::bind(
-				   &ConstructionSiteWindow::change_policy, this, ww, Widelands::StockPolicy::kPrefer));
-				sp_normal.sigclicked.connect(boost::bind(
-				   &ConstructionSiteWindow::change_policy, this, ww, Widelands::StockPolicy::kNormal));
+				sp_remove.sigclicked.connect([this, ww]() { change_policy(ww, Widelands::StockPolicy::kRemove);});
+				sp_dont.sigclicked.connect([this, ww]() { change_policy(ww, Widelands::StockPolicy::kDontStock);});
+				sp_prefer.sigclicked.connect([this, ww]() { change_policy(ww, Widelands::StockPolicy::kPrefer);});
+				sp_normal.sigclicked.connect([this, ww]() { change_policy(ww, Widelands::StockPolicy::kNormal);});
 				sp_normal.set_enabled(can_act);
 				sp_dont.set_enabled(can_act);
 				sp_remove.set_enabled(can_act);
diff --git a/src/wui/debugconsole.cc b/src/wui/debugconsole.cc
index f7f445f987..5e0e0d6cde 100644
--- a/src/wui/debugconsole.cc
+++ b/src/wui/debugconsole.cc
@@ -36,9 +36,9 @@ struct Console : public ChatProvider, public Handler {
 	Handler::HandlerFn default_handler;
 
 	Console() {
-		addCommand("help", boost::bind(&Console::cmdHelp, this, _1));
-		addCommand("ls", boost::bind(&Console::cmdLs, this, _1));
-		default_handler = boost::bind(&Console::cmdErr, this, _1);
+		addCommand("help", [this](const std::vector<std::string>& str) { cmdHelp(str);});
+		addCommand("ls", [this](const std::vector<std::string>& str) { cmdLs(str);});
+		default_handler = [this](const std::vector<std::string>& str) { cmdErr(str);};
 	}
 
 	~Console() override {
diff --git a/src/wui/encyclopedia_window.cc b/src/wui/encyclopedia_window.cc
index 1670369266..de8604d798 100644
--- a/src/wui/encyclopedia_window.cc
+++ b/src/wui/encyclopedia_window.cc
@@ -77,8 +77,7 @@ void EncyclopediaWindow::init(InteractiveBase& parent, std::unique_ptr<LuaTable>
 			                new UI::Listselect<EncyclopediaEntry>(boxes_.at(tab_name).get(), 0, 0,
 			                                                      contents_width, contents_height,
 			                                                      UI::PanelStyle::kWui))));
-			lists_.at(tab_name)->selected.connect(
-			   boost::bind(&EncyclopediaWindow::entry_selected, this, tab_name));
+			lists_.at(tab_name)->selected.connect([this, tab_name](unsigned) { entry_selected(tab_name); });
 
 			contents_.insert(std::make_pair(
 			   tab_name, std::unique_ptr<UI::MultilineTextarea>(
diff --git a/src/wui/fieldaction.cc b/src/wui/fieldaction.cc
index 513f141fbf..858235ec15 100644
--- a/src/wui/fieldaction.cc
+++ b/src/wui/fieldaction.cc
@@ -77,9 +77,9 @@ private:
 
 BuildGrid::BuildGrid(UI::Panel* parent, Widelands::Player* plr, int32_t x, int32_t y, int32_t cols)
    : UI::IconGrid(parent, x, y, kBuildGridCellSize, kBuildGridCellSize, cols), plr_(plr) {
-	icon_clicked.connect(boost::bind(&BuildGrid::click_slot, this, _1));
-	mouseout.connect(boost::bind(&BuildGrid::mouseout_slot, this, _1));
-	mousein.connect(boost::bind(&BuildGrid::mousein_slot, this, _1));
+	icon_clicked.connect([this](Widelands::DescriptionIndex i) { click_slot(i);});
+	mouseout.connect([this](Widelands::DescriptionIndex i) { mouseout_slot(i);});
+	mousein.connect([this](Widelands::DescriptionIndex i) { mousein_slot(i);});
 }
 
 /*
@@ -431,7 +431,7 @@ void FieldActionWindow::add_buttons_attack() {
 				a_box.add(attack_box_);
 
 				UI::Button* attack_button = attack_box_->get_attack_button();
-				attack_button->sigclicked.connect(boost::bind(&FieldActionWindow::act_attack, this));
+				attack_button->sigclicked.connect([this]() { act_attack();});
 				set_fastclick_panel(attack_button);
 			}
 		}
@@ -533,12 +533,9 @@ void FieldActionWindow::add_buttons_build(int32_t buildcaps, int32_t max_nodecap
 		// Allocate the tab's grid if necessary
 		if (!*ppgrid) {
 			*ppgrid = new BuildGrid(&tabpanel_, player_, 0, 0, 5);
-			(*ppgrid)->buildclicked.connect(boost::bind(&FieldActionWindow::act_build, this, _1));
-			(*ppgrid)->buildmouseout.connect(
-			   boost::bind(&FieldActionWindow::building_icon_mouse_out, this, _1));
-
-			(*ppgrid)->buildmousein.connect(
-			   boost::bind(&FieldActionWindow::building_icon_mouse_in, this, _1));
+			(*ppgrid)->buildclicked.connect([this](Widelands::DescriptionIndex i) { act_build(i);});
+			(*ppgrid)->buildmouseout.connect([this](Widelands::DescriptionIndex i) { building_icon_mouse_out(i);});
+			(*ppgrid)->buildmousein.connect([this](Widelands::DescriptionIndex i) { building_icon_mouse_in(i);});
 		}
 
 		// Add it to the grid
@@ -622,7 +619,7 @@ UI::Button& FieldActionWindow::add_button(UI::Box* const box,
                                           bool repeating) {
 	UI::Button& button = *new UI::Button(box, name, 0, 0, 34, 34, UI::ButtonStyle::kWuiPrimary,
 	                                     g_gr->images().get(picname), tooltip_text);
-	button.sigclicked.connect(boost::bind(fn, this));
+	button.sigclicked.connect([this, fn]() { (this->*fn)();});
 	button.set_repeating(repeating);
 	box->add(&button);
 
diff --git a/src/wui/game_chat_menu.cc b/src/wui/game_chat_menu.cc
index dea6a65efb..5e6f0795d9 100644
--- a/src/wui/game_chat_menu.cc
+++ b/src/wui/game_chat_menu.cc
@@ -41,8 +41,8 @@ GameChatMenu::GameChatMenu(UI::Panel* parent,
 	}
 	set_can_focus(true);
 
-	chat_.sent.connect(boost::bind(&GameChatMenu::acknowledge, this));
-	chat_.aborted.connect(boost::bind(&GameChatMenu::acknowledge, this));
+	chat_.sent.connect([this]() { acknowledge();});
+	chat_.aborted.connect([this]() { acknowledge();});
 
 	enter_chat_message(close_on_send_);
 }
diff --git a/src/wui/game_chat_panel.cc b/src/wui/game_chat_panel.cc
index 0dcf900814..1bf10bcc2a 100644
--- a/src/wui/game_chat_panel.cc
+++ b/src/wui/game_chat_panel.cc
@@ -49,8 +49,8 @@ GameChatPanel::GameChatPanel(UI::Panel* parent,
      chat_message_counter(0),
      chat_sound(SoundHandler::register_fx(SoundType::kChat, "sound/lobby_chat")) {
 
-	editbox.ok.connect(boost::bind(&GameChatPanel::key_enter, this));
-	editbox.cancel.connect(boost::bind(&GameChatPanel::key_escape, this));
+	editbox.ok.connect([this]() { key_enter(); });
+	editbox.cancel.connect([this]() { key_escape(); });
 	editbox.activate_history(true);
 
 	set_handle_mouse(true);
diff --git a/src/wui/game_client_disconnected.cc b/src/wui/game_client_disconnected.cc
index 58174a2029..4e9b1afeb4 100644
--- a/src/wui/game_client_disconnected.cc
+++ b/src/wui/game_client_disconnected.cc
@@ -103,10 +103,8 @@ GameClientDisconnected::GameClientDisconnected(InteractiveGameBase* gb,
 	box_.set_size(width, text_.get_h() + vgap + box_h_.get_h() + exit_game_.get_h() + 3 * vspacing);
 	set_inner_size(get_inner_w(), box_.get_h() + 2 * margin);
 
-	continue_.sigclicked.connect(
-	   boost::bind(&GameClientDisconnected::clicked_continue, boost::ref(*this)));
-	exit_game_.sigclicked.connect(
-	   boost::bind(&GameClientDisconnected::clicked_exit_game, boost::ref(*this)));
+	continue_.sigclicked.connect([this]() { clicked_continue(); });
+	exit_game_.sigclicked.connect([this]() { clicked_exit_game(); });
 
 	// Add all AI types
 	for (const auto* impl : ComputerPlayer::get_implementations()) {
@@ -154,8 +152,7 @@ void GameClientDisconnected::clicked_exit_game() {
 		igb_->end_modal<UI::Panel::Returncodes>(UI::Panel::Returncodes::kBack);
 	} else {
 		GameExitConfirmBox* gecb = new GameExitConfirmBox(*get_parent(), *igb_);
-		gecb->cancel.connect(
-		   boost::bind(&GameClientDisconnected::exit_game_aborted, boost::ref(*this), gecb));
+		gecb->cancel.connect([this, gecb]() { exit_game_aborted(gecb);});
 
 		set_visible(false);
 	}
diff --git a/src/wui/game_debug_ui.cc b/src/wui/game_debug_ui.cc
index 618aa5fd60..1fa28dcc7a 100644
--- a/src/wui/game_debug_ui.cc
+++ b/src/wui/game_debug_ui.cc
@@ -199,7 +199,7 @@ FieldDebugWindow::FieldDebugWindow(InteractiveBase& parent, Widelands::Coords co
      ui_immovable_(this, "immovable", 0, 280, 300, 24, UI::ButtonStyle::kWuiMenu, ""),
 
      ui_bobs_(this, 0, 304, 300, 96, UI::PanelStyle::kWui) {
-	ui_immovable_.sigclicked.connect(boost::bind(&FieldDebugWindow::open_immovable, this));
+	ui_immovable_.sigclicked.connect([this]() { open_immovable();});
 
 	assert(0 <= coords_.x);
 	assert(coords_.x < map_.get_width());
@@ -207,7 +207,7 @@ FieldDebugWindow::FieldDebugWindow(InteractiveBase& parent, Widelands::Coords co
 	assert(coords_.y < map_.get_height());
 	assert(&map_[0] <= coords_.field);
 	assert(coords_.field < &map_[0] + map_.max_index());
-	ui_bobs_.selected.connect(boost::bind(&FieldDebugWindow::open_bob, this, _1));
+	ui_bobs_.selected.connect([this](uint32_t a) { open_bob(a);});
 }
 
 /*
diff --git a/src/wui/game_main_menu_save_game.cc b/src/wui/game_main_menu_save_game.cc
index acc119c515..856d41b16e 100644
--- a/src/wui/game_main_menu_save_game.cc
+++ b/src/wui/game_main_menu_save_game.cc
@@ -99,17 +99,16 @@ GameMainMenuSaveGame::GameMainMenuSaveGame(InteractiveGameBase& parent,
 
 	ok_.set_enabled(false);
 
-	filename_editbox_.changed.connect(boost::bind(&GameMainMenuSaveGame::edit_box_changed, this));
-	filename_editbox_.ok.connect(boost::bind(&GameMainMenuSaveGame::ok, this));
-	filename_editbox_.cancel.connect(boost::bind(&GameMainMenuSaveGame::reset_editbox_or_die, this,
-	                                             parent.game().save_handler().get_cur_filename()));
+	filename_editbox_.changed.connect([this]() { edit_box_changed();});
+	filename_editbox_.ok.connect([this]() { ok();});
+	filename_editbox_.cancel.connect([this, &parent]() { reset_editbox_or_die(parent.game().save_handler().get_cur_filename());});
 
-	ok_.sigclicked.connect(boost::bind(&GameMainMenuSaveGame::ok, this));
-	cancel_.sigclicked.connect(boost::bind(&GameMainMenuSaveGame::die, this));
+	ok_.sigclicked.connect([this]() { ok();});
+	cancel_.sigclicked.connect([this]() { die();});
 
-	load_or_save_.table().selected.connect(boost::bind(&GameMainMenuSaveGame::entry_selected, this));
-	load_or_save_.table().double_clicked.connect(boost::bind(&GameMainMenuSaveGame::ok, this));
-	load_or_save_.table().cancel.connect(boost::bind(&GameMainMenuSaveGame::die, this));
+	load_or_save_.table().selected.connect([this](unsigned) { entry_selected(); });
+	load_or_save_.table().double_clicked.connect([this](unsigned) { ok(); });
+	load_or_save_.table().cancel.connect([this]() { die(); });
 
 	load_or_save_.fill_table();
 	load_or_save_.select_by_name(parent.game().save_handler().get_cur_filename());
diff --git a/src/wui/game_message_menu.cc b/src/wui/game_message_menu.cc
index 4ccdd2e8f9..67ef8351c3 100644
--- a/src/wui/game_message_menu.cc
+++ b/src/wui/game_message_menu.cc
@@ -61,8 +61,8 @@ GameMessageMenu::GameMessageMenu(InteractivePlayer& plr, UI::UniqueWindow::Regis
 	list = new UI::Table<uintptr_t>(this, kPadding, kButtonSize + 2 * kPadding,
 	                                kWindowWidth - 2 * kPadding, kTableHeight, UI::PanelStyle::kWui,
 	                                UI::TableRows::kMulti);
-	list->selected.connect(boost::bind(&GameMessageMenu::selected, this, _1));
-	list->double_clicked.connect(boost::bind(&GameMessageMenu::double_clicked, this, _1));
+	list->selected.connect([this](uint32_t a) { selected(a);});
+	list->double_clicked.connect([this](uint32_t a) { double_clicked(a);});
 	list->add_column(kWindowWidth - 2 * kPadding - 60 - 60 - 75, _("Title"));
 	list->add_column(60, pgettext("message", "Type"), "", UI::Align::kCenter);
 	list->add_column(60, _("Status"), "", UI::Align::kCenter);
@@ -77,33 +77,28 @@ GameMessageMenu::GameMessageMenu(InteractivePlayer& plr, UI::UniqueWindow::Regis
 	geologistsbtn_ = new UI::Button(this, "filter_geologists_messages", kPadding, kPadding,
 	                                kButtonSize, kButtonSize, UI::ButtonStyle::kWuiSecondary,
 	                                g_gr->images().get("images/wui/fieldaction/menu_geologist.png"));
-	geologistsbtn_->sigclicked.connect(
-	   boost::bind(&GameMessageMenu::filter_messages, this, Widelands::Message::Type::kGeologists));
+	geologistsbtn_->sigclicked.connect([this]() { filter_messages(Widelands::Message::Type::kGeologists);});
 
 	economybtn_ = new UI::Button(this, "filter_economy_messages", 2 * kPadding + kButtonSize,
 	                             kPadding, kButtonSize, kButtonSize, UI::ButtonStyle::kWuiSecondary,
 	                             g_gr->images().get("images/wui/stats/genstats_nrwares.png"));
-	economybtn_->sigclicked.connect(
-	   boost::bind(&GameMessageMenu::filter_messages, this, Widelands::Message::Type::kEconomy));
+	economybtn_->sigclicked.connect([this]() { filter_messages(Widelands::Message::Type::kEconomy);});
 
 	seafaringbtn_ =
 	   new UI::Button(this, "filter_seafaring_messages", 3 * kPadding + 2 * kButtonSize, kPadding,
 	                  kButtonSize, kButtonSize, UI::ButtonStyle::kWuiSecondary,
 	                  g_gr->images().get("images/wui/buildings/start_expedition.png"));
-	seafaringbtn_->sigclicked.connect(
-	   boost::bind(&GameMessageMenu::filter_messages, this, Widelands::Message::Type::kSeafaring));
+	seafaringbtn_->sigclicked.connect([this]() { filter_messages(Widelands::Message::Type::kSeafaring);});
 
 	warfarebtn_ = new UI::Button(this, "filter_warfare_messages", 4 * kPadding + 3 * kButtonSize,
 	                             kPadding, kButtonSize, kButtonSize, UI::ButtonStyle::kWuiSecondary,
 	                             g_gr->images().get("images/wui/messages/messages_warfare.png"));
-	warfarebtn_->sigclicked.connect(
-	   boost::bind(&GameMessageMenu::filter_messages, this, Widelands::Message::Type::kWarfare));
+	warfarebtn_->sigclicked.connect([this]() { filter_messages(Widelands::Message::Type::kWarfare);});
 
 	scenariobtn_ = new UI::Button(this, "filter_scenario_messages", 5 * kPadding + 4 * kButtonSize,
 	                              kPadding, kButtonSize, kButtonSize, UI::ButtonStyle::kWuiSecondary,
 	                              g_gr->images().get("images/wui/menus/objectives.png"));
-	scenariobtn_->sigclicked.connect(
-	   boost::bind(&GameMessageMenu::filter_messages, this, Widelands::Message::Type::kScenario));
+	scenariobtn_->sigclicked.connect([this]() { filter_messages(Widelands::Message::Type::kScenario);});
 
 	message_filter_ = Widelands::Message::Type::kAllMessages;
 	set_filter_messages_tooltips();
@@ -114,14 +109,14 @@ GameMessageMenu::GameMessageMenu(InteractivePlayer& plr, UI::UniqueWindow::Regis
 	                             UI::ButtonStyle::kWuiPrimary,
 	                             g_gr->images().get("images/wui/messages/message_archive.png"));
 	update_archive_button_tooltip();
-	archivebtn_->sigclicked.connect(boost::bind(&GameMessageMenu::archive_or_restore, this));
+	archivebtn_->sigclicked.connect([this]() { archive_or_restore();});
 
 	togglemodebtn_ = new UI::Button(
 	   this, "toggle_between_inbox_or_archive",
 	   archivebtn_->get_x() + archivebtn_->get_w() + kPadding, archivebtn_->get_y(), kButtonSize,
 	   kButtonSize, UI::ButtonStyle::kWuiPrimary,
 	   g_gr->images().get("images/wui/messages/message_archived.png"), _("Show Archive"));
-	togglemodebtn_->sigclicked.connect(boost::bind(&GameMessageMenu::toggle_mode, this));
+	togglemodebtn_->sigclicked.connect([this]() { toggle_mode();});
 
 	centerviewbtn_ =
 	   new UI::Button(this, "center_main_mapview_on_location", kWindowWidth - kPadding - kButtonSize,
@@ -130,17 +125,16 @@ GameMessageMenu::GameMessageMenu(InteractivePlayer& plr, UI::UniqueWindow::Regis
 	                  as_tooltip_text_with_hotkey(
 	                     /** TRANSLATORS: Tooltip in the messages window */
 	                     _("Center main mapview on location"), "g"));
-	centerviewbtn_->sigclicked.connect(boost::bind(&GameMessageMenu::center_view, this));
+	centerviewbtn_->sigclicked.connect([this]() { center_view();});
 	centerviewbtn_->set_enabled(false);
 
 	if (get_usedefaultpos())
 		center_to_parent();
 
-	list->set_column_compare(ColTitle, boost::bind(&GameMessageMenu::compare_title, this, _1, _2));
-	list->set_column_compare(ColStatus, boost::bind(&GameMessageMenu::compare_status, this, _1, _2));
-	list->set_column_compare(ColType, boost::bind(&GameMessageMenu::compare_type, this, _1, _2));
-	list->set_column_compare(
-	   ColTimeSent, boost::bind(&GameMessageMenu::compare_time_sent, this, _1, _2));
+	list->set_column_compare(ColTitle, [this](uint32_t a, uint32_t b) { return compare_title(a, b);});
+	list->set_column_compare(ColStatus, [this](uint32_t a, uint32_t b) { return compare_status(a, b);});
+	list->set_column_compare(ColType, [this](uint32_t a, uint32_t b) { return compare_type(a, b);});
+	list->set_column_compare(ColTimeSent, [this](uint32_t a, uint32_t b) { return compare_time_sent(a, b);});
 
 	list->set_sort_column(ColTimeSent);
 	list->layout();
diff --git a/src/wui/game_objectives_menu.cc b/src/wui/game_objectives_menu.cc
index 341a910c2f..9c050eb179 100644
--- a/src/wui/game_objectives_menu.cc
+++ b/src/wui/game_objectives_menu.cc
@@ -50,9 +50,10 @@ GameObjectivesMenu::GameObjectivesMenu(UI::Panel* parent, UI::UniqueWindow::Regi
                    "",
                    UI::Align::kLeft,
                    UI::MultilineTextarea::ScrollMode::kScrollNormalForced) {
-	list.selected.connect(boost::bind(&GameObjectivesMenu::selected, this, _1));
-	if (get_usedefaultpos())
+	list.selected.connect([this](uint32_t a) { selected(a);});
+	if (get_usedefaultpos()) {
 		center_to_parent();
+	}
 }
 
 void GameObjectivesMenu::think() {
diff --git a/src/wui/game_summary.cc b/src/wui/game_summary.cc
index de20fa2384..59f0724fe1 100644
--- a/src/wui/game_summary.cc
+++ b/src/wui/game_summary.cc
@@ -105,9 +105,9 @@ GameSummaryScreen::GameSummaryScreen(InteractiveGameBase* parent, UI::UniqueWind
 	players_table_->add_column(100, _("Time"), "", UI::Align::kCenter);
 
 	// Connections
-	continue_button_->sigclicked.connect(boost::bind(&GameSummaryScreen::continue_clicked, this));
-	stop_button_->sigclicked.connect(boost::bind(&GameSummaryScreen::stop_clicked, this));
-	players_table_->selected.connect(boost::bind(&GameSummaryScreen::player_selected, this, _1));
+	continue_button_->sigclicked.connect([this]() { continue_clicked();});
+	stop_button_->sigclicked.connect([this]() { stop_clicked();});
+	players_table_->selected.connect([this](uint32_t i) { player_selected(i);});
 
 	// Window
 	center_to_parent();
diff --git a/src/wui/general_statistics_menu.cc b/src/wui/general_statistics_menu.cc
index f321a8ac24..1d40938d59 100644
--- a/src/wui/general_statistics_menu.cc
+++ b/src/wui/general_statistics_menu.cc
@@ -114,7 +114,7 @@ GeneralStatisticsMenu::GeneralStatisticsMenu(InteractiveGameBase& parent,
 		UI::Button& cb =
 		   *new UI::Button(hbox1, "playerbutton", 0, 0, 25, 25, UI::ButtonStyle::kWuiMenu,
 		                   player_image, player->get_name().c_str());
-		cb.sigclicked.connect(boost::bind(&GeneralStatisticsMenu::cb_changed_to, this, p));
+		cb.sigclicked.connect([this, p]() { cb_changed_to(p);});
 		cb.set_perm_pressed(my_registry_->selected_players[p - 1]);
 
 		cbs_[p - 1] = &cb;
@@ -190,12 +190,12 @@ GeneralStatisticsMenu::GeneralStatisticsMenu(InteractiveGameBase& parent,
 	}
 
 	radiogroup_.set_state(selected_information_);
-	radiogroup_.changedto.connect(boost::bind(&GeneralStatisticsMenu::radiogroup_changed, this, _1));
+	radiogroup_.changedto.connect([this](int32_t i) { radiogroup_changed(i);});
 
 	box_.add(hbox2, UI::Box::Resizing::kFullSize);
 
 	WuiPlotAreaSlider* slider = new WuiPlotAreaSlider(&box_, plot_, 0, 0, 100, 45);
-	slider->changedto.connect(boost::bind(&WuiPlotArea::set_time_id, &plot_, _1));
+	slider->changedto.connect([this](int32_t i) { plot_.set_time_id(i);});
 	box_.add(slider, UI::Box::Resizing::kFullSize);
 }
 
diff --git a/src/wui/inputqueuedisplay.cc b/src/wui/inputqueuedisplay.cc
index e8f5a1fae9..7b877d538b 100644
--- a/src/wui/inputqueuedisplay.cc
+++ b/src/wui/inputqueuedisplay.cc
@@ -306,9 +306,8 @@ void InputQueueDisplay::update_priority_buttons() {
 		NEVER_HERE();
 	}
 
-	priority_radiogroup_->changedto.connect(
-	   boost::bind(&InputQueueDisplay::radiogroup_changed, this, _1));
-	priority_radiogroup_->clicked.connect(boost::bind(&InputQueueDisplay::radiogroup_clicked, this));
+	priority_radiogroup_->changedto.connect([this](int32_t i) { radiogroup_changed(i);});
+	priority_radiogroup_->clicked.connect([this]() { radiogroup_clicked();});
 
 	bool const can_act = igb_.can_act(building_.owner().player_number());
 	if (!can_act)
@@ -353,8 +352,7 @@ void InputQueueDisplay::update_max_fill_buttons() {
 	            explanation */
 	         _("Hold down Ctrl to allow none of this ware"), UI::FontStyle::kTooltip))
 	      .str());
-	decrease_max_fill_->sigclicked.connect(
-	   boost::bind(&InputQueueDisplay::decrease_max_fill_clicked, boost::ref(*this)));
+	decrease_max_fill_->sigclicked.connect([this]() { decrease_max_fill_clicked(); });
 
 	x = Border + (cache_size_ + 1) * (CellWidth + CellSpacing);
 
@@ -381,8 +379,7 @@ void InputQueueDisplay::update_max_fill_buttons() {
 	            explanation */
 	         _("Hold down Ctrl to allow all of this ware"), UI::FontStyle::kTooltip))
 	      .str());
-	increase_max_fill_->sigclicked.connect(
-	   boost::bind(&InputQueueDisplay::increase_max_fill_clicked, boost::ref(*this)));
+	increase_max_fill_->sigclicked.connect([this]() { increase_max_fill_clicked(); });
 
 	increase_max_fill_->set_repeating(true);
 	decrease_max_fill_->set_repeating(true);
diff --git a/src/wui/interactive_base.cc b/src/wui/interactive_base.cc
index 2cece0930b..01d3d4780c 100644
--- a/src/wui/interactive_base.cc
+++ b/src/wui/interactive_base.cc
@@ -255,8 +255,8 @@ InteractiveBase::InteractiveBase(EditorGameBase& the_egbase, Section& global_s)
 	//  funny results.
 	unset_sel_picture();
 
-	setDefaultCommand(boost::bind(&InteractiveBase::cmd_lua, this, _1));
-	addCommand("mapobject", boost::bind(&InteractiveBase::cmd_map_object, this, _1));
+	setDefaultCommand([this](const std::vector<std::string>& str) { cmd_lua(str);});
+	addCommand("mapobject", [this](const std::vector<std::string>& str) { cmd_map_object(str);});
 }
 
 InteractiveBase::~InteractiveBase() {
@@ -439,8 +439,7 @@ UI::Button* InteractiveBase::add_toolbar_button(const std::string& image_basenam
 		window->closed.connect([button] { button->set_perm_pressed(false); });
 
 		if (bind_default_toggle) {
-			button->sigclicked.connect(
-			   boost::bind(&UI::UniqueWindow::Registry::toggle, boost::ref(*window)));
+			button->sigclicked.connect([window]() { window->toggle(); });
 		}
 	}
 	return button;
diff --git a/src/wui/interactive_player.cc b/src/wui/interactive_player.cc
index b5e16f2e21..0a17c16222 100644
--- a/src/wui/interactive_player.cc
+++ b/src/wui/interactive_player.cc
@@ -205,7 +205,7 @@ InteractivePlayer::InteractivePlayer(Widelands::Game& g,
 	finalize_toolbar();
 
 #ifndef NDEBUG  //  only in debug builds
-	addCommand("switchplayer", boost::bind(&InteractivePlayer::cmdSwitchPlayer, this, _1));
+	addCommand("switchplayer", [this](const std::vector<std::string>& str) { cmdSwitchPlayer(str);});
 #endif
 
 	map_options_subscriber_ = Notifications::subscribe<NoteMapOptions>(
diff --git a/src/wui/load_or_save_game.cc b/src/wui/load_or_save_game.cc
index 5f62240786..2745568fa6 100644
--- a/src/wui/load_or_save_game.cc
+++ b/src/wui/load_or_save_game.cc
@@ -74,10 +74,10 @@ LoadOrSaveGame::LoadOrSaveGame(UI::Panel* parent,
 		break;
 	}
 
-	table_->set_column_compare(0, boost::bind(&LoadOrSaveGame::compare_save_time, this, _1, _2));
+	table_->set_column_compare(0, [this](uint32_t a, uint32_t b) { return compare_save_time(a, b);});
 
 	table_->set_column_compare(table_->number_of_columns() - 1,
-	                           boost::bind(&LoadOrSaveGame::compare_map_name, this, _1, _2));
+	                           [this](uint32_t a, uint32_t b) { return compare_map_name(a, b);});
 
 	table_box_->add(table_, UI::Box::Resizing::kExpandBoth);
 	game_details_.button_box()->add(delete_, UI::Box::Resizing::kAlign, UI::Align::kLeft);
diff --git a/src/wui/login_box.cc b/src/wui/login_box.cc
index a4f5424ace..f515d0bbf8 100644
--- a/src/wui/login_box.cc
+++ b/src/wui/login_box.cc
@@ -63,10 +63,10 @@ LoginBox::LoginBox(Panel& parent)
 	                                     (get_inner_w() / 2 - 200) / 2,
 	                  loginbtn->get_y(), 200, 20, UI::ButtonStyle::kWuiSecondary, _("Cancel"));
 
-	loginbtn->sigclicked.connect(boost::bind(&LoginBox::clicked_ok, boost::ref(*this)));
-	cancelbtn->sigclicked.connect(boost::bind(&LoginBox::clicked_back, boost::ref(*this)));
-	eb_nickname->changed.connect(boost::bind(&LoginBox::change_playername, this));
-	cb_register->clickedto.connect(boost::bind(&LoginBox::clicked_register, this));
+	loginbtn->sigclicked.connect([this]() { clicked_ok();});
+	cancelbtn->sigclicked.connect([this]() { clicked_back();});
+	eb_nickname->changed.connect([this]() { change_playername();});
+	cb_register->clickedto.connect([this](bool) { clicked_register();});
 
 	eb_nickname->set_text(get_config_string("nickname", _("nobody")));
 	cb_register->set_state(get_config_bool("registered", false));
@@ -82,8 +82,8 @@ LoginBox::LoginBox(Panel& parent)
 
 	eb_nickname->focus();
 
-	eb_nickname->cancel.connect(boost::bind(&LoginBox::clicked_back, boost::ref(*this)));
-	eb_password->cancel.connect(boost::bind(&LoginBox::clicked_back, boost::ref(*this)));
+	eb_nickname->cancel.connect([this]() { clicked_back();});
+	eb_password->cancel.connect([this]() { clicked_back();});
 }
 
 /// think function of the UI (main loop)
diff --git a/src/wui/minimap.cc b/src/wui/minimap.cc
index 6bf2de423e..2841271697 100644
--- a/src/wui/minimap.cc
+++ b/src/wui/minimap.cc
@@ -186,18 +186,12 @@ MiniMap::MiniMap(InteractiveBase& ibase, Registry* const registry)
                  _("Zoom"),
                  UI::Button::VisualState::kRaised,
                  UI::Button::ImageMode::kUnscaled) {
-	button_terrn.sigclicked.connect(
-	   boost::bind(&MiniMap::toggle, boost::ref(*this), MiniMapLayer::Terrain));
-	button_owner.sigclicked.connect(
-	   boost::bind(&MiniMap::toggle, boost::ref(*this), MiniMapLayer::Owner));
-	button_flags.sigclicked.connect(
-	   boost::bind(&MiniMap::toggle, boost::ref(*this), MiniMapLayer::Flag));
-	button_roads.sigclicked.connect(
-	   boost::bind(&MiniMap::toggle, boost::ref(*this), MiniMapLayer::Road));
-	button_bldns.sigclicked.connect(
-	   boost::bind(&MiniMap::toggle, boost::ref(*this), MiniMapLayer::Building));
-	button_zoom.sigclicked.connect(
-	   boost::bind(&MiniMap::toggle, boost::ref(*this), MiniMapLayer::Zoom2));
+	button_terrn.sigclicked.connect([this]() { toggle(MiniMapLayer::Terrain); });
+	button_owner.sigclicked.connect([this]() { toggle(MiniMapLayer::Owner); });
+	button_flags.sigclicked.connect([this]() { toggle(MiniMapLayer::Flag); });
+	button_roads.sigclicked.connect([this]() { toggle(MiniMapLayer::Road); });
+	button_bldns.sigclicked.connect([this]() { toggle(MiniMapLayer::Building); });
+	button_zoom.sigclicked.connect([this]() { toggle(MiniMapLayer::Zoom2); });
 
 	check_boundaries();
 
diff --git a/src/wui/multiplayersetupgroup.cc b/src/wui/multiplayersetupgroup.cc
index 25faca2faa..cc435d96cd 100644
--- a/src/wui/multiplayersetupgroup.cc
+++ b/src/wui/multiplayersetupgroup.cc
@@ -74,8 +74,7 @@ struct MultiPlayerClientGroup : public UI::Box {
 		add(&name, UI::Box::Resizing::kAlign, UI::Align::kCenter);
 
 		slot_dropdown_.set_disable_style(UI::ButtonDisableStyle::kFlat);
-		slot_dropdown_.selected.connect(
-		   boost::bind(&MultiPlayerClientGroup::set_slot, boost::ref(*this)));
+		slot_dropdown_.selected.connect([this]() { set_slot();});
 
 		update();
 		layout();
@@ -252,14 +251,10 @@ struct MultiPlayerPlayerGroup : public UI::Box {
 		init_dropdown_.set_disable_style(UI::ButtonDisableStyle::kFlat);
 		team_dropdown_.set_disable_style(UI::ButtonDisableStyle::kFlat);
 
-		type_dropdown_.selected.connect(
-		   boost::bind(&MultiPlayerPlayerGroup::set_type, boost::ref(*this)));
-		tribes_dropdown_.selected.connect(
-		   boost::bind(&MultiPlayerPlayerGroup::set_tribe_or_shared_in, boost::ref(*this)));
-		init_dropdown_.selected.connect(
-		   boost::bind(&MultiPlayerPlayerGroup::set_init, boost::ref(*this)));
-		team_dropdown_.selected.connect(
-		   boost::bind(&MultiPlayerPlayerGroup::set_team, boost::ref(*this)));
+		type_dropdown_.selected.connect([this]() { set_type(); });
+		tribes_dropdown_.selected.connect([this]() { set_tribe_or_shared_in(); });
+		init_dropdown_.selected.connect([this]() { set_init(); });
+		team_dropdown_.selected.connect([this]() { set_team(); });
 
 		add_space(0);
 		add(&player);
diff --git a/src/wui/playerdescrgroup.cc b/src/wui/playerdescrgroup.cc
index 11411eaa42..079a223e24 100644
--- a/src/wui/playerdescrgroup.cc
+++ b/src/wui/playerdescrgroup.cc
@@ -63,22 +63,18 @@ PlayerDescriptionGroup::PlayerDescriptionGroup(UI::Panel* const parent,
 	int32_t xplayerinit = w * 55 / 125;
 	d->plr_name = new UI::Textarea(this, xplrname, 0, xplayertype - xplrname, h);
 	d->btnEnablePlayer = new UI::Checkbox(this, Vector2i(xplayertype - 23, 0), "");
-	d->btnEnablePlayer->changedto.connect(
-	   boost::bind(&PlayerDescriptionGroup::enable_player, this, _1));
+	d->btnEnablePlayer->changedto.connect([this](bool b) { enable_player(b);});
 	d->btnPlayerType =
 	   new UI::Button(this, "player_type", xplayertype, 0, xplayertribe - xplayertype - 2, h / 2,
 	                  UI::ButtonStyle::kFsMenuSecondary, "");
-	d->btnPlayerType->sigclicked.connect(
-	   boost::bind(&PlayerDescriptionGroup::toggle_playertype, boost::ref(*this)));
+	d->btnPlayerType->sigclicked.connect([this]() { toggle_playertype(); });
 	d->btnPlayerTeam =
 	   new UI::Button(this, "player_team", xplayerteam, h / 2, xplayerinit - xplayerteam - 2, h / 2,
 	                  UI::ButtonStyle::kFsMenuSecondary, "");
-	d->btnPlayerTeam->sigclicked.connect(
-	   boost::bind(&PlayerDescriptionGroup::toggle_playerteam, boost::ref(*this)));
+	d->btnPlayerTeam->sigclicked.connect([this]() { toggle_playerteam(); });
 	d->btnPlayerTribe = new UI::Button(this, "player_tribe", xplayertribe, 0, w - xplayertribe,
 	                                   h / 2, UI::ButtonStyle::kFsMenuSecondary, "");
-	d->btnPlayerTribe->sigclicked.connect(
-	   boost::bind(&PlayerDescriptionGroup::toggle_playertribe, boost::ref(*this)));
+	d->btnPlayerTribe->sigclicked.connect([this]() { toggle_playertribe(); });
 	d->btnPlayerInit = new UI::Dropdown<uint8_t>(
 	   this, "player_initialization", xplayerinit, h / 2, w - xplayerinit, 6, h / 2, "",
 	   UI::DropdownType::kTextual, UI::PanelStyle::kFsMenu, UI::ButtonStyle::kFsMenuSecondary);
diff --git a/src/wui/portdockwaresdisplay.cc b/src/wui/portdockwaresdisplay.cc
index b079e66d61..bde8388d35 100644
--- a/src/wui/portdockwaresdisplay.cc
+++ b/src/wui/portdockwaresdisplay.cc
@@ -105,7 +105,7 @@ public:
 				   w.descname(), std::make_pair(Widelands::wwWORKER, i), w.icon(), false, w.descname());
 			}
 			d.set_enabled(can_act);
-			d.selected.connect(boost::bind(&PortDockAdditionalItemsDisplay::select, this, c));
+			d.selected.connect([this, c]() { select(c);});
 
 			UI::Icon* icon = new UI::Icon(box, g_gr->images().get(kNoWare));
 			icon->set_handle_mouse(true);
diff --git a/src/wui/productionsitewindow.cc b/src/wui/productionsitewindow.cc
index b4347b8b2d..d60f210e72 100644
--- a/src/wui/productionsitewindow.cc
+++ b/src/wui/productionsitewindow.cc
@@ -117,8 +117,7 @@ void ProductionSiteWindow::init(bool avoid_fastclick, bool workarea_preview_want
 			   new UI::Button(worker_caps_, "evict", 0, 0, 34, 34, UI::ButtonStyle::kWuiMenu,
 			                  g_gr->images().get("images/wui/buildings/menu_drop_soldier.png"),
 			                  _("Terminate the employment of the selected worker"));
-			evict_button->sigclicked.connect(
-			   boost::bind(&ProductionSiteWindow::evict_worker, boost::ref(*this)));
+			evict_button->sigclicked.connect([this]() { evict_worker(); });
 			worker_caps_->add(evict_button);
 		}
 
diff --git a/src/wui/seafaring_statistics_menu.cc b/src/wui/seafaring_statistics_menu.cc
index a224fa3cf0..6298dbc221 100644
--- a/src/wui/seafaring_statistics_menu.cc
+++ b/src/wui/seafaring_statistics_menu.cc
@@ -153,25 +153,22 @@ SeafaringStatisticsMenu::SeafaringStatisticsMenu(InteractivePlayer& plr,
 
 	// Configure actions
 	idle_btn_.sigclicked.connect(
-	   boost::bind(&SeafaringStatisticsMenu::filter_ships, this, ShipFilterStatus::kIdle));
+	   [this]() { filter_ships(ShipFilterStatus::kIdle);});
 	shipping_btn_.sigclicked.connect(
-	   boost::bind(&SeafaringStatisticsMenu::filter_ships, this, ShipFilterStatus::kShipping));
-	waiting_btn_.sigclicked.connect(boost::bind(
-	   &SeafaringStatisticsMenu::filter_ships, this, ShipFilterStatus::kExpeditionWaiting));
-	scouting_btn_.sigclicked.connect(boost::bind(
-	   &SeafaringStatisticsMenu::filter_ships, this, ShipFilterStatus::kExpeditionScouting));
-	portspace_btn_.sigclicked.connect(boost::bind(
-	   &SeafaringStatisticsMenu::filter_ships, this, ShipFilterStatus::kExpeditionPortspaceFound));
+	   [this]() { filter_ships(ShipFilterStatus::kShipping);});
+	waiting_btn_.sigclicked.connect([this]() { filter_ships(ShipFilterStatus::kExpeditionWaiting);});
+	scouting_btn_.sigclicked.connect([this]() { filter_ships(ShipFilterStatus::kExpeditionScouting);});
+	portspace_btn_.sigclicked.connect([this]() { filter_ships(ShipFilterStatus::kExpeditionPortspaceFound);});
 	ship_filter_ = ShipFilterStatus::kAll;
 	set_filter_ships_tooltips();
 
-	watchbtn_.sigclicked.connect(boost::bind(&SeafaringStatisticsMenu::watch_ship, this));
-	openwindowbtn_.sigclicked.connect(boost::bind(&SeafaringStatisticsMenu::open_ship_window, this));
-	centerviewbtn_.sigclicked.connect(boost::bind(&SeafaringStatisticsMenu::center_view, this));
+	watchbtn_.sigclicked.connect([this]() { watch_ship(); });
+	openwindowbtn_.sigclicked.connect([this]() { open_ship_window(); });
+	centerviewbtn_.sigclicked.connect([this]() { center_view(); });
 
 	// Configure table
-	table_.selected.connect(boost::bind(&SeafaringStatisticsMenu::selected, this));
-	table_.double_clicked.connect(boost::bind(&SeafaringStatisticsMenu::double_clicked, this));
+	table_.selected.connect([this](unsigned) { selected(); });
+	table_.double_clicked.connect([this](unsigned) { double_clicked(); });
 	table_.add_column(
 	   0, pgettext("ship", "Name"), "", UI::Align::kLeft, UI::TableColumnType::kFlexible);
 	table_.add_column(230, pgettext("ship", "Status"));
diff --git a/src/wui/shipwindow.cc b/src/wui/shipwindow.cc
index 7321e9673b..0a1b74e88f 100644
--- a/src/wui/shipwindow.cc
+++ b/src/wui/shipwindow.cc
@@ -77,46 +77,45 @@ ShipWindow::ShipWindow(InteractiveGameBase& igb, UniqueWindow::Registry& reg, Sh
 
 	btn_scout_[WALK_NW - 1] =
 	   make_button(exp_top, "scnw", _("Scout towards the north west"), pic_scout_nw,
-	               boost::bind(&ShipWindow::act_scout_towards, this, WALK_NW));
+	               [this]() { act_scout_towards(WALK_NW);});
 	exp_top->add(btn_scout_[WALK_NW - 1]);
 
 	btn_explore_island_cw_ = make_button(
 	   exp_top, "expcw", _("Explore the island’s coast clockwise"), pic_explore_cw,
-	   boost::bind(&ShipWindow::act_explore_island, this, IslandExploreDirection::kClockwise));
+	   [this]() { act_explore_island(IslandExploreDirection::kClockwise);});
 	exp_top->add(btn_explore_island_cw_);
 
 	btn_scout_[WALK_NE - 1] =
 	   make_button(exp_top, "scne", _("Scout towards the north east"), pic_scout_ne,
-	               boost::bind(&ShipWindow::act_scout_towards, this, WALK_NE));
+	               [this]() { act_scout_towards(WALK_NE);});
 	exp_top->add(btn_scout_[WALK_NE - 1]);
 
 	btn_scout_[WALK_W - 1] = make_button(exp_mid, "scw", _("Scout towards the west"), pic_scout_w,
-	                                     boost::bind(&ShipWindow::act_scout_towards, this, WALK_W));
+	                                     [this]() { act_scout_towards(WALK_W);});
 	exp_mid->add(btn_scout_[WALK_W - 1]);
 
 	btn_construct_port_ =
 	   make_button(exp_mid, "buildport", _("Construct a port at the current location"),
-	               pic_construct_port, boost::bind(&ShipWindow::act_construct_port, this));
+	               pic_construct_port, [this]() { act_construct_port();});
 	exp_mid->add(btn_construct_port_);
 
 	btn_scout_[WALK_E - 1] = make_button(exp_mid, "sce", _("Scout towards the east"), pic_scout_e,
-	                                     boost::bind(&ShipWindow::act_scout_towards, this, WALK_E));
+	                                     [this]() { act_scout_towards(WALK_E);});
 	exp_mid->add(btn_scout_[WALK_E - 1]);
 
 	btn_scout_[WALK_SW - 1] =
 	   make_button(exp_bot, "scsw", _("Scout towards the south west"), pic_scout_sw,
-	               boost::bind(&ShipWindow::act_scout_towards, this, WALK_SW));
+	               [this]() { act_scout_towards(WALK_SW);});
 	exp_bot->add(btn_scout_[WALK_SW - 1]);
 
 	btn_explore_island_ccw_ =
 	   make_button(exp_bot, "expccw", _("Explore the island’s coast counter clockwise"),
-	               pic_explore_ccw, boost::bind(&ShipWindow::act_explore_island, this,
-	                                            IslandExploreDirection::kCounterClockwise));
+	               pic_explore_ccw, [this]() { act_explore_island(IslandExploreDirection::kCounterClockwise);});
 	exp_bot->add(btn_explore_island_ccw_);
 
 	btn_scout_[WALK_SE - 1] =
 	   make_button(exp_bot, "scse", _("Scout towards the south east"), pic_scout_se,
-	               boost::bind(&ShipWindow::act_scout_towards, this, WALK_SE));
+	               [this]() { act_scout_towards(WALK_SE);});
 	exp_bot->add(btn_scout_[WALK_SE - 1]);
 
 	vbox_.add(&navigation_box_, UI::Box::Resizing::kAlign, UI::Align::kCenter);
@@ -126,30 +125,30 @@ ShipWindow::ShipWindow(InteractiveGameBase& igb, UniqueWindow::Registry& reg, Sh
 	vbox_.add(buttons, UI::Box::Resizing::kFullSize);
 
 	btn_sink_ = make_button(
-	   buttons, "sink", _("Sink the ship"), pic_sink, boost::bind(&ShipWindow::act_sink, this));
+	   buttons, "sink", _("Sink the ship"), pic_sink, [this]() { act_sink();});
 	buttons->add(btn_sink_);
 
 	btn_cancel_expedition_ =
 	   make_button(buttons, "cancel_expedition", _("Cancel the Expedition"), pic_cancel_expedition,
-	               boost::bind(&ShipWindow::act_cancel_expedition, this));
+	               [this]() { act_cancel_expedition();});
 	buttons->add(btn_cancel_expedition_);
 
 	buttons->add_inf_space();
 
 	if (igbase_.get_display_flag(InteractiveBase::dfDebug)) {
 		btn_debug_ = make_button(buttons, "debug", _("Show Debug Window"), pic_debug,
-		                         boost::bind(&ShipWindow::act_debug, this));
+		                         [this]() { act_debug();});
 		btn_debug_->set_enabled(true);
 		buttons->add(btn_debug_);
 	}
 
 	btn_destination_ = make_button(buttons, "destination", _("Go to destination"), pic_destination,
-	                               boost::bind(&ShipWindow::act_destination, this));
+	                               [this]() { act_destination();});
 	btn_destination_->set_enabled(false);
 	buttons->add(btn_destination_);
 
 	btn_goto_ = make_button(
-	   buttons, "goto", _("Go to ship"), pic_goto, boost::bind(&ShipWindow::act_goto, this));
+	   buttons, "goto", _("Go to ship"), pic_goto, [this]() { act_goto();});
 	buttons->add(btn_goto_);
 
 	set_center_panel(&vbox_);
diff --git a/src/wui/soldiercapacitycontrol.cc b/src/wui/soldiercapacitycontrol.cc
index d16cabb3a1..32050cf3ab 100644
--- a/src/wui/soldiercapacitycontrol.cc
+++ b/src/wui/soldiercapacitycontrol.cc
@@ -79,10 +79,8 @@ SoldierCapacityControl::SoldierCapacityControl(UI::Panel* parent,
                g_gr->images().get("images/wui/buildings/menu_up_train.png"),
                _("Increase capacity. Hold down Ctrl to set the capacity to the highest value")),
      value_(this, "199", UI::Align::kCenter) {
-	decrease_.sigclicked.connect(
-	   boost::bind(&SoldierCapacityControl::click_decrease, boost::ref(*this)));
-	increase_.sigclicked.connect(
-	   boost::bind(&SoldierCapacityControl::click_increase, boost::ref(*this)));
+	decrease_.sigclicked.connect([this]() { click_decrease(); });
+	increase_.sigclicked.connect([this]() { click_increase(); });
 
 	add(new UI::Textarea(this, _("Capacity")), UI::Box::Resizing::kAlign, UI::Align::kCenter);
 	add(&decrease_, UI::Box::Resizing::kAlign, UI::Align::kCenter);
diff --git a/src/wui/soldierlist.cc b/src/wui/soldierlist.cc
index 7b5e19e7a8..30d53415f4 100644
--- a/src/wui/soldierlist.cc
+++ b/src/wui/soldierlist.cc
@@ -382,8 +382,8 @@ SoldierList::SoldierList(UI::Panel& parent, InteractiveGameBase& igb, Widelands:
 
 	add(&infotext_, UI::Box::Resizing::kAlign, UI::Align::kCenter);
 
-	soldierpanel_.set_mouseover(boost::bind(&SoldierList::mouseover, this, _1));
-	soldierpanel_.set_click(boost::bind(&SoldierList::eject, this, _1));
+	soldierpanel_.set_mouseover([this](const Soldier* s) { mouseover(s);});
+	soldierpanel_.set_click([this](const Soldier* s) { eject(s);});
 
 	// We don't want translators to translate this twice, so it's a bit involved.
 	int w = UI::g_fh
@@ -422,8 +422,7 @@ SoldierList::SoldierList(UI::Panel& parent, InteractiveGameBase& igb, Widelands:
 			soldier_preference_.set_state(1);
 		}
 		if (can_act) {
-			soldier_preference_.changedto.connect(
-			   boost::bind(&SoldierList::set_soldier_preference, this, _1));
+			soldier_preference_.changedto.connect([this](int32_t a) { set_soldier_preference(a);});
 		} else {
 			soldier_preference_.set_enabled(false);
 		}
diff --git a/src/wui/story_message_box.cc b/src/wui/story_message_box.cc
index ea6f94b665..7c4166e113 100644
--- a/src/wui/story_message_box.cc
+++ b/src/wui/story_message_box.cc
@@ -65,7 +65,7 @@ StoryMessageBox::StoryMessageBox(Widelands::Game* game,
 	button_box_.add(&ok_);
 	button_box_.add_inf_space();
 
-	ok_.sigclicked.connect(boost::bind(&StoryMessageBox::clicked_ok, boost::ref(*this)));
+	ok_.sigclicked.connect([this]() { clicked_ok(); });
 
 	if (x == -1 && y == -1) {
 		center_to_parent();
diff --git a/src/wui/warehousewindow.cc b/src/wui/warehousewindow.cc
index 8a64e29c45..a1311aa042 100644
--- a/src/wui/warehousewindow.cc
+++ b/src/wui/warehousewindow.cc
@@ -139,8 +139,7 @@ WarehouseWaresPanel::WarehouseWaresPanel(UI::Panel* parent,
 	b = new UI::Button(                                                                             \
 	   buttons, #policy, 0, 0, 34, 34, UI::ButtonStyle::kWuiMenu,                                   \
 	   g_gr->images().get("images/wui/buildings/stock_policy_button_" #policy ".png"), tooltip),    \
-	b->sigclicked.connect(                                                                          \
-	   boost::bind(&WarehouseWaresPanel::set_policy, this, Widelands::StockPolicy::k##policyname)), \
+	b->sigclicked.connect([this]() { set_policy(Widelands::StockPolicy::k##policyname); }),        \
 	buttons->add(b);
 
 		ADD_POLICY_BUTTON(normal, Normal, _("Normal policy"))
diff --git a/src/wui/watchwindow.cc b/src/wui/watchwindow.cc
index 3e74116afb..eaee270ba7 100644
--- a/src/wui/watchwindow.cc
+++ b/src/wui/watchwindow.cc
@@ -56,24 +56,24 @@ WatchWindow::WatchWindow(InteractiveGameBase& parent,
 	UI::Button* followbtn =
 	   new UI::Button(this, "follow", 0, h - 34, 34, 34, UI::ButtonStyle::kWuiSecondary,
 	                  g_gr->images().get("images/wui/menus/watch_follow.png"), _("Follow"));
-	followbtn->sigclicked.connect(boost::bind(&WatchWindow::do_follow, this));
+	followbtn->sigclicked.connect([this]() { do_follow();});
 
 	UI::Button* gotobtn = new UI::Button(
 	   this, "center_mainview_here", 34, h - 34, 34, 34, UI::ButtonStyle::kWuiSecondary,
 	   g_gr->images().get("images/wui/menus/goto.png"), _("Center the main view on this"));
-	gotobtn->sigclicked.connect(boost::bind(&WatchWindow::do_goto, this));
+	gotobtn->sigclicked.connect([this]() { do_goto();});
 
 	if (init_single_window) {
 		for (uint8_t i = 0; i < kViews; ++i) {
 			view_btns_[i] = new UI::Button(
 			   this, "view", 74 + (17 * i), 200 - 34, 17, 34, UI::ButtonStyle::kWuiSecondary, "-");
-			view_btns_[i]->sigclicked.connect(boost::bind(&WatchWindow::view_button_clicked, this, i));
+			view_btns_[i]->sigclicked.connect([this, i]() { view_button_clicked(i);});
 		}
 
 		UI::Button* closebtn =
 		   new UI::Button(this, "close", w - 34, h - 34, 34, 34, UI::ButtonStyle::kWuiSecondary,
 		                  g_gr->images().get("images/wui/menu_abort.png"), _("Close"));
-		closebtn->sigclicked.connect(boost::bind(&WatchWindow::close_cur_view, this));
+		closebtn->sigclicked.connect([this]() { close_cur_view();});
 	}
 
 	map_view_.field_clicked.connect(
-- 
2.26.2


From b6b57ffb53d938dc706512310537e2bffc1fe1c5 Mon Sep 17 00:00:00 2001
From: The Widelands Code Formatting Bot <actions@github.com>
Date: Sat, 9 May 2020 15:42:40 +0000
Subject: [PATCH 2/3] 65 files were automatically formatted.

---
 src/economy/economy.cc                        |  6 ++-
 src/economy/test/test_routing.cc              |  4 +-
 .../categorized_item_selection_menu.h         |  4 +-
 src/editor/ui_menus/main_menu_load_map.cc     |  6 +--
 .../ui_menus/main_menu_load_or_save_map.cc    |  6 +--
 src/editor/ui_menus/main_menu_new_map.cc      |  4 +-
 src/editor/ui_menus/main_menu_random_map.cc   | 30 ++++++-----
 src/editor/ui_menus/main_menu_save_map.cc     | 13 +++--
 .../main_menu_save_map_make_directory.cc      | 12 +++--
 src/editor/ui_menus/player_menu.cc            | 10 ++--
 .../tool_change_height_options_menu.cc        |  4 +-
 .../tool_change_resources_options_menu.cc     |  8 +--
 src/editor/ui_menus/toolsize_menu.cc          |  4 +-
 src/game_io/game_loader.cc                    |  3 +-
 src/logic/player.cc                           |  2 +-
 src/ui_basic/box.cc                           |  2 +-
 src/ui_basic/dropdown.cc                      |  8 +--
 src/ui_basic/icongrid.cc                      |  2 +-
 src/ui_basic/messagebox.cc                    |  4 +-
 src/ui_basic/multilineeditbox.cc              |  2 +-
 src/ui_basic/multilinetextarea.cc             |  2 +-
 src/ui_basic/spinbox.cc                       |  6 ++-
 src/ui_basic/table.cc                         |  7 +--
 src/ui_fsmenu/about.cc                        |  2 +-
 src/ui_fsmenu/campaign_select.cc              |  4 +-
 src/ui_fsmenu/internet_lobby.cc               | 18 ++++---
 src/ui_fsmenu/launch_mpg.cc                   | 12 +++--
 src/ui_fsmenu/launch_spg.cc                   |  4 +-
 src/ui_fsmenu/loadgame.cc                     | 12 ++---
 src/ui_fsmenu/main.cc                         | 32 +++++++++---
 src/ui_fsmenu/mapselect.cc                    |  8 +--
 src/ui_fsmenu/multiplayer.cc                  | 12 +++--
 src/ui_fsmenu/netsetup_lan.cc                 |  8 +--
 src/ui_fsmenu/options.cc                      |  8 +--
 src/ui_fsmenu/scenario_select.cc              | 10 ++--
 src/ui_fsmenu/singleplayer.cc                 | 16 ++++--
 src/wui/actionconfirm.cc                      |  4 +-
 src/wui/attack_box.cc                         |  2 +-
 src/wui/building_statistics_menu.cc           | 20 ++++---
 src/wui/buildingwindow.cc                     |  4 +-
 src/wui/constructionsitewindow.cc             | 12 +++--
 src/wui/debugconsole.cc                       |  6 +--
 src/wui/encyclopedia_window.cc                |  3 +-
 src/wui/fieldaction.cc                        | 18 ++++---
 src/wui/game_chat_menu.cc                     |  4 +-
 src/wui/game_client_disconnected.cc           |  2 +-
 src/wui/game_debug_ui.cc                      |  4 +-
 src/wui/game_main_menu_save_game.cc           | 11 ++--
 src/wui/game_message_menu.cc                  | 36 ++++++++-----
 src/wui/game_objectives_menu.cc               |  2 +-
 src/wui/game_summary.cc                       |  6 +--
 src/wui/general_statistics_menu.cc            |  6 +--
 src/wui/inputqueuedisplay.cc                  |  4 +-
 src/wui/interactive_base.cc                   |  4 +-
 src/wui/interactive_player.cc                 |  3 +-
 src/wui/load_or_save_game.cc                  |  5 +-
 src/wui/login_box.cc                          | 12 ++---
 src/wui/multiplayersetupgroup.cc              |  2 +-
 src/wui/playerdescrgroup.cc                   |  2 +-
 src/wui/portdockwaresdisplay.cc               |  2 +-
 src/wui/seafaring_statistics_menu.cc          | 15 +++---
 src/wui/shipwindow.cc                         | 52 ++++++++-----------
 src/wui/soldierlist.cc                        |  6 +--
 src/wui/warehousewindow.cc                    |  2 +-
 src/wui/watchwindow.cc                        |  8 +--
 65 files changed, 306 insertions(+), 246 deletions(-)

diff --git a/src/economy/economy.cc b/src/economy/economy.cc
index 2dfe87b90a..78afb8bd95 100644
--- a/src/economy/economy.cc
+++ b/src/economy/economy.cc
@@ -80,7 +80,7 @@ Economy::Economy(Player& player, Serial init_serial, WareWorker wwtype)
 		target_quantities_[i] = tq;
 	}
 
-	router_.reset(new Router([this]() { reset_all_pathfinding_cycles();}));
+	router_.reset(new Router([this]() { reset_all_pathfinding_cycles(); }));
 }
 
 Economy::~Economy() {
@@ -1013,7 +1013,9 @@ void Economy::handle_active_supplies(Game& game) {
 		} else {
 			wh = find_closest_warehouse(
 			   supply.get_position(game)->base_flag(), nullptr, 0,
-			   (!havenormal) ? WarehouseAcceptFn() : [this, ware](Warehouse& w) { return accept_warehouse_if_policy(w, type_, ware, StockPolicy::kNormal); });
+			   (!havenormal) ? WarehouseAcceptFn() : [this, ware](Warehouse& w) {
+				   return accept_warehouse_if_policy(w, type_, ware, StockPolicy::kNormal);
+				});
 		}
 		if (!wh) {
 			log("Warning: Economy::handle_active_supplies "
diff --git a/src/economy/test/test_routing.cc b/src/economy/test/test_routing.cc
index 21a623111a..eb1a3ba3d4 100644
--- a/src/economy/test/test_routing.cc
+++ b/src/economy/test/test_routing.cc
@@ -228,7 +228,7 @@ BOOST_AUTO_TEST_CASE(RoutingNode_InitializeMemberVariables) {
 }
 
 struct SimpleRouterFixture {
-	SimpleRouterFixture() : r([this]() { reset();}) {
+	SimpleRouterFixture() : r([this]() { reset(); }) {
 		d0 = new TestingRoutingNode();
 		d1 = new TestingRoutingNode(1, Coords(15, 0));
 		vec.push_back(d0);
@@ -381,7 +381,7 @@ BOOST_FIXTURE_TEST_CASE(router_findroute_connectedNodes_exceptSuccess, SimpleRou
 struct ComplexRouterFixture {
 	using Nodes = std::vector<RoutingNode*>;
 
-	ComplexRouterFixture() : r([this]() { reset();}) {
+	ComplexRouterFixture() : r([this]() { reset(); }) {
 		d0 = new TestingRoutingNode();
 		nodes.push_back(d0);
 	}
diff --git a/src/editor/ui_menus/categorized_item_selection_menu.h b/src/editor/ui_menus/categorized_item_selection_menu.h
index f8452b2a7e..8ce5988666 100644
--- a/src/editor/ui_menus/categorized_item_selection_menu.h
+++ b/src/editor/ui_menus/categorized_item_selection_menu.h
@@ -119,7 +119,7 @@ CategorizedItemSelectionMenu<DescriptionType, ToolType>::CategorizedItemSelectio
 
 			UI::Checkbox* cb = create_checkbox(horizontal, descriptions_.get(i));
 			cb->set_state(tool_->is_enabled(i));
-			cb->changedto.connect([this, i](bool b) { selected(i, b);});
+			cb->changedto.connect([this, i](bool b) { selected(i, b); });
 			checkboxes_[i] = cb;
 			horizontal->add(cb);
 			horizontal->add_space(kSpacing);
@@ -128,7 +128,7 @@ CategorizedItemSelectionMenu<DescriptionType, ToolType>::CategorizedItemSelectio
 		tab_panel_.add(category.name(), category.picture(), vertical, category.descname());
 	}
 	add(&current_selection_names_, UI::Box::Resizing::kFullSize);
-	tab_panel_.sigclicked.connect([this]() { update_label();});
+	tab_panel_.sigclicked.connect([this]() { update_label(); });
 	update_label();
 }
 
diff --git a/src/editor/ui_menus/main_menu_load_map.cc b/src/editor/ui_menus/main_menu_load_map.cc
index 6db411f069..019d73e2ae 100644
--- a/src/editor/ui_menus/main_menu_load_map.cc
+++ b/src/editor/ui_menus/main_menu_load_map.cc
@@ -33,11 +33,11 @@ MainMenuLoadMap::MainMenuLoadMap(EditorInteractive& parent, UI::UniqueWindow::Re
    : MainMenuLoadOrSaveMap(parent, registry, "load_map_menu", _("Load Map")) {
 	set_current_directory(curdir_);
 
-	table_.selected.connect([this](unsigned) { entry_selected();});
+	table_.selected.connect([this](unsigned) { entry_selected(); });
 	table_.double_clicked.connect([this](unsigned) { clicked_ok(); });
 
-	ok_.sigclicked.connect([this]() { clicked_ok();});
-	cancel_.sigclicked.connect([this]() { die();});
+	ok_.sigclicked.connect([this]() { clicked_ok(); });
+	cancel_.sigclicked.connect([this]() { die(); });
 }
 
 void MainMenuLoadMap::clicked_ok() {
diff --git a/src/editor/ui_menus/main_menu_load_or_save_map.cc b/src/editor/ui_menus/main_menu_load_or_save_map.cc
index 5283b49653..aef6639891 100644
--- a/src/editor/ui_menus/main_menu_load_or_save_map.cc
+++ b/src/editor/ui_menus/main_menu_load_or_save_map.cc
@@ -91,9 +91,9 @@ MainMenuLoadOrSaveMap::MainMenuLoadOrSaveMap(EditorInteractive& parent,
 	show_mapnames_box_.add(cb_dont_localize_mapnames_, UI::Box::Resizing::kFullSize);
 	show_mapnames_box_.add_inf_space();
 
-	table_.set_column_compare(0, [this](uint32_t a, uint32_t b) { return compare_players(a, b);});
-	table_.set_column_compare(1, [this](uint32_t a, uint32_t b) { return compare_mapnames(a, b);});
-	table_.set_column_compare(2, [this](uint32_t a, uint32_t b) { return compare_size(a, b);});
+	table_.set_column_compare(0, [this](uint32_t a, uint32_t b) { return compare_players(a, b); });
+	table_.set_column_compare(1, [this](uint32_t a, uint32_t b) { return compare_mapnames(a, b); });
+	table_.set_column_compare(2, [this](uint32_t a, uint32_t b) { return compare_size(a, b); });
 
 	table_and_details_box_.add(&table_, UI::Box::Resizing::kExpandBoth);
 	table_and_details_box_.add_space(0);
diff --git a/src/editor/ui_menus/main_menu_new_map.cc b/src/editor/ui_menus/main_menu_new_map.cc
index a47ef16329..fa5cf7b361 100644
--- a/src/editor/ui_menus/main_menu_new_map.cc
+++ b/src/editor/ui_menus/main_menu_new_map.cc
@@ -75,8 +75,8 @@ MainMenuNewMap::MainMenuNewMap(EditorInteractive& parent, Registry& registry)
 	box_.add(&list_);
 	box_.add_space(2 * margin_);
 
-	cancel_button_.sigclicked.connect([this]() { clicked_cancel();});
-	ok_button_.sigclicked.connect([this]() { clicked_create_map();});
+	cancel_button_.sigclicked.connect([this]() { clicked_cancel(); });
+	ok_button_.sigclicked.connect([this]() { clicked_create_map(); });
 	if (UI::g_fh->fontset()->is_rtl()) {
 		button_box_.add(&ok_button_);
 		button_box_.add(&cancel_button_);
diff --git a/src/editor/ui_menus/main_menu_random_map.cc b/src/editor/ui_menus/main_menu_random_map.cc
index dbccaab45d..7977ef2e66 100644
--- a/src/editor/ui_menus/main_menu_random_map.cc
+++ b/src/editor/ui_menus/main_menu_random_map.cc
@@ -212,7 +212,7 @@ MainMenuNewRandomMap::MainMenuNewRandomMap(EditorInteractive& parent,
 	box_.add_space(margin_);
 	box_height += margin_;
 
-	players_.changed.connect([this]() { button_clicked(ButtonId::kPlayers);});
+	players_.changed.connect([this]() { button_clicked(ButtonId::kPlayers); });
 
 	// ---------- Worlds ----------
 
@@ -221,7 +221,7 @@ MainMenuNewRandomMap::MainMenuNewRandomMap(EditorInteractive& parent,
 		world_box_.add_space(resources_label_.get_w() - world_label_.get_w() - margin_);
 	}
 
-	world_.sigclicked.connect([this]() { button_clicked(ButtonId::kWorld);});
+	world_.sigclicked.connect([this]() { button_clicked(ButtonId::kWorld); });
 	world_box_.add(&world_);
 	box_.add(&world_box_);
 	box_height += margin_ + world_box_.get_h();
@@ -235,7 +235,7 @@ MainMenuNewRandomMap::MainMenuNewRandomMap(EditorInteractive& parent,
 		resources_box_.add_space(world_label_.get_w() - resources_label_.get_w() - margin_);
 	}
 
-	resources_.sigclicked.connect([this]() { button_clicked(ButtonId::kResources);});
+	resources_.sigclicked.connect([this]() { button_clicked(ButtonId::kResources); });
 	resources_box_.add(&resources_);
 	box_.add(&resources_box_);
 	box_height += margin_ + resources_box_.get_h();
@@ -243,24 +243,26 @@ MainMenuNewRandomMap::MainMenuNewRandomMap(EditorInteractive& parent,
 	box_height += margin_;
 
 	// ---------- Water -----------
-	water_.get_buttons()[0]->sigclicked.connect([this]() { button_clicked(ButtonId::kWater);});
-	water_.get_buttons()[1]->sigclicked.connect([this]() { button_clicked(ButtonId::kWater);});
+	water_.get_buttons()[0]->sigclicked.connect([this]() { button_clicked(ButtonId::kWater); });
+	water_.get_buttons()[1]->sigclicked.connect([this]() { button_clicked(ButtonId::kWater); });
 
 	box_.add(&water_);
 	box_height += margin_ + water_.get_h();
 
 	// ---------- Land -----------
 
-	land_.get_buttons()[0]->sigclicked.connect([this]() { button_clicked(ButtonId::kLand);});
-	land_.get_buttons()[1]->sigclicked.connect([this]() { button_clicked(ButtonId::kLand);});
+	land_.get_buttons()[0]->sigclicked.connect([this]() { button_clicked(ButtonId::kLand); });
+	land_.get_buttons()[1]->sigclicked.connect([this]() { button_clicked(ButtonId::kLand); });
 
 	box_.add(&land_);
 	box_height += margin_ + land_.get_h();
 
 	// ---------- Wasteland -----------
 
-	wasteland_.get_buttons()[0]->sigclicked.connect([this]() { button_clicked(ButtonId::kWasteland);});
-	wasteland_.get_buttons()[1]->sigclicked.connect([this]() { button_clicked(ButtonId::kWasteland);});
+	wasteland_.get_buttons()[0]->sigclicked.connect(
+	   [this]() { button_clicked(ButtonId::kWasteland); });
+	wasteland_.get_buttons()[1]->sigclicked.connect(
+	   [this]() { button_clicked(ButtonId::kWasteland); });
 
 	box_.add(&wasteland_);
 	box_height += margin_ + wasteland_.get_h();
@@ -289,13 +291,13 @@ MainMenuNewRandomMap::MainMenuNewRandomMap(EditorInteractive& parent,
 	box_.add_space(margin_);
 	box_height += margin_;
 
-	island_mode_.changed.connect([this]() { button_clicked(ButtonId::kIslandMode);});
+	island_mode_.changed.connect([this]() { button_clicked(ButtonId::kIslandMode); });
 
 	// ---------- Random map number edit ----------
 
 	map_number_box_.add(&map_number_label_);
 
-	map_number_edit_.changed.connect([this]() { nr_edit_box_changed();});
+	map_number_edit_.changed.connect([this]() { nr_edit_box_changed(); });
 	RNG rng;
 	rng.seed(clock());
 	rng.rand();
@@ -313,7 +315,7 @@ MainMenuNewRandomMap::MainMenuNewRandomMap(EditorInteractive& parent,
 	map_id_box_.add(&map_id_label_);
 
 	map_id_edit_.set_text("abcd-efgh-ijkl-mnop");
-	map_id_edit_.changed.connect([this]() { id_edit_box_changed();});
+	map_id_edit_.changed.connect([this]() { id_edit_box_changed(); });
 	map_id_box_.add(&map_id_edit_);
 	box_.add(&map_id_box_);
 	box_height += margin_ + map_id_edit_.get_h();
@@ -321,8 +323,8 @@ MainMenuNewRandomMap::MainMenuNewRandomMap(EditorInteractive& parent,
 	box_height += margin_;
 
 	// ---------- "Generate Map" button ----------
-	cancel_button_.sigclicked.connect([this]() { clicked_cancel();});
-	ok_button_.sigclicked.connect([this]() { clicked_create_map();});
+	cancel_button_.sigclicked.connect([this]() { clicked_cancel(); });
+	ok_button_.sigclicked.connect([this]() { clicked_create_map(); });
 	if (UI::g_fh->fontset()->is_rtl()) {
 		button_box_.add(&ok_button_);
 		button_box_.add(&cancel_button_);
diff --git a/src/editor/ui_menus/main_menu_save_map.cc b/src/editor/ui_menus/main_menu_save_map.cc
index f50b900197..a235681507 100644
--- a/src/editor/ui_menus/main_menu_save_map.cc
+++ b/src/editor/ui_menus/main_menu_save_map.cc
@@ -78,23 +78,22 @@ MainMenuSaveMap::MainMenuSaveMap(EditorInteractive& parent,
 
 	table_.selected.connect([this](unsigned) { clicked_item(); });
 	table_.double_clicked.connect([this](unsigned) { double_clicked_item(); });
-	table_.cancel.connect([this]() { die();});
+	table_.cancel.connect([this]() { die(); });
 	table_.set_can_focus(true);
 
 	editbox_.set_text(parent.egbase().map().get_name());
 
-	editbox_.changed.connect([this]() { edit_box_changed();});
+	editbox_.changed.connect([this]() { edit_box_changed(); });
 	edit_box_changed();
 	editbox_.ok.connect([this]() { clicked_ok(); });
-	editbox_.cancel.connect([this, &parent]() { reset_editbox_or_die(parent.egbase().map().get_name());});
+	editbox_.cancel.connect(
+	   [this, &parent]() { reset_editbox_or_die(parent.egbase().map().get_name()); });
 
 	ok_.sigclicked.connect([this]() { clicked_ok(); });
 	cancel_.sigclicked.connect([this]() { die(); });
 
-	make_directory_.sigclicked.connect(
-	   [this]() { clicked_make_directory(); });
-	edit_options_.sigclicked.connect(
-	   [this]() { clicked_edit_options(); });
+	make_directory_.sigclicked.connect([this]() { clicked_make_directory(); });
+	edit_options_.sigclicked.connect([this]() { clicked_edit_options(); });
 
 	// We always want the current map's data here
 	const Widelands::Map& map = parent.egbase().map();
diff --git a/src/editor/ui_menus/main_menu_save_map_make_directory.cc b/src/editor/ui_menus/main_menu_save_map_make_directory.cc
index 50dc774ab6..9b3e33a843 100644
--- a/src/editor/ui_menus/main_menu_save_map_make_directory.cc
+++ b/src/editor/ui_menus/main_menu_save_map_make_directory.cc
@@ -66,12 +66,14 @@ MainMenuSaveMapMakeDirectory::MainMenuSaveMapMakeDirectory(UI::Panel* const pare
 	vbox_.set_size(get_inner_w() - 2 * padding_, get_inner_h() - 3 * padding_ - buth_);
 
 	edit_.set_text(dirname_);
-	edit_.changed.connect([this]() { edit_changed();});
-	edit_.ok.connect([this]() { clicked_ok();});
-	edit_.cancel.connect([this]() { end_modal<UI::Panel::Returncodes>(UI::Panel::Returncodes::kBack);});
-	ok_button_.sigclicked.connect([this]() { clicked_ok();});
+	edit_.changed.connect([this]() { edit_changed(); });
+	edit_.ok.connect([this]() { clicked_ok(); });
+	edit_.cancel.connect(
+	   [this]() { end_modal<UI::Panel::Returncodes>(UI::Panel::Returncodes::kBack); });
+	ok_button_.sigclicked.connect([this]() { clicked_ok(); });
 	ok_button_.set_enabled(!dirname_.empty());
-	cancel_button_.sigclicked.connect([this]() { end_modal<UI::Panel::Returncodes>(UI::Panel::Returncodes::kBack);});
+	cancel_button_.sigclicked.connect(
+	   [this]() { end_modal<UI::Panel::Returncodes>(UI::Panel::Returncodes::kBack); });
 	center_to_parent();
 }
 
diff --git a/src/editor/ui_menus/player_menu.cc b/src/editor/ui_menus/player_menu.cc
index de4b33c4a1..add10714ab 100644
--- a/src/editor/ui_menus/player_menu.cc
+++ b/src/editor/ui_menus/player_menu.cc
@@ -82,7 +82,7 @@ public:
 		box_.add_space(kMargin);
 
 		ok_.sigclicked.connect([this]() { ok(); });
-		cancel_.sigclicked.connect([this]() { cancel();});
+		cancel_.sigclicked.connect([this]() { cancel(); });
 	}
 
 	void ok() {
@@ -155,7 +155,7 @@ EditorPlayerMenu::EditorPlayerMenu(EditorInteractive& parent,
 
 		no_of_players_.add(boost::lexical_cast<std::string>(static_cast<unsigned int>(p)), p, nullptr,
 		                   p == nr_players);
-		no_of_players_.selected.connect([this]() { no_of_players_clicked();});
+		no_of_players_.selected.connect([this]() { no_of_players_clicked(); });
 
 		UI::Box* row = new UI::Box(&box_, 0, 0, UI::Box::Horizontal);
 
@@ -164,7 +164,7 @@ EditorPlayerMenu::EditorPlayerMenu(EditorInteractive& parent,
 		if (map_has_player) {
 			plr_name->set_text(map.get_scenario_player_name(p));
 		}
-		plr_name->changed.connect([this, p]() { name_changed(p - 1);});
+		plr_name->changed.connect([this, p]() { name_changed(p - 1); });
 
 		// Tribe
 		UI::Dropdown<std::string>* plr_tribe = new UI::Dropdown<std::string>(
@@ -186,7 +186,7 @@ EditorPlayerMenu::EditorPlayerMenu(EditorInteractive& parent,
 		   (p <= map.get_nrplayers() && Widelands::tribe_exists(map.get_scenario_player_tribe(p))) ?
 		      map.get_scenario_player_tribe(p) :
 		      "");
-		plr_tribe->selected.connect([this, p]() { player_tribe_clicked(p - 1);});
+		plr_tribe->selected.connect([this, p]() { player_tribe_clicked(p - 1); });
 
 		// Starting position
 		const Image* player_image =
@@ -198,7 +198,7 @@ EditorPlayerMenu::EditorPlayerMenu(EditorInteractive& parent,
 		   /** TRANSLATORS: Button tooltip in the editor for using a player's starting position tool
 		    */
 		   player_image, _("Set this player’s starting position"));
-		plr_position->sigclicked.connect([this, p]() { set_starting_pos_clicked(p);});
+		plr_position->sigclicked.connect([this, p]() { set_starting_pos_clicked(p); });
 
 		// Add the elements to the row
 		row->add(plr_name, UI::Box::Resizing::kFillSpace);
diff --git a/src/editor/ui_menus/tool_change_height_options_menu.cc b/src/editor/ui_menus/tool_change_height_options_menu.cc
index 4f9e87e2dd..999fc5a701 100644
--- a/src/editor/ui_menus/tool_change_height_options_menu.cc
+++ b/src/editor/ui_menus/tool_change_height_options_menu.cc
@@ -63,8 +63,8 @@ EditorToolChangeHeightOptionsMenu::EditorToolChangeHeightOptionsMenu(
 	   /** TRANSLATORS: Editor set height access key. **/
 	   _("Ctrl + Click on the map to set terrain height"));
 
-	change_by_.changed.connect([this]() { update_change_by();});
-	set_to_.changed.connect([this]() { update_set_to();});
+	change_by_.changed.connect([this]() { update_change_by(); });
+	set_to_.changed.connect([this]() { update_set_to(); });
 
 	box_.add(&change_by_);
 	box_.add(&set_to_);
diff --git a/src/editor/ui_menus/tool_change_resources_options_menu.cc b/src/editor/ui_menus/tool_change_resources_options_menu.cc
index f43a33b9e2..dd8b75e935 100644
--- a/src/editor/ui_menus/tool_change_resources_options_menu.cc
+++ b/src/editor/ui_menus/tool_change_resources_options_menu.cc
@@ -78,8 +78,8 @@ EditorToolChangeResourcesOptionsMenu::EditorToolChangeResourcesOptionsMenu(
 	   _("Ctrl + Click on the map to set the amount of the selected resource. This will replace "
 	     "already set resources."));
 
-	change_by_.changed.connect([this]() { update_change_by();});
-	set_to_.changed.connect([this]() { update_set_to();});
+	change_by_.changed.connect([this]() { update_change_by(); });
+	set_to_.changed.connect([this]() { update_set_to(); });
 
 	box_.add(&change_by_);
 	box_.add(&set_to_);
@@ -103,8 +103,8 @@ EditorToolChangeResourcesOptionsMenu::EditorToolChangeResourcesOptionsMenu(
 
 	radiogroup_.set_state(increase_tool_.get_cur_res());
 
-	radiogroup_.changed.connect([this]() { change_resource();});
-	radiogroup_.clicked.connect([this]() { change_resource();});
+	radiogroup_.changed.connect([this]() { change_resource(); });
+	radiogroup_.clicked.connect([this]() { change_resource(); });
 
 	// Add label
 	cur_selection_.set_fixed_width(box_.get_inner_w());
diff --git a/src/editor/ui_menus/toolsize_menu.cc b/src/editor/ui_menus/toolsize_menu.cc
index 16664a9ac1..96af6c42a2 100644
--- a/src/editor/ui_menus/toolsize_menu.cc
+++ b/src/editor/ui_menus/toolsize_menu.cc
@@ -52,8 +52,8 @@ EditorToolsizeMenu::EditorToolsizeMenu(EditorInteractive& parent,
                UI::ButtonStyle::kWuiSecondary,
                g_gr->images().get("images/ui_basic/scrollbar_down.png")),
      value_(0) {
-	increase_.sigclicked.connect([this]() { increase_radius();});
-	decrease_.sigclicked.connect([this]() { decrease_radius();});
+	increase_.sigclicked.connect([this]() { increase_radius(); });
+	decrease_.sigclicked.connect([this]() { decrease_radius(); });
 
 	increase_.set_repeating(true);
 	decrease_.set_repeating(true);
diff --git a/src/game_io/game_loader.cc b/src/game_io/game_loader.cc
index 035f032567..e407173ce6 100644
--- a/src/game_io/game_loader.cc
+++ b/src/game_io/game_loader.cc
@@ -149,7 +149,8 @@ int32_t GameLoader::load_game(bool const multiplayer) {
 			// Renew MapObject connections
 			if (message->serial() > 0) {
 				MapObject* mo = game_.objects().get_object(message->serial());
-				mo->removed.connect([player, message_id](unsigned) { player->message_object_removed(message_id);});
+				mo->removed.connect(
+				   [player, message_id](unsigned) { player->message_object_removed(message_id); });
 			}
 		}
 	}
diff --git a/src/logic/player.cc b/src/logic/player.cc
index 11877cee35..a9b0089527 100644
--- a/src/logic/player.cc
+++ b/src/logic/player.cc
@@ -350,7 +350,7 @@ MessageId Player::add_message(Game& game, std::unique_ptr<Message> new_message,
 	// MapObject connection
 	if (message->serial() > 0) {
 		MapObject* mo = egbase().objects().get_object(message->serial());
-		mo->removed.connect([this, id](unsigned) { message_object_removed(id);});
+		mo->removed.connect([this, id](unsigned) { message_object_removed(id); });
 	}
 
 	// Sound & popup
diff --git a/src/ui_basic/box.cc b/src/ui_basic/box.cc
index b83d3073dc..2cdbe4d26c 100644
--- a/src/ui_basic/box.cc
+++ b/src/ui_basic/box.cc
@@ -198,7 +198,7 @@ void Box::layout() {
 			// TODO(GunChleoc): Implement styling if we ever use the scrollbar function.
 			scrollbar_.reset(new Scrollbar(
 			   this, sb_x, sb_y, sb_w, sb_h, UI::PanelStyle::kFsMenu, orientation_ == Horizontal));
-			scrollbar_->moved.connect([this](int32_t a) { scrollbar_moved(a);});
+			scrollbar_->moved.connect([this](int32_t a) { scrollbar_moved(a); });
 		} else {
 			scrollbar_->set_pos(Vector2i(sb_x, sb_y));
 			scrollbar_->set_size(sb_w, sb_h);
diff --git a/src/ui_basic/dropdown.cc b/src/ui_basic/dropdown.cc
index e085893c59..32eba5b6f1 100644
--- a/src/ui_basic/dropdown.cc
+++ b/src/ui_basic/dropdown.cc
@@ -132,15 +132,15 @@ BaseDropdown::BaseDropdown(UI::Panel* parent,
 
 	list_->set_visible(false);
 	button_box_.add(&display_button_, UI::Box::Resizing::kExpandBoth);
-	display_button_.sigclicked.connect([this]() { toggle_list();});
+	display_button_.sigclicked.connect([this]() { toggle_list(); });
 	if (push_button_ != nullptr) {
 		display_button_.set_perm_pressed(true);
 		button_box_.add(push_button_, UI::Box::Resizing::kFullSize);
-		push_button_->sigclicked.connect([this]() { toggle_list();});
+		push_button_->sigclicked.connect([this]() { toggle_list(); });
 	}
 	button_box_.set_size(w, get_h());
-	list_->clicked.connect([this]() { set_value();});
-	list_->clicked.connect([this]() { toggle_list();});
+	list_->clicked.connect([this]() { set_value(); });
+	list_->clicked.connect([this]() { toggle_list(); });
 	set_can_focus(true);
 	set_value();
 
diff --git a/src/ui_basic/icongrid.cc b/src/ui_basic/icongrid.cc
index 703d1c5ab3..5df2c967de 100644
--- a/src/ui_basic/icongrid.cc
+++ b/src/ui_basic/icongrid.cc
@@ -98,7 +98,7 @@ int32_t IconGrid::add(const std::string& name,
 
 	UI::Button* btn =
 	   new IconGridButton(*this, name, x, y, cell_width_, cell_height_, pic, idx, tooltip_text);
-	btn->sigclicked.connect([this, idx]() { clicked_button(idx);});
+	btn->sigclicked.connect([this, idx]() { clicked_button(idx); });
 
 	return idx;
 }
diff --git a/src/ui_basic/messagebox.cc b/src/ui_basic/messagebox.cc
index 26a1e106cd..e59e416bb1 100644
--- a/src/ui_basic/messagebox.cc
+++ b/src/ui_basic/messagebox.cc
@@ -91,13 +91,13 @@ WLMessageBox::WLMessageBox(Panel* const parent,
 	                               (width - button_w) / 2 :
 	                               UI::g_fh->fontset()->is_rtl() ? left_button_x : right_button_x,
 	                            button_y, button_w, 0, UI::ButtonStyle::kWuiPrimary, _("OK")));
-	ok_button_->sigclicked.connect([this]() { clicked_ok();});
+	ok_button_->sigclicked.connect([this]() { clicked_ok(); });
 
 	if (type_ == MBoxType::kOkCancel) {
 		cancel_button_.reset(
 		   new Button(this, "cancel", UI::g_fh->fontset()->is_rtl() ? right_button_x : left_button_x,
 		              button_y, button_w, 0, UI::ButtonStyle::kWuiSecondary, _("Cancel")));
-		cancel_button_->sigclicked.connect([this]() { clicked_back();});
+		cancel_button_->sigclicked.connect([this]() { clicked_back(); });
 	}
 
 	set_inner_size(width, button_y + ok_button_->get_h() + margin);
diff --git a/src/ui_basic/multilineeditbox.cc b/src/ui_basic/multilineeditbox.cc
index e3e63868b2..6c583a99a1 100644
--- a/src/ui_basic/multilineeditbox.cc
+++ b/src/ui_basic/multilineeditbox.cc
@@ -102,7 +102,7 @@ MultilineEditbox::Data::Data(MultilineEditbox& o, const UI::TextPanelStyleInfo&
      ww_valid(false),
      ww(style.font().size(), style.font().color(), o.get_w()),
      owner(o) {
-	scrollbar.moved.connect([&o](int32_t a) { o.scrollpos_changed(a);});
+	scrollbar.moved.connect([&o](int32_t a) { o.scrollpos_changed(a); });
 
 	scrollbar.set_pagesize(owner.get_h() - 2 * lineheight);
 	scrollbar.set_singlestepsize(lineheight);
diff --git a/src/ui_basic/multilinetextarea.cc b/src/ui_basic/multilinetextarea.cc
index 996604b8e6..d529f62df2 100644
--- a/src/ui_basic/multilinetextarea.cc
+++ b/src/ui_basic/multilinetextarea.cc
@@ -50,7 +50,7 @@ MultilineTextarea::MultilineTextarea(Panel* const parent,
      scrollbar_(this, get_w() - Scrollbar::kSize, 0, Scrollbar::kSize, h, style, false) {
 	set_thinks(false);
 
-	scrollbar_.moved.connect([this](int32_t a) { scrollpos_changed(a);});
+	scrollbar_.moved.connect([this](int32_t a) { scrollpos_changed(a); });
 
 	scrollbar_.set_singlestepsize(text_height(*style_, font_scale_));
 	scrollbar_.set_steps(1);
diff --git a/src/ui_basic/spinbox.cc b/src/ui_basic/spinbox.cc
index 8a6c225537..6bfe6b7a1a 100644
--- a/src/ui_basic/spinbox.cc
+++ b/src/ui_basic/spinbox.cc
@@ -132,8 +132,10 @@ SpinBox::SpinBox(Panel* const parent,
 		              g_gr->images().get("images/ui_basic/scrollbar_right_fast.png"),
 		              _("Increase the value by 10"));
 
-		sbi_->button_ten_plus->sigclicked.connect([this, big_step_size]() { change_value(big_step_size); });
-		sbi_->button_ten_minus->sigclicked.connect([this, big_step_size]() { change_value(-big_step_size); });
+		sbi_->button_ten_plus->sigclicked.connect(
+		   [this, big_step_size]() { change_value(big_step_size); });
+		sbi_->button_ten_minus->sigclicked.connect(
+		   [this, big_step_size]() { change_value(-big_step_size); });
 		sbi_->button_ten_plus->set_repeating(true);
 		sbi_->button_ten_minus->set_repeating(true);
 		buttons_.push_back(sbi_->button_ten_minus);
diff --git a/src/ui_basic/table.cc b/src/ui_basic/table.cc
index 151ed542ae..ed20bd1dfc 100644
--- a/src/ui_basic/table.cc
+++ b/src/ui_basic/table.cc
@@ -74,7 +74,7 @@ Table<void*>::Table(Panel* const parent,
 	scrollbar_filler_button_->set_visible(false);
 	scrollbar_ = new Scrollbar(this, get_w() - Scrollbar::kSize, headerheight_, Scrollbar::kSize,
 	                           get_h() - headerheight_, style);
-	scrollbar_->moved.connect([this](int32_t a) { set_scrollpos(a); } );
+	scrollbar_->moved.connect([this](int32_t a) { set_scrollpos(a); });
 	scrollbar_->set_steps(1);
 	scrollbar_->set_singlestepsize(lineheight_);
 	scrollbar_->set_pagesize(get_h() - lineheight_);
@@ -121,10 +121,11 @@ void Table<void*>::add_column(uint32_t const width,
 		// The title text can be empty.
 		c.btn = new Button(this, title, complete_width, 0, width, headerheight_, button_style_, title,
 		                   tooltip_string);
-		c.btn->sigclicked.connect([this]() { header_button_clicked(columns_.size()); } );
+		c.btn->sigclicked.connect([this]() { header_button_clicked(columns_.size()); });
 		c.width = width;
 		c.alignment = alignment;
-		c.compare = [this](uint32_t a, uint32_t b) { return default_compare_string(columns_.size(), a, b); };
+		c.compare = [this](
+		   uint32_t a, uint32_t b) { return default_compare_string(columns_.size(), a, b); };
 		columns_.push_back(c);
 		if (column_type == TableColumnType::kFlexible) {
 			assert(flexible_column_ == std::numeric_limits<size_t>::max());
diff --git a/src/ui_fsmenu/about.cc b/src/ui_fsmenu/about.cc
index a1a0afdc88..bee8abe3af 100644
--- a/src/ui_fsmenu/about.cc
+++ b/src/ui_fsmenu/about.cc
@@ -37,7 +37,7 @@ FullscreenMenuAbout::FullscreenMenuAbout()
 	tabs_.add_tab("txts/LICENSE.lua");
 	tabs_.add_tab("txts/AUTHORS.lua");
 	tabs_.add_tab("txts/TRANSLATORS.lua");
-	close_.sigclicked.connect([this]() { clicked_back();});
+	close_.sigclicked.connect([this]() { clicked_back(); });
 	layout();
 }
 
diff --git a/src/ui_fsmenu/campaign_select.cc b/src/ui_fsmenu/campaign_select.cc
index 4648539a3c..9046f3666d 100644
--- a/src/ui_fsmenu/campaign_select.cc
+++ b/src/ui_fsmenu/campaign_select.cc
@@ -50,7 +50,7 @@ FullscreenMenuCampaignSelect::FullscreenMenuCampaignSelect(Campaigns* campvis)
 
 	ok_.sigclicked.connect([this]() { clicked_ok(); });
 	back_.sigclicked.connect([this]() { clicked_back(); });
-	table_.selected.connect([this](unsigned) { entry_selected();});
+	table_.selected.connect([this](unsigned) { entry_selected(); });
 	table_.double_clicked.connect([this](unsigned) { clicked_ok(); });
 
 	/** TRANSLATORS: Campaign difficulty table header */
@@ -59,7 +59,7 @@ FullscreenMenuCampaignSelect::FullscreenMenuCampaignSelect(Campaigns* campvis)
 	table_.add_column(
 	   0, _("Campaign Name"), _("Campaign Name"), UI::Align::kLeft, UI::TableColumnType::kFlexible);
 	table_.set_column_compare(
-	   0, [this](uint32_t a, uint32_t b) { return compare_difficulty(a, b);});
+	   0, [this](uint32_t a, uint32_t b) { return compare_difficulty(a, b); });
 	table_.set_sort_column(0);
 	table_.focus();
 	fill_table();
diff --git a/src/ui_fsmenu/internet_lobby.cc b/src/ui_fsmenu/internet_lobby.cc
index 36dac4eb9b..1bc4818e93 100644
--- a/src/ui_fsmenu/internet_lobby.cc
+++ b/src/ui_fsmenu/internet_lobby.cc
@@ -118,9 +118,9 @@ FullscreenMenuInternetLobby::FullscreenMenuInternetLobby(char const* const nick,
      password_(pwd),
      is_registered_(registered) {
 
-	joingame_.sigclicked.connect([this]() { clicked_joingame();});
-	hostgame_.sigclicked.connect([this]() { clicked_hostgame();});
-	back_.sigclicked.connect([this]() { clicked_back();});
+	joingame_.sigclicked.connect([this]() { clicked_joingame(); });
+	hostgame_.sigclicked.connect([this]() { clicked_hostgame(); });
+	back_.sigclicked.connect([this]() { clicked_back(); });
 
 	// Set the texts and style of UI elements
 	title.set_font_scale(scale_factor());
@@ -132,7 +132,7 @@ FullscreenMenuInternetLobby::FullscreenMenuInternetLobby(char const* const nick,
 	std::string server = get_config_string("servername", "");
 	edit_servername_.set_font_scale(scale_factor());
 	edit_servername_.set_text(server);
-	edit_servername_.changed.connect([this]() { change_servername();});
+	edit_servername_.changed.connect([this]() { change_servername(); });
 
 	// Prepare the lists
 	const std::string t_tip =
@@ -151,10 +151,12 @@ FullscreenMenuInternetLobby::FullscreenMenuInternetLobby(char const* const nick,
 	clientsonline_list_.add_column((lisw_ - 22) * 2 / 8, _("Version"));
 	clientsonline_list_.add_column(
 	   (lisw_ - 22) * 3 / 8, _("Game"), "", UI::Align::kLeft, UI::TableColumnType::kFlexible);
-	clientsonline_list_.set_column_compare(0, [this](uint32_t a, uint32_t b) { return compare_clienttype(a, b); });
-	clientsonline_list_.double_clicked.connect([this](uint32_t a) { return client_doubleclicked(a);});
-	opengames_list_.selected.connect([this](uint32_t) { server_selected();});
-	opengames_list_.double_clicked.connect([this](uint32_t) { server_doubleclicked();});
+	clientsonline_list_.set_column_compare(
+	   0, [this](uint32_t a, uint32_t b) { return compare_clienttype(a, b); });
+	clientsonline_list_.double_clicked.connect(
+	   [this](uint32_t a) { return client_doubleclicked(a); });
+	opengames_list_.selected.connect([this](uint32_t) { server_selected(); });
+	opengames_list_.double_clicked.connect([this](uint32_t) { server_doubleclicked(); });
 
 	// try to connect to the metaserver
 	if (!InternetGaming::ref().error() && !InternetGaming::ref().logged_in()) {
diff --git a/src/ui_fsmenu/launch_mpg.cc b/src/ui_fsmenu/launch_mpg.cc
index 85ba1fb029..b8fe69700f 100644
--- a/src/ui_fsmenu/launch_mpg.cc
+++ b/src/ui_fsmenu/launch_mpg.cc
@@ -59,18 +59,20 @@ struct MapOrSaveSelectionWindow : public UI::Window {
 		UI::Button* btn =
 		   new UI::Button(this, "map", space, y, butw, buth, UI::ButtonStyle::kFsMenuSecondary,
 		                  _("Map"), _("Select a map"));
-		btn->sigclicked.connect([this]() { pressedButton(FullscreenMenuBase::MenuTarget::kNormalGame);});
+		btn->sigclicked.connect(
+		   [this]() { pressedButton(FullscreenMenuBase::MenuTarget::kNormalGame); });
 
 		btn = new UI::Button(this, "saved_game", space, y + buth + space, butw, buth,
 		                     UI::ButtonStyle::kFsMenuSecondary,
 		                     /** Translators: This is a button to select a savegame */
 		                     _("Saved Game"), _("Select a saved game"));
-		btn->sigclicked.connect([this]() { pressedButton(FullscreenMenuBase::MenuTarget::kScenarioGame);});
+		btn->sigclicked.connect(
+		   [this]() { pressedButton(FullscreenMenuBase::MenuTarget::kScenarioGame); });
 
 		btn =
 		   new UI::Button(this, "cancel", space + butw / 4, y + 3 * buth + 2 * space, butw / 2, buth,
 		                  UI::ButtonStyle::kFsMenuSecondary, _("Cancel"), _("Cancel selection"));
-		btn->sigclicked.connect([this]() { pressedButton(FullscreenMenuBase::MenuTarget::kBack);});
+		btn->sigclicked.connect([this]() { pressedButton(FullscreenMenuBase::MenuTarget::kBack); });
 	}
 
 	void think() override {
@@ -170,8 +172,8 @@ FullscreenMenuLaunchMPG::FullscreenMenuLaunchMPG(GameSettingsProvider* const set
 	ok_.set_pos(Vector2i(right_column_x_, get_h() * 218 / 240));
 
 	title_.set_text(_("Multiplayer Game Setup"));
-	change_map_or_save_.sigclicked.connect([this]() { change_map_or_save();});
-	help_button_.sigclicked.connect([this]() { help_clicked();});
+	change_map_or_save_.sigclicked.connect([this]() { change_map_or_save(); });
+	help_button_.sigclicked.connect([this]() { help_clicked(); });
 
 	clients_.set_font_scale(scale_factor());
 	players_.set_font_scale(scale_factor());
diff --git a/src/ui_fsmenu/launch_spg.cc b/src/ui_fsmenu/launch_spg.cc
index 2fe4307a5f..4b883bd229 100644
--- a/src/ui_fsmenu/launch_spg.cc
+++ b/src/ui_fsmenu/launch_spg.cc
@@ -114,7 +114,7 @@ FullscreenMenuLaunchSPG::FullscreenMenuLaunchSPG(GameSettingsProvider* const set
 	win_condition_dropdown_.set_size(select_map_.get_w(), win_condition_dropdown_.get_h());
 
 	title_.set_text(_("Launch Game"));
-	select_map_.sigclicked.connect([this]() { select_map();});
+	select_map_.sigclicked.connect([this]() { select_map(); });
 
 	// We want to redesign this screen, so we won't bother defining a font size in the style manager.
 	const int small_scale_factor = scale_factor() * 4 / 5;
@@ -133,7 +133,7 @@ FullscreenMenuLaunchSPG::FullscreenMenuLaunchSPG(GameSettingsProvider* const set
 		   new UI::Button(this, "switch_to_position", get_w() / 100, y += buth_, get_h() * 17 / 500,
 		                  get_h() * 17 / 500, UI::ButtonStyle::kFsMenuSecondary, player_image,
 		                  _("Switch to position"));
-		pos_[i]->sigclicked.connect([this, i]() { switch_to_position(i);});
+		pos_[i]->sigclicked.connect([this, i]() { switch_to_position(i); });
 		players_[i] = new PlayerDescriptionGroup(
 		   this, get_w() / 25, y, get_w() * 16 / 25, get_h() * 17 / 500 * 2, settings, i);
 		y += buth_ / 1.17;
diff --git a/src/ui_fsmenu/loadgame.cc b/src/ui_fsmenu/loadgame.cc
index a0e38b645e..d8c382a4e0 100644
--- a/src/ui_fsmenu/loadgame.cc
+++ b/src/ui_fsmenu/loadgame.cc
@@ -91,13 +91,13 @@ FullscreenMenuLoadGame::FullscreenMenuLoadGame(Widelands::Game& g,
 		ok_.set_tooltip(_("Load this game"));
 	}
 
-	back_.sigclicked.connect([this]() { clicked_back();});
-	ok_.sigclicked.connect([this]() { clicked_ok();});
-	load_or_save_.table().selected.connect([this](unsigned) { entry_selected();});
-	load_or_save_.table().double_clicked.connect([this](unsigned) { clicked_ok();});
+	back_.sigclicked.connect([this]() { clicked_back(); });
+	ok_.sigclicked.connect([this]() { clicked_ok(); });
+	load_or_save_.table().selected.connect([this](unsigned) { entry_selected(); });
+	load_or_save_.table().double_clicked.connect([this](unsigned) { clicked_ok(); });
 
 	if (is_replay_) {
-		show_filenames_->changed.connect([this]() { toggle_filenames();});
+		show_filenames_->changed.connect([this]() { toggle_filenames(); });
 		show_filenames_->set_state(get_config_bool("display_replay_filenames", true));
 	}
 
@@ -106,7 +106,7 @@ FullscreenMenuLoadGame::FullscreenMenuLoadGame(Widelands::Game& g,
 		load_or_save_.table().select(0);
 	}
 
-	load_or_save_.table().cancel.connect([this]() { clicked_back();});
+	load_or_save_.table().cancel.connect([this]() { clicked_back(); });
 }
 
 void FullscreenMenuLoadGame::layout() {
diff --git a/src/ui_fsmenu/main.cc b/src/ui_fsmenu/main.cc
index 8e9ac1a7bb..b0ca7abd70 100644
--- a/src/ui_fsmenu/main.cc
+++ b/src/ui_fsmenu/main.cc
@@ -72,14 +72,30 @@ FullscreenMenuMain::FullscreenMenuMain()
                 kWidelandsCopyrightStart % kWidelandsCopyrightEnd)
                   .str()),
      gpl(this, 0, 0, 0, 0, _("Licensed under the GNU General Public License V2.0")) {
-	playtutorial.sigclicked.connect([this]() { end_modal<FullscreenMenuBase::MenuTarget>(FullscreenMenuBase::MenuTarget::kTutorial);});
-	singleplayer.sigclicked.connect([this]() { end_modal<FullscreenMenuBase::MenuTarget>(FullscreenMenuBase::MenuTarget::kSinglePlayer);});
-	multiplayer.sigclicked.connect([this]() { end_modal<FullscreenMenuBase::MenuTarget>(FullscreenMenuBase::MenuTarget::kMultiplayer);});
-	replay.sigclicked.connect([this]() { end_modal<FullscreenMenuBase::MenuTarget>(FullscreenMenuBase::MenuTarget::kReplay);});
-	editor.sigclicked.connect([this]() { end_modal<FullscreenMenuBase::MenuTarget>(FullscreenMenuBase::MenuTarget::kEditor);});
-	options.sigclicked.connect([this]() { end_modal<FullscreenMenuBase::MenuTarget>(FullscreenMenuBase::MenuTarget::kOptions);});
-	about.sigclicked.connect([this]() { end_modal<FullscreenMenuBase::MenuTarget>(FullscreenMenuBase::MenuTarget::kAbout);});
-	exit.sigclicked.connect([this]() { end_modal<FullscreenMenuBase::MenuTarget>(FullscreenMenuBase::MenuTarget::kExit);});
+	playtutorial.sigclicked.connect([this]() {
+		end_modal<FullscreenMenuBase::MenuTarget>(FullscreenMenuBase::MenuTarget::kTutorial);
+	});
+	singleplayer.sigclicked.connect([this]() {
+		end_modal<FullscreenMenuBase::MenuTarget>(FullscreenMenuBase::MenuTarget::kSinglePlayer);
+	});
+	multiplayer.sigclicked.connect([this]() {
+		end_modal<FullscreenMenuBase::MenuTarget>(FullscreenMenuBase::MenuTarget::kMultiplayer);
+	});
+	replay.sigclicked.connect([this]() {
+		end_modal<FullscreenMenuBase::MenuTarget>(FullscreenMenuBase::MenuTarget::kReplay);
+	});
+	editor.sigclicked.connect([this]() {
+		end_modal<FullscreenMenuBase::MenuTarget>(FullscreenMenuBase::MenuTarget::kEditor);
+	});
+	options.sigclicked.connect([this]() {
+		end_modal<FullscreenMenuBase::MenuTarget>(FullscreenMenuBase::MenuTarget::kOptions);
+	});
+	about.sigclicked.connect([this]() {
+		end_modal<FullscreenMenuBase::MenuTarget>(FullscreenMenuBase::MenuTarget::kAbout);
+	});
+	exit.sigclicked.connect([this]() {
+		end_modal<FullscreenMenuBase::MenuTarget>(FullscreenMenuBase::MenuTarget::kExit);
+	});
 
 	vbox_.add(&playtutorial, UI::Box::Resizing::kFullSize);
 	vbox_.add(&singleplayer, UI::Box::Resizing::kFullSize);
diff --git a/src/ui_fsmenu/mapselect.cc b/src/ui_fsmenu/mapselect.cc
index 62b691133f..96a60b69f5 100644
--- a/src/ui_fsmenu/mapselect.cc
+++ b/src/ui_fsmenu/mapselect.cc
@@ -76,10 +76,10 @@ FullscreenMenuMapSelect::FullscreenMenuMapSelect(GameSettingsProvider* const set
 
 	back_.sigclicked.connect([this]() { clicked_back(); });
 	ok_.sigclicked.connect([this]() { clicked_ok(); });
-	table_.selected.connect([this](uint32_t) { entry_selected();});
+	table_.selected.connect([this](uint32_t) { entry_selected(); });
 	table_.double_clicked.connect([this](uint32_t) { clicked_ok(); });
-	table_.set_column_compare(0, [this](uint32_t a, uint32_t b) { return compare_players(a, b);});
-	table_.set_column_compare(1, [this](uint32_t a, uint32_t b) { return compare_mapnames(a, b);});
+	table_.set_column_compare(0, [this](uint32_t a, uint32_t b) { return compare_players(a, b); });
+	table_.set_column_compare(1, [this](uint32_t a, uint32_t b) { return compare_mapnames(a, b); });
 	table_.set_column_compare(2, [this](uint32_t a, uint32_t b) { return compare_size(a, b); });
 
 	UI::Box* hbox = new UI::Box(&checkboxes_, 0, 0, UI::Box::Horizontal, checkbox_space_, get_w());
@@ -375,7 +375,7 @@ void FullscreenMenuMapSelect::fill_table() {
 		table_.select(0);
 	}
 	set_has_selection();
-	table_.cancel.connect([this]() { clicked_back();});
+	table_.cancel.connect([this]() { clicked_back(); });
 
 	if (unspecified_balancing_found != unspecified_balancing_found_) {
 		unspecified_balancing_found_ = unspecified_balancing_found;
diff --git a/src/ui_fsmenu/multiplayer.cc b/src/ui_fsmenu/multiplayer.cc
index b649017517..8b8d19d769 100644
--- a/src/ui_fsmenu/multiplayer.cc
+++ b/src/ui_fsmenu/multiplayer.cc
@@ -48,13 +48,17 @@ FullscreenMenuMultiPlayer::FullscreenMenuMultiPlayer()
      showloginbox(
         &vbox_, "lan", 0, 0, butw_, buth_, UI::ButtonStyle::kFsMenuMenu, _("Online Game Settings")),
      back(&vbox_, "back", 0, 0, butw_, buth_, UI::ButtonStyle::kFsMenuMenu, _("Back")) {
-	metaserver.sigclicked.connect([this]() { internet_login();});
+	metaserver.sigclicked.connect([this]() { internet_login(); });
 
-	lan.sigclicked.connect([this]() { end_modal<FullscreenMenuBase::MenuTarget>(FullscreenMenuBase::MenuTarget::kLan);});
+	lan.sigclicked.connect([this]() {
+		end_modal<FullscreenMenuBase::MenuTarget>(FullscreenMenuBase::MenuTarget::kLan);
+	});
 
-	showloginbox.sigclicked.connect([this]() { show_internet_login();});
+	showloginbox.sigclicked.connect([this]() { show_internet_login(); });
 
-	back.sigclicked.connect([this]() { end_modal<FullscreenMenuBase::MenuTarget>(FullscreenMenuBase::MenuTarget::kBack);});
+	back.sigclicked.connect([this]() {
+		end_modal<FullscreenMenuBase::MenuTarget>(FullscreenMenuBase::MenuTarget::kBack);
+	});
 
 	title.set_font_scale(scale_factor());
 
diff --git a/src/ui_fsmenu/netsetup_lan.cc b/src/ui_fsmenu/netsetup_lan.cc
index c29016d68d..b4c8768eb0 100644
--- a/src/ui_fsmenu/netsetup_lan.cc
+++ b/src/ui_fsmenu/netsetup_lan.cc
@@ -114,14 +114,14 @@ FullscreenMenuNetSetupLAN::FullscreenMenuNetSetupLAN()
 	playername_.set_font_scale(scale_factor());
 	hostname_.set_font_scale(scale_factor());
 
-	hostname_.changed.connect([this]() { change_hostname();});
+	hostname_.changed.connect([this]() { change_hostname(); });
 	playername_.set_text(get_config_string("nickname", (_("nobody"))));
-	playername_.changed.connect([this]() { change_playername();});
+	playername_.changed.connect([this]() { change_playername(); });
 	table_.add_column(190, _("Host"));
 	table_.add_column(0, _("Map"), "", UI::Align::kLeft, UI::TableColumnType::kFlexible);
 	table_.add_column(90, _("State"));
-	table_.selected.connect([this](int32_t i) { game_selected(i);});
-	table_.double_clicked.connect([this](int32_t i) { game_doubleclicked(i);});
+	table_.selected.connect([this](int32_t i) { game_selected(i); });
+	table_.double_clicked.connect([this](int32_t i) { game_doubleclicked(i); });
 	discovery_.set_callback(discovery_callback, this);
 
 	joingame_.set_enabled(false);
diff --git a/src/ui_fsmenu/options.cc b/src/ui_fsmenu/options.cc
index 85b8462bec..79bfaa6f87 100644
--- a/src/ui_fsmenu/options.cc
+++ b/src/ui_fsmenu/options.cc
@@ -278,10 +278,10 @@ FullscreenMenuOptions::FullscreenMenuOptions(OptionsCtrl::OptionsStruct opt)
 	box_game_.add(&game_clock_);
 
 	// Bind actions
-	language_dropdown_.selected.connect([this]() { update_language_stats(false);});
-	cancel_.sigclicked.connect([this]() { clicked_cancel();});
-	apply_.sigclicked.connect([this]() { clicked_apply();});
-	ok_.sigclicked.connect([this]() { clicked_ok();});
+	language_dropdown_.selected.connect([this]() { update_language_stats(false); });
+	cancel_.sigclicked.connect([this]() { clicked_cancel(); });
+	apply_.sigclicked.connect([this]() { clicked_apply(); });
+	ok_.sigclicked.connect([this]() { clicked_ok(); });
 
 	/** TRANSLATORS: Options: Save game automatically every: */
 	sb_autosave_.add_replacement(0, _("Off"));
diff --git a/src/ui_fsmenu/scenario_select.cc b/src/ui_fsmenu/scenario_select.cc
index fb87746a5b..af2ded6dd5 100644
--- a/src/ui_fsmenu/scenario_select.cc
+++ b/src/ui_fsmenu/scenario_select.cc
@@ -109,10 +109,10 @@ FullscreenMenuScenarioSelect::FullscreenMenuScenarioSelect(CampaignData* camp)
 	                                 _("Return to campaign selection"));
 	ok_.set_tooltip(is_tutorial_ ? _("Play this tutorial") : _("Play this scenario"));
 
-	ok_.sigclicked.connect([this]() { clicked_ok();});
-	back_.sigclicked.connect([this]() { clicked_back();});
-	table_.selected.connect([this](unsigned) { entry_selected();});
-	table_.double_clicked.connect([this](unsigned) { clicked_ok();});
+	ok_.sigclicked.connect([this]() { clicked_ok(); });
+	back_.sigclicked.connect([this]() { clicked_back(); });
+	table_.selected.connect([this](unsigned) { entry_selected(); });
+	table_.double_clicked.connect([this](unsigned) { clicked_ok(); });
 
 	if (is_tutorial_) {
 		scenario_difficulty_.set_visible(false);
@@ -146,7 +146,7 @@ FullscreenMenuScenarioSelect::FullscreenMenuScenarioSelect(CampaignData* camp)
 	fill_table();
 	layout();
 
-	table_.cancel.connect([this]() { clicked_back();});
+	table_.cancel.connect([this]() { clicked_back(); });
 }
 
 void FullscreenMenuScenarioSelect::layout() {
diff --git a/src/ui_fsmenu/singleplayer.cc b/src/ui_fsmenu/singleplayer.cc
index 35302a8779..8ae327986f 100644
--- a/src/ui_fsmenu/singleplayer.cc
+++ b/src/ui_fsmenu/singleplayer.cc
@@ -41,10 +41,18 @@ FullscreenMenuSinglePlayer::FullscreenMenuSinglePlayer()
      load_game(
         &vbox_, "load_game", 0, 0, butw_, buth_, UI::ButtonStyle::kFsMenuMenu, _("Load Game")),
      back(&vbox_, "back", 0, 0, butw_, buth_, UI::ButtonStyle::kFsMenuMenu, _("Back")) {
-	new_game.sigclicked.connect([this]() { end_modal<FullscreenMenuBase::MenuTarget>(FullscreenMenuBase::MenuTarget::kNewGame); });
-	campaign.sigclicked.connect([this]() { end_modal<FullscreenMenuBase::MenuTarget>(FullscreenMenuBase::MenuTarget::kCampaign); });
-	load_game.sigclicked.connect([this]() { end_modal<FullscreenMenuBase::MenuTarget>(FullscreenMenuBase::MenuTarget::kLoadGame); });
-	back.sigclicked.connect([this]() { end_modal<FullscreenMenuBase::MenuTarget>(FullscreenMenuBase::MenuTarget::kBack); });
+	new_game.sigclicked.connect([this]() {
+		end_modal<FullscreenMenuBase::MenuTarget>(FullscreenMenuBase::MenuTarget::kNewGame);
+	});
+	campaign.sigclicked.connect([this]() {
+		end_modal<FullscreenMenuBase::MenuTarget>(FullscreenMenuBase::MenuTarget::kCampaign);
+	});
+	load_game.sigclicked.connect([this]() {
+		end_modal<FullscreenMenuBase::MenuTarget>(FullscreenMenuBase::MenuTarget::kLoadGame);
+	});
+	back.sigclicked.connect([this]() {
+		end_modal<FullscreenMenuBase::MenuTarget>(FullscreenMenuBase::MenuTarget::kBack);
+	});
 
 	title.set_font_scale(scale_factor());
 
diff --git a/src/wui/actionconfirm.cc b/src/wui/actionconfirm.cc
index dfc49d195e..4ee0ba3aba 100644
--- a/src/wui/actionconfirm.cc
+++ b/src/wui/actionconfirm.cc
@@ -144,12 +144,12 @@ ActionConfirm::ActionConfirm(InteractivePlayer& parent,
 
 	UI::Button* okbtn = new UI::Button(button_box, "ok", 0, 0, 80, 34, UI::ButtonStyle::kWuiMenu,
 	                                   g_gr->images().get("images/wui/menu_okay.png"));
-	okbtn->sigclicked.connect([this]() { ok();});
+	okbtn->sigclicked.connect([this]() { ok(); });
 
 	UI::Button* cancelbtn =
 	   new UI::Button(button_box, "abort", 0, 0, 80, 34, UI::ButtonStyle::kWuiMenu,
 	                  g_gr->images().get("images/wui/menu_abort.png"));
-	cancelbtn->sigclicked.connect([this]() { die();});
+	cancelbtn->sigclicked.connect([this]() { die(); });
 
 	button_box->add(
 	   UI::g_fh->fontset()->is_rtl() ? okbtn : cancelbtn, UI::Box::Resizing::kFillSpace);
diff --git a/src/wui/attack_box.cc b/src/wui/attack_box.cc
index 63718a07bc..1ee8903104 100644
--- a/src/wui/attack_box.cc
+++ b/src/wui/attack_box.cc
@@ -90,7 +90,7 @@ std::unique_ptr<UI::Button> AttackBox::add_button(UI::Box& parent,
                                                   const std::string& tooltip_text) {
 	std::unique_ptr<UI::Button> button(new UI::Button(
 	   &parent, text, 8, 8, 34, 34, UI::ButtonStyle::kWuiPrimary, text, tooltip_text));
-	button->sigclicked.connect([this, fn]() { (this->*fn)();});
+	button->sigclicked.connect([this, fn]() { (this->*fn)(); });
 	parent.add(button.get());
 	return button;
 }
diff --git a/src/wui/building_statistics_menu.cc b/src/wui/building_statistics_menu.cc
index f8ed9ecaf5..d95dfb48a6 100644
--- a/src/wui/building_statistics_menu.cc
+++ b/src/wui/building_statistics_menu.cc
@@ -164,12 +164,18 @@ BuildingStatisticsMenu::BuildingStatisticsMenu(InteractivePlayer& parent,
 	   3 * kButtonRowHeight, kButtonHeight, kButtonHeight, UI::ButtonStyle::kWuiMenu,
 	   g_gr->images().get("images/ui_basic/scrollbar_right.png"), _("Show next building"));
 
-	navigation_buttons_[NavigationButton::PrevOwned]->sigclicked.connect([this]() { jump_building(JumpTarget::kOwned, true);});
-	navigation_buttons_[NavigationButton::NextOwned]->sigclicked.connect([this]() { jump_building(JumpTarget::kOwned, false);});
-	navigation_buttons_[NavigationButton::PrevConstruction]->sigclicked.connect([this]() { jump_building(JumpTarget::kConstruction, true);});
-	navigation_buttons_[NavigationButton::NextConstruction]->sigclicked.connect([this]() { jump_building(JumpTarget::kConstruction, false);});
-	navigation_buttons_[NavigationButton::PrevUnproductive]->sigclicked.connect([this]() { jump_building(JumpTarget::kUnproductive, true);});
-	navigation_buttons_[NavigationButton::NextUnproductive]->sigclicked.connect([this]() { jump_building(JumpTarget::kUnproductive, false);});
+	navigation_buttons_[NavigationButton::PrevOwned]->sigclicked.connect(
+	   [this]() { jump_building(JumpTarget::kOwned, true); });
+	navigation_buttons_[NavigationButton::NextOwned]->sigclicked.connect(
+	   [this]() { jump_building(JumpTarget::kOwned, false); });
+	navigation_buttons_[NavigationButton::PrevConstruction]->sigclicked.connect(
+	   [this]() { jump_building(JumpTarget::kConstruction, true); });
+	navigation_buttons_[NavigationButton::NextConstruction]->sigclicked.connect(
+	   [this]() { jump_building(JumpTarget::kConstruction, false); });
+	navigation_buttons_[NavigationButton::PrevUnproductive]->sigclicked.connect(
+	   [this]() { jump_building(JumpTarget::kUnproductive, true); });
+	navigation_buttons_[NavigationButton::NextUnproductive]->sigclicked.connect(
+	   [this]() { jump_building(JumpTarget::kUnproductive, false); });
 
 	unproductive_percent_.changed.connect([this]() { low_production_changed(); });
 	unproductive_percent_.ok.connect([this]() { low_production_reset_focus(); });
@@ -407,7 +413,7 @@ void BuildingStatisticsMenu::add_button(DescriptionIndex id,
 
 	row->add(button_box);
 
-	building_buttons_[id]->sigclicked.connect([this, id]() { set_current_building_type(id);});
+	building_buttons_[id]->sigclicked.connect([this, id]() { set_current_building_type(id); });
 }
 
 void BuildingStatisticsMenu::jump_building(JumpTarget target, bool reverse) {
diff --git a/src/wui/buildingwindow.cc b/src/wui/buildingwindow.cc
index 62ab687fff..80b052be15 100644
--- a/src/wui/buildingwindow.cc
+++ b/src/wui/buildingwindow.cc
@@ -204,7 +204,7 @@ void BuildingWindow::create_capsbuttons(UI::Box* capsbuttons, Widelands::Buildin
 				   capsbuttons, "start_or_cancel_expedition", 0, 0, 34, 34, UI::ButtonStyle::kWuiMenu,
 				   g_gr->images().get("images/wui/buildings/start_expedition.png"));
 				update_expedition_button(!pd->expedition_started());
-				expeditionbtn_->sigclicked.connect([this]() { act_start_or_cancel_expedition();});
+				expeditionbtn_->sigclicked.connect([this]() { act_start_or_cancel_expedition(); });
 				capsbuttons->add(expeditionbtn_);
 
 				expedition_canceled_subscriber_ =
@@ -229,7 +229,7 @@ void BuildingWindow::create_capsbuttons(UI::Box* capsbuttons, Widelands::Buildin
 				      _("Continue") :
 				      /** TRANSLATORS: Stop/Continue toggle button for production sites. */
 				      _("Stop"));
-				stopbtn->sigclicked.connect([this]() { act_start_stop();});
+				stopbtn->sigclicked.connect([this]() { act_start_stop(); });
 				capsbuttons->add(stopbtn);
 
 				// Add a fixed width separator rather than infinite space so the
diff --git a/src/wui/constructionsitewindow.cc b/src/wui/constructionsitewindow.cc
index 8199b43dee..144f59219e 100644
--- a/src/wui/constructionsitewindow.cc
+++ b/src/wui/constructionsitewindow.cc
@@ -307,10 +307,14 @@ void ConstructionSiteWindow::init(bool avoid_fastclick, bool workarea_preview_wa
 				   &buttonsbox, "stock_policy_remove", 0, 0, 34, 34, UI::ButtonStyle::kWuiMenu,
 				   g_gr->images().get(pic_stock_policy_button_remove),
 				   _("Remove selected wares from here"));
-				sp_remove.sigclicked.connect([this, ww]() { change_policy(ww, Widelands::StockPolicy::kRemove);});
-				sp_dont.sigclicked.connect([this, ww]() { change_policy(ww, Widelands::StockPolicy::kDontStock);});
-				sp_prefer.sigclicked.connect([this, ww]() { change_policy(ww, Widelands::StockPolicy::kPrefer);});
-				sp_normal.sigclicked.connect([this, ww]() { change_policy(ww, Widelands::StockPolicy::kNormal);});
+				sp_remove.sigclicked.connect(
+				   [this, ww]() { change_policy(ww, Widelands::StockPolicy::kRemove); });
+				sp_dont.sigclicked.connect(
+				   [this, ww]() { change_policy(ww, Widelands::StockPolicy::kDontStock); });
+				sp_prefer.sigclicked.connect(
+				   [this, ww]() { change_policy(ww, Widelands::StockPolicy::kPrefer); });
+				sp_normal.sigclicked.connect(
+				   [this, ww]() { change_policy(ww, Widelands::StockPolicy::kNormal); });
 				sp_normal.set_enabled(can_act);
 				sp_dont.set_enabled(can_act);
 				sp_remove.set_enabled(can_act);
diff --git a/src/wui/debugconsole.cc b/src/wui/debugconsole.cc
index 5e0e0d6cde..966ba118c7 100644
--- a/src/wui/debugconsole.cc
+++ b/src/wui/debugconsole.cc
@@ -36,9 +36,9 @@ struct Console : public ChatProvider, public Handler {
 	Handler::HandlerFn default_handler;
 
 	Console() {
-		addCommand("help", [this](const std::vector<std::string>& str) { cmdHelp(str);});
-		addCommand("ls", [this](const std::vector<std::string>& str) { cmdLs(str);});
-		default_handler = [this](const std::vector<std::string>& str) { cmdErr(str);};
+		addCommand("help", [this](const std::vector<std::string>& str) { cmdHelp(str); });
+		addCommand("ls", [this](const std::vector<std::string>& str) { cmdLs(str); });
+		default_handler = [this](const std::vector<std::string>& str) { cmdErr(str); };
 	}
 
 	~Console() override {
diff --git a/src/wui/encyclopedia_window.cc b/src/wui/encyclopedia_window.cc
index de8604d798..4ce6ff7c57 100644
--- a/src/wui/encyclopedia_window.cc
+++ b/src/wui/encyclopedia_window.cc
@@ -77,7 +77,8 @@ void EncyclopediaWindow::init(InteractiveBase& parent, std::unique_ptr<LuaTable>
 			                new UI::Listselect<EncyclopediaEntry>(boxes_.at(tab_name).get(), 0, 0,
 			                                                      contents_width, contents_height,
 			                                                      UI::PanelStyle::kWui))));
-			lists_.at(tab_name)->selected.connect([this, tab_name](unsigned) { entry_selected(tab_name); });
+			lists_.at(tab_name)->selected.connect(
+			   [this, tab_name](unsigned) { entry_selected(tab_name); });
 
 			contents_.insert(std::make_pair(
 			   tab_name, std::unique_ptr<UI::MultilineTextarea>(
diff --git a/src/wui/fieldaction.cc b/src/wui/fieldaction.cc
index 858235ec15..5b88006701 100644
--- a/src/wui/fieldaction.cc
+++ b/src/wui/fieldaction.cc
@@ -77,9 +77,9 @@ private:
 
 BuildGrid::BuildGrid(UI::Panel* parent, Widelands::Player* plr, int32_t x, int32_t y, int32_t cols)
    : UI::IconGrid(parent, x, y, kBuildGridCellSize, kBuildGridCellSize, cols), plr_(plr) {
-	icon_clicked.connect([this](Widelands::DescriptionIndex i) { click_slot(i);});
-	mouseout.connect([this](Widelands::DescriptionIndex i) { mouseout_slot(i);});
-	mousein.connect([this](Widelands::DescriptionIndex i) { mousein_slot(i);});
+	icon_clicked.connect([this](Widelands::DescriptionIndex i) { click_slot(i); });
+	mouseout.connect([this](Widelands::DescriptionIndex i) { mouseout_slot(i); });
+	mousein.connect([this](Widelands::DescriptionIndex i) { mousein_slot(i); });
 }
 
 /*
@@ -431,7 +431,7 @@ void FieldActionWindow::add_buttons_attack() {
 				a_box.add(attack_box_);
 
 				UI::Button* attack_button = attack_box_->get_attack_button();
-				attack_button->sigclicked.connect([this]() { act_attack();});
+				attack_button->sigclicked.connect([this]() { act_attack(); });
 				set_fastclick_panel(attack_button);
 			}
 		}
@@ -533,9 +533,11 @@ void FieldActionWindow::add_buttons_build(int32_t buildcaps, int32_t max_nodecap
 		// Allocate the tab's grid if necessary
 		if (!*ppgrid) {
 			*ppgrid = new BuildGrid(&tabpanel_, player_, 0, 0, 5);
-			(*ppgrid)->buildclicked.connect([this](Widelands::DescriptionIndex i) { act_build(i);});
-			(*ppgrid)->buildmouseout.connect([this](Widelands::DescriptionIndex i) { building_icon_mouse_out(i);});
-			(*ppgrid)->buildmousein.connect([this](Widelands::DescriptionIndex i) { building_icon_mouse_in(i);});
+			(*ppgrid)->buildclicked.connect([this](Widelands::DescriptionIndex i) { act_build(i); });
+			(*ppgrid)->buildmouseout.connect(
+			   [this](Widelands::DescriptionIndex i) { building_icon_mouse_out(i); });
+			(*ppgrid)->buildmousein.connect(
+			   [this](Widelands::DescriptionIndex i) { building_icon_mouse_in(i); });
 		}
 
 		// Add it to the grid
@@ -619,7 +621,7 @@ UI::Button& FieldActionWindow::add_button(UI::Box* const box,
                                           bool repeating) {
 	UI::Button& button = *new UI::Button(box, name, 0, 0, 34, 34, UI::ButtonStyle::kWuiPrimary,
 	                                     g_gr->images().get(picname), tooltip_text);
-	button.sigclicked.connect([this, fn]() { (this->*fn)();});
+	button.sigclicked.connect([this, fn]() { (this->*fn)(); });
 	button.set_repeating(repeating);
 	box->add(&button);
 
diff --git a/src/wui/game_chat_menu.cc b/src/wui/game_chat_menu.cc
index 5e6f0795d9..efac357dfc 100644
--- a/src/wui/game_chat_menu.cc
+++ b/src/wui/game_chat_menu.cc
@@ -41,8 +41,8 @@ GameChatMenu::GameChatMenu(UI::Panel* parent,
 	}
 	set_can_focus(true);
 
-	chat_.sent.connect([this]() { acknowledge();});
-	chat_.aborted.connect([this]() { acknowledge();});
+	chat_.sent.connect([this]() { acknowledge(); });
+	chat_.aborted.connect([this]() { acknowledge(); });
 
 	enter_chat_message(close_on_send_);
 }
diff --git a/src/wui/game_client_disconnected.cc b/src/wui/game_client_disconnected.cc
index 4e9b1afeb4..f257c93ba5 100644
--- a/src/wui/game_client_disconnected.cc
+++ b/src/wui/game_client_disconnected.cc
@@ -152,7 +152,7 @@ void GameClientDisconnected::clicked_exit_game() {
 		igb_->end_modal<UI::Panel::Returncodes>(UI::Panel::Returncodes::kBack);
 	} else {
 		GameExitConfirmBox* gecb = new GameExitConfirmBox(*get_parent(), *igb_);
-		gecb->cancel.connect([this, gecb]() { exit_game_aborted(gecb);});
+		gecb->cancel.connect([this, gecb]() { exit_game_aborted(gecb); });
 
 		set_visible(false);
 	}
diff --git a/src/wui/game_debug_ui.cc b/src/wui/game_debug_ui.cc
index 1fa28dcc7a..e035f70109 100644
--- a/src/wui/game_debug_ui.cc
+++ b/src/wui/game_debug_ui.cc
@@ -199,7 +199,7 @@ FieldDebugWindow::FieldDebugWindow(InteractiveBase& parent, Widelands::Coords co
      ui_immovable_(this, "immovable", 0, 280, 300, 24, UI::ButtonStyle::kWuiMenu, ""),
 
      ui_bobs_(this, 0, 304, 300, 96, UI::PanelStyle::kWui) {
-	ui_immovable_.sigclicked.connect([this]() { open_immovable();});
+	ui_immovable_.sigclicked.connect([this]() { open_immovable(); });
 
 	assert(0 <= coords_.x);
 	assert(coords_.x < map_.get_width());
@@ -207,7 +207,7 @@ FieldDebugWindow::FieldDebugWindow(InteractiveBase& parent, Widelands::Coords co
 	assert(coords_.y < map_.get_height());
 	assert(&map_[0] <= coords_.field);
 	assert(coords_.field < &map_[0] + map_.max_index());
-	ui_bobs_.selected.connect([this](uint32_t a) { open_bob(a);});
+	ui_bobs_.selected.connect([this](uint32_t a) { open_bob(a); });
 }
 
 /*
diff --git a/src/wui/game_main_menu_save_game.cc b/src/wui/game_main_menu_save_game.cc
index 856d41b16e..1d88e42223 100644
--- a/src/wui/game_main_menu_save_game.cc
+++ b/src/wui/game_main_menu_save_game.cc
@@ -99,12 +99,13 @@ GameMainMenuSaveGame::GameMainMenuSaveGame(InteractiveGameBase& parent,
 
 	ok_.set_enabled(false);
 
-	filename_editbox_.changed.connect([this]() { edit_box_changed();});
-	filename_editbox_.ok.connect([this]() { ok();});
-	filename_editbox_.cancel.connect([this, &parent]() { reset_editbox_or_die(parent.game().save_handler().get_cur_filename());});
+	filename_editbox_.changed.connect([this]() { edit_box_changed(); });
+	filename_editbox_.ok.connect([this]() { ok(); });
+	filename_editbox_.cancel.connect(
+	   [this, &parent]() { reset_editbox_or_die(parent.game().save_handler().get_cur_filename()); });
 
-	ok_.sigclicked.connect([this]() { ok();});
-	cancel_.sigclicked.connect([this]() { die();});
+	ok_.sigclicked.connect([this]() { ok(); });
+	cancel_.sigclicked.connect([this]() { die(); });
 
 	load_or_save_.table().selected.connect([this](unsigned) { entry_selected(); });
 	load_or_save_.table().double_clicked.connect([this](unsigned) { ok(); });
diff --git a/src/wui/game_message_menu.cc b/src/wui/game_message_menu.cc
index 67ef8351c3..f6425bb3c5 100644
--- a/src/wui/game_message_menu.cc
+++ b/src/wui/game_message_menu.cc
@@ -61,8 +61,8 @@ GameMessageMenu::GameMessageMenu(InteractivePlayer& plr, UI::UniqueWindow::Regis
 	list = new UI::Table<uintptr_t>(this, kPadding, kButtonSize + 2 * kPadding,
 	                                kWindowWidth - 2 * kPadding, kTableHeight, UI::PanelStyle::kWui,
 	                                UI::TableRows::kMulti);
-	list->selected.connect([this](uint32_t a) { selected(a);});
-	list->double_clicked.connect([this](uint32_t a) { double_clicked(a);});
+	list->selected.connect([this](uint32_t a) { selected(a); });
+	list->double_clicked.connect([this](uint32_t a) { double_clicked(a); });
 	list->add_column(kWindowWidth - 2 * kPadding - 60 - 60 - 75, _("Title"));
 	list->add_column(60, pgettext("message", "Type"), "", UI::Align::kCenter);
 	list->add_column(60, _("Status"), "", UI::Align::kCenter);
@@ -77,28 +77,33 @@ GameMessageMenu::GameMessageMenu(InteractivePlayer& plr, UI::UniqueWindow::Regis
 	geologistsbtn_ = new UI::Button(this, "filter_geologists_messages", kPadding, kPadding,
 	                                kButtonSize, kButtonSize, UI::ButtonStyle::kWuiSecondary,
 	                                g_gr->images().get("images/wui/fieldaction/menu_geologist.png"));
-	geologistsbtn_->sigclicked.connect([this]() { filter_messages(Widelands::Message::Type::kGeologists);});
+	geologistsbtn_->sigclicked.connect(
+	   [this]() { filter_messages(Widelands::Message::Type::kGeologists); });
 
 	economybtn_ = new UI::Button(this, "filter_economy_messages", 2 * kPadding + kButtonSize,
 	                             kPadding, kButtonSize, kButtonSize, UI::ButtonStyle::kWuiSecondary,
 	                             g_gr->images().get("images/wui/stats/genstats_nrwares.png"));
-	economybtn_->sigclicked.connect([this]() { filter_messages(Widelands::Message::Type::kEconomy);});
+	economybtn_->sigclicked.connect(
+	   [this]() { filter_messages(Widelands::Message::Type::kEconomy); });
 
 	seafaringbtn_ =
 	   new UI::Button(this, "filter_seafaring_messages", 3 * kPadding + 2 * kButtonSize, kPadding,
 	                  kButtonSize, kButtonSize, UI::ButtonStyle::kWuiSecondary,
 	                  g_gr->images().get("images/wui/buildings/start_expedition.png"));
-	seafaringbtn_->sigclicked.connect([this]() { filter_messages(Widelands::Message::Type::kSeafaring);});
+	seafaringbtn_->sigclicked.connect(
+	   [this]() { filter_messages(Widelands::Message::Type::kSeafaring); });
 
 	warfarebtn_ = new UI::Button(this, "filter_warfare_messages", 4 * kPadding + 3 * kButtonSize,
 	                             kPadding, kButtonSize, kButtonSize, UI::ButtonStyle::kWuiSecondary,
 	                             g_gr->images().get("images/wui/messages/messages_warfare.png"));
-	warfarebtn_->sigclicked.connect([this]() { filter_messages(Widelands::Message::Type::kWarfare);});
+	warfarebtn_->sigclicked.connect(
+	   [this]() { filter_messages(Widelands::Message::Type::kWarfare); });
 
 	scenariobtn_ = new UI::Button(this, "filter_scenario_messages", 5 * kPadding + 4 * kButtonSize,
 	                              kPadding, kButtonSize, kButtonSize, UI::ButtonStyle::kWuiSecondary,
 	                              g_gr->images().get("images/wui/menus/objectives.png"));
-	scenariobtn_->sigclicked.connect([this]() { filter_messages(Widelands::Message::Type::kScenario);});
+	scenariobtn_->sigclicked.connect(
+	   [this]() { filter_messages(Widelands::Message::Type::kScenario); });
 
 	message_filter_ = Widelands::Message::Type::kAllMessages;
 	set_filter_messages_tooltips();
@@ -109,14 +114,14 @@ GameMessageMenu::GameMessageMenu(InteractivePlayer& plr, UI::UniqueWindow::Regis
 	                             UI::ButtonStyle::kWuiPrimary,
 	                             g_gr->images().get("images/wui/messages/message_archive.png"));
 	update_archive_button_tooltip();
-	archivebtn_->sigclicked.connect([this]() { archive_or_restore();});
+	archivebtn_->sigclicked.connect([this]() { archive_or_restore(); });
 
 	togglemodebtn_ = new UI::Button(
 	   this, "toggle_between_inbox_or_archive",
 	   archivebtn_->get_x() + archivebtn_->get_w() + kPadding, archivebtn_->get_y(), kButtonSize,
 	   kButtonSize, UI::ButtonStyle::kWuiPrimary,
 	   g_gr->images().get("images/wui/messages/message_archived.png"), _("Show Archive"));
-	togglemodebtn_->sigclicked.connect([this]() { toggle_mode();});
+	togglemodebtn_->sigclicked.connect([this]() { toggle_mode(); });
 
 	centerviewbtn_ =
 	   new UI::Button(this, "center_main_mapview_on_location", kWindowWidth - kPadding - kButtonSize,
@@ -125,16 +130,19 @@ GameMessageMenu::GameMessageMenu(InteractivePlayer& plr, UI::UniqueWindow::Regis
 	                  as_tooltip_text_with_hotkey(
 	                     /** TRANSLATORS: Tooltip in the messages window */
 	                     _("Center main mapview on location"), "g"));
-	centerviewbtn_->sigclicked.connect([this]() { center_view();});
+	centerviewbtn_->sigclicked.connect([this]() { center_view(); });
 	centerviewbtn_->set_enabled(false);
 
 	if (get_usedefaultpos())
 		center_to_parent();
 
-	list->set_column_compare(ColTitle, [this](uint32_t a, uint32_t b) { return compare_title(a, b);});
-	list->set_column_compare(ColStatus, [this](uint32_t a, uint32_t b) { return compare_status(a, b);});
-	list->set_column_compare(ColType, [this](uint32_t a, uint32_t b) { return compare_type(a, b);});
-	list->set_column_compare(ColTimeSent, [this](uint32_t a, uint32_t b) { return compare_time_sent(a, b);});
+	list->set_column_compare(
+	   ColTitle, [this](uint32_t a, uint32_t b) { return compare_title(a, b); });
+	list->set_column_compare(
+	   ColStatus, [this](uint32_t a, uint32_t b) { return compare_status(a, b); });
+	list->set_column_compare(ColType, [this](uint32_t a, uint32_t b) { return compare_type(a, b); });
+	list->set_column_compare(
+	   ColTimeSent, [this](uint32_t a, uint32_t b) { return compare_time_sent(a, b); });
 
 	list->set_sort_column(ColTimeSent);
 	list->layout();
diff --git a/src/wui/game_objectives_menu.cc b/src/wui/game_objectives_menu.cc
index 9c050eb179..8ef2efdf5e 100644
--- a/src/wui/game_objectives_menu.cc
+++ b/src/wui/game_objectives_menu.cc
@@ -50,7 +50,7 @@ GameObjectivesMenu::GameObjectivesMenu(UI::Panel* parent, UI::UniqueWindow::Regi
                    "",
                    UI::Align::kLeft,
                    UI::MultilineTextarea::ScrollMode::kScrollNormalForced) {
-	list.selected.connect([this](uint32_t a) { selected(a);});
+	list.selected.connect([this](uint32_t a) { selected(a); });
 	if (get_usedefaultpos()) {
 		center_to_parent();
 	}
diff --git a/src/wui/game_summary.cc b/src/wui/game_summary.cc
index 59f0724fe1..a0f59c3bcc 100644
--- a/src/wui/game_summary.cc
+++ b/src/wui/game_summary.cc
@@ -105,9 +105,9 @@ GameSummaryScreen::GameSummaryScreen(InteractiveGameBase* parent, UI::UniqueWind
 	players_table_->add_column(100, _("Time"), "", UI::Align::kCenter);
 
 	// Connections
-	continue_button_->sigclicked.connect([this]() { continue_clicked();});
-	stop_button_->sigclicked.connect([this]() { stop_clicked();});
-	players_table_->selected.connect([this](uint32_t i) { player_selected(i);});
+	continue_button_->sigclicked.connect([this]() { continue_clicked(); });
+	stop_button_->sigclicked.connect([this]() { stop_clicked(); });
+	players_table_->selected.connect([this](uint32_t i) { player_selected(i); });
 
 	// Window
 	center_to_parent();
diff --git a/src/wui/general_statistics_menu.cc b/src/wui/general_statistics_menu.cc
index 1d40938d59..668c810eab 100644
--- a/src/wui/general_statistics_menu.cc
+++ b/src/wui/general_statistics_menu.cc
@@ -114,7 +114,7 @@ GeneralStatisticsMenu::GeneralStatisticsMenu(InteractiveGameBase& parent,
 		UI::Button& cb =
 		   *new UI::Button(hbox1, "playerbutton", 0, 0, 25, 25, UI::ButtonStyle::kWuiMenu,
 		                   player_image, player->get_name().c_str());
-		cb.sigclicked.connect([this, p]() { cb_changed_to(p);});
+		cb.sigclicked.connect([this, p]() { cb_changed_to(p); });
 		cb.set_perm_pressed(my_registry_->selected_players[p - 1]);
 
 		cbs_[p - 1] = &cb;
@@ -190,12 +190,12 @@ GeneralStatisticsMenu::GeneralStatisticsMenu(InteractiveGameBase& parent,
 	}
 
 	radiogroup_.set_state(selected_information_);
-	radiogroup_.changedto.connect([this](int32_t i) { radiogroup_changed(i);});
+	radiogroup_.changedto.connect([this](int32_t i) { radiogroup_changed(i); });
 
 	box_.add(hbox2, UI::Box::Resizing::kFullSize);
 
 	WuiPlotAreaSlider* slider = new WuiPlotAreaSlider(&box_, plot_, 0, 0, 100, 45);
-	slider->changedto.connect([this](int32_t i) { plot_.set_time_id(i);});
+	slider->changedto.connect([this](int32_t i) { plot_.set_time_id(i); });
 	box_.add(slider, UI::Box::Resizing::kFullSize);
 }
 
diff --git a/src/wui/inputqueuedisplay.cc b/src/wui/inputqueuedisplay.cc
index 7b877d538b..b9fb246870 100644
--- a/src/wui/inputqueuedisplay.cc
+++ b/src/wui/inputqueuedisplay.cc
@@ -306,8 +306,8 @@ void InputQueueDisplay::update_priority_buttons() {
 		NEVER_HERE();
 	}
 
-	priority_radiogroup_->changedto.connect([this](int32_t i) { radiogroup_changed(i);});
-	priority_radiogroup_->clicked.connect([this]() { radiogroup_clicked();});
+	priority_radiogroup_->changedto.connect([this](int32_t i) { radiogroup_changed(i); });
+	priority_radiogroup_->clicked.connect([this]() { radiogroup_clicked(); });
 
 	bool const can_act = igb_.can_act(building_.owner().player_number());
 	if (!can_act)
diff --git a/src/wui/interactive_base.cc b/src/wui/interactive_base.cc
index 01d3d4780c..e64f7d026d 100644
--- a/src/wui/interactive_base.cc
+++ b/src/wui/interactive_base.cc
@@ -255,8 +255,8 @@ InteractiveBase::InteractiveBase(EditorGameBase& the_egbase, Section& global_s)
 	//  funny results.
 	unset_sel_picture();
 
-	setDefaultCommand([this](const std::vector<std::string>& str) { cmd_lua(str);});
-	addCommand("mapobject", [this](const std::vector<std::string>& str) { cmd_map_object(str);});
+	setDefaultCommand([this](const std::vector<std::string>& str) { cmd_lua(str); });
+	addCommand("mapobject", [this](const std::vector<std::string>& str) { cmd_map_object(str); });
 }
 
 InteractiveBase::~InteractiveBase() {
diff --git a/src/wui/interactive_player.cc b/src/wui/interactive_player.cc
index 0a17c16222..664d990f0f 100644
--- a/src/wui/interactive_player.cc
+++ b/src/wui/interactive_player.cc
@@ -205,7 +205,8 @@ InteractivePlayer::InteractivePlayer(Widelands::Game& g,
 	finalize_toolbar();
 
 #ifndef NDEBUG  //  only in debug builds
-	addCommand("switchplayer", [this](const std::vector<std::string>& str) { cmdSwitchPlayer(str);});
+	addCommand(
+	   "switchplayer", [this](const std::vector<std::string>& str) { cmdSwitchPlayer(str); });
 #endif
 
 	map_options_subscriber_ = Notifications::subscribe<NoteMapOptions>(
diff --git a/src/wui/load_or_save_game.cc b/src/wui/load_or_save_game.cc
index 2745568fa6..ee5566a94b 100644
--- a/src/wui/load_or_save_game.cc
+++ b/src/wui/load_or_save_game.cc
@@ -74,10 +74,11 @@ LoadOrSaveGame::LoadOrSaveGame(UI::Panel* parent,
 		break;
 	}
 
-	table_->set_column_compare(0, [this](uint32_t a, uint32_t b) { return compare_save_time(a, b);});
+	table_->set_column_compare(
+	   0, [this](uint32_t a, uint32_t b) { return compare_save_time(a, b); });
 
 	table_->set_column_compare(table_->number_of_columns() - 1,
-	                           [this](uint32_t a, uint32_t b) { return compare_map_name(a, b);});
+	                           [this](uint32_t a, uint32_t b) { return compare_map_name(a, b); });
 
 	table_box_->add(table_, UI::Box::Resizing::kExpandBoth);
 	game_details_.button_box()->add(delete_, UI::Box::Resizing::kAlign, UI::Align::kLeft);
diff --git a/src/wui/login_box.cc b/src/wui/login_box.cc
index f515d0bbf8..14367877f1 100644
--- a/src/wui/login_box.cc
+++ b/src/wui/login_box.cc
@@ -63,10 +63,10 @@ LoginBox::LoginBox(Panel& parent)
 	                                     (get_inner_w() / 2 - 200) / 2,
 	                  loginbtn->get_y(), 200, 20, UI::ButtonStyle::kWuiSecondary, _("Cancel"));
 
-	loginbtn->sigclicked.connect([this]() { clicked_ok();});
-	cancelbtn->sigclicked.connect([this]() { clicked_back();});
-	eb_nickname->changed.connect([this]() { change_playername();});
-	cb_register->clickedto.connect([this](bool) { clicked_register();});
+	loginbtn->sigclicked.connect([this]() { clicked_ok(); });
+	cancelbtn->sigclicked.connect([this]() { clicked_back(); });
+	eb_nickname->changed.connect([this]() { change_playername(); });
+	cb_register->clickedto.connect([this](bool) { clicked_register(); });
 
 	eb_nickname->set_text(get_config_string("nickname", _("nobody")));
 	cb_register->set_state(get_config_bool("registered", false));
@@ -82,8 +82,8 @@ LoginBox::LoginBox(Panel& parent)
 
 	eb_nickname->focus();
 
-	eb_nickname->cancel.connect([this]() { clicked_back();});
-	eb_password->cancel.connect([this]() { clicked_back();});
+	eb_nickname->cancel.connect([this]() { clicked_back(); });
+	eb_password->cancel.connect([this]() { clicked_back(); });
 }
 
 /// think function of the UI (main loop)
diff --git a/src/wui/multiplayersetupgroup.cc b/src/wui/multiplayersetupgroup.cc
index cc435d96cd..e49d292b33 100644
--- a/src/wui/multiplayersetupgroup.cc
+++ b/src/wui/multiplayersetupgroup.cc
@@ -74,7 +74,7 @@ struct MultiPlayerClientGroup : public UI::Box {
 		add(&name, UI::Box::Resizing::kAlign, UI::Align::kCenter);
 
 		slot_dropdown_.set_disable_style(UI::ButtonDisableStyle::kFlat);
-		slot_dropdown_.selected.connect([this]() { set_slot();});
+		slot_dropdown_.selected.connect([this]() { set_slot(); });
 
 		update();
 		layout();
diff --git a/src/wui/playerdescrgroup.cc b/src/wui/playerdescrgroup.cc
index 079a223e24..ab4081278a 100644
--- a/src/wui/playerdescrgroup.cc
+++ b/src/wui/playerdescrgroup.cc
@@ -63,7 +63,7 @@ PlayerDescriptionGroup::PlayerDescriptionGroup(UI::Panel* const parent,
 	int32_t xplayerinit = w * 55 / 125;
 	d->plr_name = new UI::Textarea(this, xplrname, 0, xplayertype - xplrname, h);
 	d->btnEnablePlayer = new UI::Checkbox(this, Vector2i(xplayertype - 23, 0), "");
-	d->btnEnablePlayer->changedto.connect([this](bool b) { enable_player(b);});
+	d->btnEnablePlayer->changedto.connect([this](bool b) { enable_player(b); });
 	d->btnPlayerType =
 	   new UI::Button(this, "player_type", xplayertype, 0, xplayertribe - xplayertype - 2, h / 2,
 	                  UI::ButtonStyle::kFsMenuSecondary, "");
diff --git a/src/wui/portdockwaresdisplay.cc b/src/wui/portdockwaresdisplay.cc
index bde8388d35..5c541f101a 100644
--- a/src/wui/portdockwaresdisplay.cc
+++ b/src/wui/portdockwaresdisplay.cc
@@ -105,7 +105,7 @@ public:
 				   w.descname(), std::make_pair(Widelands::wwWORKER, i), w.icon(), false, w.descname());
 			}
 			d.set_enabled(can_act);
-			d.selected.connect([this, c]() { select(c);});
+			d.selected.connect([this, c]() { select(c); });
 
 			UI::Icon* icon = new UI::Icon(box, g_gr->images().get(kNoWare));
 			icon->set_handle_mouse(true);
diff --git a/src/wui/seafaring_statistics_menu.cc b/src/wui/seafaring_statistics_menu.cc
index 6298dbc221..e1852391db 100644
--- a/src/wui/seafaring_statistics_menu.cc
+++ b/src/wui/seafaring_statistics_menu.cc
@@ -152,13 +152,14 @@ SeafaringStatisticsMenu::SeafaringStatisticsMenu(InteractivePlayer& plr,
 	main_box_.set_size(get_inner_w() - 2 * kPadding, get_inner_h() - 2 * kPadding);
 
 	// Configure actions
-	idle_btn_.sigclicked.connect(
-	   [this]() { filter_ships(ShipFilterStatus::kIdle);});
-	shipping_btn_.sigclicked.connect(
-	   [this]() { filter_ships(ShipFilterStatus::kShipping);});
-	waiting_btn_.sigclicked.connect([this]() { filter_ships(ShipFilterStatus::kExpeditionWaiting);});
-	scouting_btn_.sigclicked.connect([this]() { filter_ships(ShipFilterStatus::kExpeditionScouting);});
-	portspace_btn_.sigclicked.connect([this]() { filter_ships(ShipFilterStatus::kExpeditionPortspaceFound);});
+	idle_btn_.sigclicked.connect([this]() { filter_ships(ShipFilterStatus::kIdle); });
+	shipping_btn_.sigclicked.connect([this]() { filter_ships(ShipFilterStatus::kShipping); });
+	waiting_btn_.sigclicked.connect(
+	   [this]() { filter_ships(ShipFilterStatus::kExpeditionWaiting); });
+	scouting_btn_.sigclicked.connect(
+	   [this]() { filter_ships(ShipFilterStatus::kExpeditionScouting); });
+	portspace_btn_.sigclicked.connect(
+	   [this]() { filter_ships(ShipFilterStatus::kExpeditionPortspaceFound); });
 	ship_filter_ = ShipFilterStatus::kAll;
 	set_filter_ships_tooltips();
 
diff --git a/src/wui/shipwindow.cc b/src/wui/shipwindow.cc
index 0a1b74e88f..cb1f65000b 100644
--- a/src/wui/shipwindow.cc
+++ b/src/wui/shipwindow.cc
@@ -75,47 +75,43 @@ ShipWindow::ShipWindow(InteractiveGameBase& igb, UniqueWindow::Registry& reg, Sh
 	UI::Box* exp_bot = new UI::Box(&navigation_box_, 0, 0, UI::Box::Horizontal);
 	navigation_box_.add(exp_bot, UI::Box::Resizing::kAlign, UI::Align::kCenter);
 
-	btn_scout_[WALK_NW - 1] =
-	   make_button(exp_top, "scnw", _("Scout towards the north west"), pic_scout_nw,
-	               [this]() { act_scout_towards(WALK_NW);});
+	btn_scout_[WALK_NW - 1] = make_button(exp_top, "scnw", _("Scout towards the north west"),
+	                                      pic_scout_nw, [this]() { act_scout_towards(WALK_NW); });
 	exp_top->add(btn_scout_[WALK_NW - 1]);
 
-	btn_explore_island_cw_ = make_button(
-	   exp_top, "expcw", _("Explore the island’s coast clockwise"), pic_explore_cw,
-	   [this]() { act_explore_island(IslandExploreDirection::kClockwise);});
+	btn_explore_island_cw_ =
+	   make_button(exp_top, "expcw", _("Explore the island’s coast clockwise"), pic_explore_cw,
+	               [this]() { act_explore_island(IslandExploreDirection::kClockwise); });
 	exp_top->add(btn_explore_island_cw_);
 
-	btn_scout_[WALK_NE - 1] =
-	   make_button(exp_top, "scne", _("Scout towards the north east"), pic_scout_ne,
-	               [this]() { act_scout_towards(WALK_NE);});
+	btn_scout_[WALK_NE - 1] = make_button(exp_top, "scne", _("Scout towards the north east"),
+	                                      pic_scout_ne, [this]() { act_scout_towards(WALK_NE); });
 	exp_top->add(btn_scout_[WALK_NE - 1]);
 
 	btn_scout_[WALK_W - 1] = make_button(exp_mid, "scw", _("Scout towards the west"), pic_scout_w,
-	                                     [this]() { act_scout_towards(WALK_W);});
+	                                     [this]() { act_scout_towards(WALK_W); });
 	exp_mid->add(btn_scout_[WALK_W - 1]);
 
 	btn_construct_port_ =
 	   make_button(exp_mid, "buildport", _("Construct a port at the current location"),
-	               pic_construct_port, [this]() { act_construct_port();});
+	               pic_construct_port, [this]() { act_construct_port(); });
 	exp_mid->add(btn_construct_port_);
 
 	btn_scout_[WALK_E - 1] = make_button(exp_mid, "sce", _("Scout towards the east"), pic_scout_e,
-	                                     [this]() { act_scout_towards(WALK_E);});
+	                                     [this]() { act_scout_towards(WALK_E); });
 	exp_mid->add(btn_scout_[WALK_E - 1]);
 
-	btn_scout_[WALK_SW - 1] =
-	   make_button(exp_bot, "scsw", _("Scout towards the south west"), pic_scout_sw,
-	               [this]() { act_scout_towards(WALK_SW);});
+	btn_scout_[WALK_SW - 1] = make_button(exp_bot, "scsw", _("Scout towards the south west"),
+	                                      pic_scout_sw, [this]() { act_scout_towards(WALK_SW); });
 	exp_bot->add(btn_scout_[WALK_SW - 1]);
 
-	btn_explore_island_ccw_ =
-	   make_button(exp_bot, "expccw", _("Explore the island’s coast counter clockwise"),
-	               pic_explore_ccw, [this]() { act_explore_island(IslandExploreDirection::kCounterClockwise);});
+	btn_explore_island_ccw_ = make_button(
+	   exp_bot, "expccw", _("Explore the island’s coast counter clockwise"), pic_explore_ccw,
+	   [this]() { act_explore_island(IslandExploreDirection::kCounterClockwise); });
 	exp_bot->add(btn_explore_island_ccw_);
 
-	btn_scout_[WALK_SE - 1] =
-	   make_button(exp_bot, "scse", _("Scout towards the south east"), pic_scout_se,
-	               [this]() { act_scout_towards(WALK_SE);});
+	btn_scout_[WALK_SE - 1] = make_button(exp_bot, "scse", _("Scout towards the south east"),
+	                                      pic_scout_se, [this]() { act_scout_towards(WALK_SE); });
 	exp_bot->add(btn_scout_[WALK_SE - 1]);
 
 	vbox_.add(&navigation_box_, UI::Box::Resizing::kAlign, UI::Align::kCenter);
@@ -124,31 +120,29 @@ ShipWindow::ShipWindow(InteractiveGameBase& igb, UniqueWindow::Registry& reg, Sh
 	UI::Box* buttons = new UI::Box(&vbox_, 0, 0, UI::Box::Horizontal);
 	vbox_.add(buttons, UI::Box::Resizing::kFullSize);
 
-	btn_sink_ = make_button(
-	   buttons, "sink", _("Sink the ship"), pic_sink, [this]() { act_sink();});
+	btn_sink_ = make_button(buttons, "sink", _("Sink the ship"), pic_sink, [this]() { act_sink(); });
 	buttons->add(btn_sink_);
 
 	btn_cancel_expedition_ =
 	   make_button(buttons, "cancel_expedition", _("Cancel the Expedition"), pic_cancel_expedition,
-	               [this]() { act_cancel_expedition();});
+	               [this]() { act_cancel_expedition(); });
 	buttons->add(btn_cancel_expedition_);
 
 	buttons->add_inf_space();
 
 	if (igbase_.get_display_flag(InteractiveBase::dfDebug)) {
-		btn_debug_ = make_button(buttons, "debug", _("Show Debug Window"), pic_debug,
-		                         [this]() { act_debug();});
+		btn_debug_ = make_button(
+		   buttons, "debug", _("Show Debug Window"), pic_debug, [this]() { act_debug(); });
 		btn_debug_->set_enabled(true);
 		buttons->add(btn_debug_);
 	}
 
 	btn_destination_ = make_button(buttons, "destination", _("Go to destination"), pic_destination,
-	                               [this]() { act_destination();});
+	                               [this]() { act_destination(); });
 	btn_destination_->set_enabled(false);
 	buttons->add(btn_destination_);
 
-	btn_goto_ = make_button(
-	   buttons, "goto", _("Go to ship"), pic_goto, [this]() { act_goto();});
+	btn_goto_ = make_button(buttons, "goto", _("Go to ship"), pic_goto, [this]() { act_goto(); });
 	buttons->add(btn_goto_);
 
 	set_center_panel(&vbox_);
diff --git a/src/wui/soldierlist.cc b/src/wui/soldierlist.cc
index 30d53415f4..e9d1bfbe30 100644
--- a/src/wui/soldierlist.cc
+++ b/src/wui/soldierlist.cc
@@ -382,8 +382,8 @@ SoldierList::SoldierList(UI::Panel& parent, InteractiveGameBase& igb, Widelands:
 
 	add(&infotext_, UI::Box::Resizing::kAlign, UI::Align::kCenter);
 
-	soldierpanel_.set_mouseover([this](const Soldier* s) { mouseover(s);});
-	soldierpanel_.set_click([this](const Soldier* s) { eject(s);});
+	soldierpanel_.set_mouseover([this](const Soldier* s) { mouseover(s); });
+	soldierpanel_.set_click([this](const Soldier* s) { eject(s); });
 
 	// We don't want translators to translate this twice, so it's a bit involved.
 	int w = UI::g_fh
@@ -422,7 +422,7 @@ SoldierList::SoldierList(UI::Panel& parent, InteractiveGameBase& igb, Widelands:
 			soldier_preference_.set_state(1);
 		}
 		if (can_act) {
-			soldier_preference_.changedto.connect([this](int32_t a) { set_soldier_preference(a);});
+			soldier_preference_.changedto.connect([this](int32_t a) { set_soldier_preference(a); });
 		} else {
 			soldier_preference_.set_enabled(false);
 		}
diff --git a/src/wui/warehousewindow.cc b/src/wui/warehousewindow.cc
index a1311aa042..df97462fd1 100644
--- a/src/wui/warehousewindow.cc
+++ b/src/wui/warehousewindow.cc
@@ -139,7 +139,7 @@ WarehouseWaresPanel::WarehouseWaresPanel(UI::Panel* parent,
 	b = new UI::Button(                                                                             \
 	   buttons, #policy, 0, 0, 34, 34, UI::ButtonStyle::kWuiMenu,                                   \
 	   g_gr->images().get("images/wui/buildings/stock_policy_button_" #policy ".png"), tooltip),    \
-	b->sigclicked.connect([this]() { set_policy(Widelands::StockPolicy::k##policyname); }),        \
+	b->sigclicked.connect([this]() { set_policy(Widelands::StockPolicy::k##policyname); }),         \
 	buttons->add(b);
 
 		ADD_POLICY_BUTTON(normal, Normal, _("Normal policy"))
diff --git a/src/wui/watchwindow.cc b/src/wui/watchwindow.cc
index eaee270ba7..c4622979c7 100644
--- a/src/wui/watchwindow.cc
+++ b/src/wui/watchwindow.cc
@@ -56,24 +56,24 @@ WatchWindow::WatchWindow(InteractiveGameBase& parent,
 	UI::Button* followbtn =
 	   new UI::Button(this, "follow", 0, h - 34, 34, 34, UI::ButtonStyle::kWuiSecondary,
 	                  g_gr->images().get("images/wui/menus/watch_follow.png"), _("Follow"));
-	followbtn->sigclicked.connect([this]() { do_follow();});
+	followbtn->sigclicked.connect([this]() { do_follow(); });
 
 	UI::Button* gotobtn = new UI::Button(
 	   this, "center_mainview_here", 34, h - 34, 34, 34, UI::ButtonStyle::kWuiSecondary,
 	   g_gr->images().get("images/wui/menus/goto.png"), _("Center the main view on this"));
-	gotobtn->sigclicked.connect([this]() { do_goto();});
+	gotobtn->sigclicked.connect([this]() { do_goto(); });
 
 	if (init_single_window) {
 		for (uint8_t i = 0; i < kViews; ++i) {
 			view_btns_[i] = new UI::Button(
 			   this, "view", 74 + (17 * i), 200 - 34, 17, 34, UI::ButtonStyle::kWuiSecondary, "-");
-			view_btns_[i]->sigclicked.connect([this, i]() { view_button_clicked(i);});
+			view_btns_[i]->sigclicked.connect([this, i]() { view_button_clicked(i); });
 		}
 
 		UI::Button* closebtn =
 		   new UI::Button(this, "close", w - 34, h - 34, 34, 34, UI::ButtonStyle::kWuiSecondary,
 		                  g_gr->images().get("images/wui/menu_abort.png"), _("Close"));
-		closebtn->sigclicked.connect([this]() { close_cur_view();});
+		closebtn->sigclicked.connect([this]() { close_cur_view(); });
 	}
 
 	map_view_.field_clicked.connect(
-- 
2.26.2


From aae0c4b800c7a440b102722f185ee479ea93e5bc Mon Sep 17 00:00:00 2001
From: Benedikt Straub <benedikt-straub@web.de>
Date: Sat, 9 May 2020 18:03:27 +0200
Subject: [PATCH 3/3] Deleted an unused include

Closes: https://github.com/widelands/widelands/pull/3907
---
 src/wui/debugconsole.cc | 2 --
 1 file changed, 2 deletions(-)

diff --git a/src/wui/debugconsole.cc b/src/wui/debugconsole.cc
index 966ba118c7..9ac4e076f4 100644
--- a/src/wui/debugconsole.cc
+++ b/src/wui/debugconsole.cc
@@ -21,8 +21,6 @@
 
 #include <map>
 
-#include <boost/bind.hpp>
-
 #include "base/log.h"
 #include "chat/chat.h"
 
-- 
2.26.2

