https://bugs.python.org/issue1674555

--- Python-3.7.1/Lib/site.py
+++ Python-3.7.1/Lib/site.py
@@ -562,8 +562,12 @@
     known_paths = venv(known_paths)
     if ENABLE_USER_SITE is None:
         ENABLE_USER_SITE = check_enableusersite()
-    known_paths = addusersitepackages(known_paths)
-    known_paths = addsitepackages(known_paths)
+    if os.environ.get("_PYTHONNOSITEPACKAGES") is None:
+        known_paths = addusersitepackages(known_paths)
+        known_paths = addsitepackages(known_paths)
+    else:
+        # Initialize USER_BASE and USER_SITE.
+        getusersitepackages()
     setquit()
     setcopyright()
     sethelper()
--- Python-3.7.1/Lib/test/libregrtest/main.py
+++ Python-3.7.1/Lib/test/libregrtest/main.py
@@ -105,7 +105,7 @@
 
     def accumulate_result(self, test, result):
         ok, test_time, xml_data = result
-        if ok not in (CHILD_ERROR, INTERRUPTED):
+        if ok not in (None, CHILD_ERROR, INTERRUPTED):
             self.test_times.append((test_time, test))
         if ok == PASSED:
             self.good.append(test)
@@ -118,7 +118,7 @@
         elif ok == RESOURCE_DENIED:
             self.skipped.append(test)
             self.resource_denieds.append(test)
-        elif ok != INTERRUPTED:
+        elif ok not in (None, INTERRUPTED):
             raise ValueError("invalid test result: %r" % ok)
 
         if xml_data:
--- Python-3.7.1/Lib/test/libregrtest/runtest_mp.py
+++ Python-3.7.1/Lib/test/libregrtest/runtest_mp.py
@@ -10,7 +10,7 @@
 from test import support
 
 from test.libregrtest.runtest import (
-    runtest, INTERRUPTED, CHILD_ERROR, PROGRESS_MIN_TIME,
+    runtest, run_test_in_subprocess, INTERRUPTED, CHILD_ERROR, PROGRESS_MIN_TIME,
     format_test_result)
 from test.libregrtest.setup import setup_tests
 from test.libregrtest.utils import format_duration
@@ -23,41 +23,6 @@
 WAIT_PROGRESS = 2.0   # seconds
 
 
-def run_test_in_subprocess(testname, ns):
-    """Run the given test in a subprocess with --slaveargs.
-
-    ns is the option Namespace parsed from command-line arguments. regrtest
-    is invoked in a subprocess with the --slaveargs argument; when the
-    subprocess exits, its return code, stdout and stderr are returned as a
-    3-tuple.
-    """
-    from subprocess import Popen, PIPE
-
-    ns_dict = vars(ns)
-    slaveargs = (ns_dict, testname)
-    slaveargs = json.dumps(slaveargs)
-
-    cmd = [sys.executable, *support.args_from_interpreter_flags(),
-           '-u',    # Unbuffered stdout and stderr
-           '-m', 'test.regrtest',
-           '--slaveargs', slaveargs]
-    if ns.pgo:
-        cmd += ['--pgo']
-
-    # Running the child from the same working directory as regrtest's original
-    # invocation ensures that TEMPDIR for the child is the same when
-    # sysconfig.is_python_build() is true. See issue 15300.
-    popen = Popen(cmd,
-                  stdout=PIPE, stderr=PIPE,
-                  universal_newlines=True,
-                  close_fds=(os.name != 'nt'),
-                  cwd=support.SAVEDCWD)
-    with popen:
-        stdout, stderr = popen.communicate()
-        retcode = popen.wait()
-    return retcode, stdout, stderr
-
-
 def run_tests_slave(slaveargs):
     ns_dict, testname = json.loads(slaveargs)
     ns = types.SimpleNamespace(**ns_dict)
@@ -65,7 +30,7 @@
     setup_tests(ns)
 
     try:
-        result = runtest(ns, testname)
+        result = runtest(ns, testname, slave=True)
     except KeyboardInterrupt:
         result = INTERRUPTED, '', None
     except BaseException as e:
--- Python-3.7.1/Lib/test/libregrtest/runtest.py
+++ Python-3.7.1/Lib/test/libregrtest/runtest.py
@@ -1,6 +1,7 @@
 import faulthandler
 import importlib
 import io
+import json
 import os
 import sys
 import time
@@ -79,7 +80,7 @@
         return 'test.' + test
 
 
-def runtest(ns, test):
+def runtest(ns, test, *, slave=False):
     """Run a single test.
 
     ns -- regrtest namespace of options
@@ -101,6 +102,25 @@
 
     output_on_failure = ns.verbose3
 
+    if not slave and test == "test_site":
+        retcode, stdout, stderr = run_test_in_subprocess(test, ns)
+        if retcode != 0:
+            result = (CHILD_ERROR, None)
+        else:
+            stdout, _, result = stdout.strip().rpartition("\n")
+            if not result:
+                return (None, None)
+            result = json.loads(result)
+        stdout = stdout.rstrip()
+        stderr = stderr.rstrip()
+        if stdout:
+            print(stdout, flush=True)
+        if stderr and not ns.pgo:
+            print(stderr, file=sys.stderr, flush=True)
+        if result[0] == INTERRUPTED:
+            raise KeyboardInterrupt
+        return result
+
     use_timeout = (ns.timeout is not None)
     if use_timeout:
         faulthandler.dump_traceback_later(ns.timeout, exit=True)
@@ -149,6 +169,40 @@
 def post_test_cleanup():
     support.reap_children()
 
+def run_test_in_subprocess(testname, ns):
+    """Run the given test in a subprocess with --slaveargs.
+
+    ns is the option Namespace parsed from command-line arguments. regrtest
+    is invoked in a subprocess with the --slaveargs argument; when the
+    subprocess exits, its return code, stdout and stderr are returned as a
+    3-tuple.
+    """
+    from subprocess import Popen, PIPE
+
+    ns_dict = vars(ns)
+    slaveargs = (ns_dict, testname)
+    slaveargs = json.dumps(slaveargs)
+
+    cmd = [sys.executable, *support.args_from_interpreter_flags(),
+           '-u',    # Unbuffered stdout and stderr
+           '-m', 'test.regrtest',
+           '--slaveargs', slaveargs]
+    if ns.pgo:
+        cmd += ['--pgo']
+
+    # Running the child from the same working directory as regrtest's original
+    # invocation ensures that TEMPDIR for the child is the same when
+    # sysconfig.is_python_build() is true. See issue 15300.
+    popen = Popen(cmd,
+                  stdout=PIPE, stderr=PIPE,
+                  universal_newlines=True,
+                  close_fds=(os.name != 'nt'),
+                  cwd=support.SAVEDCWD)
+    with popen:
+        stdout, stderr = popen.communicate()
+        retcode = popen.wait()
+    return retcode, stdout, stderr
+
 
 def runtest_inner(ns, test, display_failure=True):
     support.unload(test)
--- Python-3.7.1/Lib/test/test_site.py
+++ Python-3.7.1/Lib/test/test_site.py
@@ -9,6 +9,7 @@
 from test.support import (captured_stderr, TESTFN, EnvironmentVarGuard,
                           change_cwd)
 import builtins
+import importlib
 import os
 import sys
 import re
@@ -31,12 +32,19 @@
 
 
 OLD_SYS_PATH = None
+OLD__PYTHONNOSITEPACKAGES = None
 
 
 def setUpModule():
     global OLD_SYS_PATH
     OLD_SYS_PATH = sys.path[:]
 
+    if "_PYTHONNOSITEPACKAGES" in os.environ:
+        global OLD__PYTHONNOSITEPACKAGES
+        OLD__PYTHONNOSITEPACKAGES = os.environ.get("_PYTHONNOSITEPACKAGES")
+        del os.environ["_PYTHONNOSITEPACKAGES"]
+        importlib.reload(site)
+
     if site.ENABLE_USER_SITE and not os.path.isdir(site.USER_SITE):
         # need to add user site directory for tests
         try:
@@ -50,6 +58,8 @@
 
 def tearDownModule():
     sys.path[:] = OLD_SYS_PATH
+    if OLD__PYTHONNOSITEPACKAGES is not None:
+        os.environ["_PYTHONNOSITEPACKAGES"] = OLD__PYTHONNOSITEPACKAGES
 
 
 class HelperFunctionsTests(unittest.TestCase):
@@ -467,8 +477,11 @@
     def test_startup_imports(self):
         # This tests checks which modules are loaded by Python when it
         # initially starts upon startup.
+        env = os.environ.copy()
+        env["_PYTHONNOSITEPACKAGES"] = "1"
         popen = subprocess.Popen([sys.executable, '-I', '-v', '-c',
                                   'import sys; print(set(sys.modules))'],
+                                 env=env,
                                  stdout=subprocess.PIPE,
                                  stderr=subprocess.PIPE,
                                  encoding='utf-8')
--- Python-3.7.1/Makefile.pre.in
+++ Python-3.7.1/Makefile.pre.in
@@ -1042,7 +1042,7 @@
 ######################################################################
 
 TESTOPTS=	$(EXTRATESTOPTS)
-TESTPYTHON=	$(RUNSHARED) ./$(BUILDPYTHON) $(TESTPYTHONOPTS)
+TESTPYTHON=	_PYTHONNOSITEPACKAGES=1 $(RUNSHARED) ./$(BUILDPYTHON) $(TESTPYTHONOPTS)
 TESTRUNNER=	$(TESTPYTHON) $(srcdir)/Tools/scripts/run_tests.py
 TESTTIMEOUT=	1200
 
